[net]
type = 'table'
[[.source]]
type = 'global'
``````````
type = 'library'
name = 'net'

<default>
type = 'function'
parent = {
	1 = {
		type = 'global',
		name = 'net'
	},
	2 = {
		type = 'library',
		name = 'net'
	}
}

[Broadcast]
description = 'Sends the currently built net message to all connected players.\r\nMore information can be found in <page>Net Library Usage</page>.\r\n\r\n**Scope:** Server'

[BytesLeft]
description = 'Returns the amount of data left to read in the current message in bytes. Does nothing when sending data.\r\n\r\n**Returns:** The amount of data left to read in the current net message in bytes.\r\nReturns nil if no net message has been started.\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'number'

[BytesWritten]
description = 'Returns the size of the current message in bytes.\r\n\r\n<note>This will include 3 extra bytes used by the engine internally to send the data over the network.</note>\r\n\r\n**Returns:** The amount of bytes written to the current net message.\r\nReturns nil if no net message has been started.\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'number'

[Incoming]
description = '<internal>You may be looking for <page>net.Receive</page>.</internal>\r\nFunction called by the engine to tell the lua state a message arrived.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'length'
type = 'number'
description = 'The message length, in bits.'
``````````
name = 'client'
type = 'Player'
description = 'The player that sent the message. This will be nil in the client state.'

[ReadAngle]
description = 'Reads an angle from the received net message.\r\n<warning>You **must** read information in same order as you write it.</warning>\r\n\r\n**Returns:** The read angle, or Angle(0,0,0) if no angle could be read\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'Angle'

[ReadBit]
description = 'Reads a bit from the received net message.\r\n\r\n<warning>You **must** read information in same order as you write it.</warning>\r\n\r\n**Returns:** 0 or 1, or 0 if the bit could not be read.\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'number'

[ReadBool]
description = 'Reads a boolean from the received net message.\r\n<warning>You **must** read information in same order as you write it.</warning>\r\n\r\n**Returns:** true or false, or false if the bool could not be read.\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'boolean'

[ReadColor]
description = 'Reads a <page>Color</page> from the current net message.\r\n<warning>You **must** read information in same order as you write it.</warning>\r\n\r\n**Returns:** The <page>Color</page> read from the current net message, or Color(0,0,0,0) if the color could not be read.\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'table'

[ReadData]
description = 'Reads pure binary data from the message.\r\n<warning>You **must** read information in same order as you write it.</warning>\r\n\r\n**Returns:** The binary data read, or a string containing one character with a byte of 0 if no data could be read.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'length'
type = 'number'
description = 'The length of the data to be read, in bytes.'
[[.returns]]
type = 'string'

[ReadDouble]
description = 'Reads a double-precision number from the received net message.\r\n<warning>You **must** read information in same order as you write it.</warning>\r\n\r\n**Returns:** The double-precision number, or 0 if no number could be read.\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'number'

[ReadEntity]
description = 'Reads an entity from the received net message. You should always check if the specified entity exists as it may have been removed and therefor NULL if it is outside of the players PVS or was already removed.\r\n<warning>You **must** read information in same order as you write it.</warning>\r\n\r\n**Returns:** The entity, or Entity(0) if no entity could be read.\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'Entity'

[ReadFloat]
description = 'Reads a floating point number from the received net message.\r\n\r\n<warning>You **must** read information in same order as you write it.</warning>\r\n\r\n**Returns:** The floating point number, or 0 if no number could be read.\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'number'

[ReadHeader]
description = '<internal></internal>\r\n\r\nReads a word, basically unsigned short. This is used internally to read the "header" of the message which is an unsigned short which can be converted to the corresponding message name via <page>util.NetworkIDToString</page>.\r\n\r\n**Returns:** The header number\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'number'

[ReadInt]
description = 'Reads an integer from the received net message.\r\n<warning>You **must** read information in same order as you write it.</warning>\r\n\r\n**Returns:** The read integer number, or 0 if no integer could be read.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'bitCount'
type = 'number'
description = 'The amount of bits to be read.\r\n\r\nThis must be set to what you set to <page>net.WriteInt</page>. Read more information at <page>net.WriteInt</page>.'
[[.returns]]
type = 'number'

[ReadMatrix]
description = 'Reads a <page>VMatrix</page> from the received net message.\r\n<warning>You **must** read information in same order as you write it.</warning>\r\n\r\n**Returns:** The matrix, or an empty matrix if no matrix could be read.\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'VMatrix'

[ReadNormal]
description = 'Reads a normal vector from the net message.\r\n<warning>You **must** read information in same order as you write it.</warning>\r\n\r\n**Returns:** The normalized vector ( length = 1 ), or Vector(0,0,1) if no normal could be read.\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'Vector'

[ReadString]
description = 'Reads a null terminated string from the net stream. The size of the string is 8 bits plus 8 bits for every ASCII character in the string.\r\n<warning>You **must** read information in same order as you write it.</warning>\r\n\r\n**Returns:** The read string, or a string with 0 length if no string could be read.\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'string'

[ReadTable]
description = 'Reads a table from the received net message.\r\n\r\n<note>Sometimes when sending a table through the net library, the order of the keys may be switched. So be cautious when comparing (See Example 1).</note>\r\n<warning>You **must** read information in same order as you write it.</warning>\r\n\r\nSee <page>net.WriteTable</page> for extra info.\r\nYou may get `net.ReadType: Couldn\'t read type X` during the execution of the function, the problem is that you are sending objects that cannot be serialized/sent over the network.\r\n\r\n**Returns:** Table recieved via the net message, or a blank table if no table could be read.\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'table'

[ReadType]
description = '<internal>Used internally by <page>net.ReadTable</page>.</internal>\r\n\r\nReads a value from the net message with the specified type, written by <page>net.WriteType</page>.\r\n\r\n<warning>You **must** read information in same order as you write it.</warning>\r\n\r\n**Returns:** The value, or the respective blank value based on the type you\'re reading if the value could not be read.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'typeID'
type = 'number'
description = 'The type of value to be read, using <page>Enums/TYPE</page>.'
[[.returns]]
type = 'any'

[ReadUInt]
description = 'Reads an unsigned integer with the specified number of bits from the received net message.\r\n<warning>You **must** read information in same order as you write it.</warning>\r\n\r\n**Returns:** The unsigned integer read, or 0 if the integer could not be read.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'numberOfBits'
type = 'number'
description = 'The size of the integer to be read, in bits.'
[[.returns]]
type = 'number'

[ReadVector]
description = 'Reads a vector from the received net message.  Vectors sent by this function are compressed, which may result in precision loss. See <page>net.WriteVector</page> for more information.\r\n<warning>You **must** read information in same order as you write it.</warning>\r\n\r\n**Returns:** The read vector, or Vector(0,0,0) if no vector could be read.\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'Vector'

[Receive]
description = 'Adds a net message handler. Only one receiver can be used to receive the net message.\r\n<note>The message-name is converted to lower-case so the message-names "`BigBlue`" and "`bigblue`" would be equal.</note>\r\n<warning>You **must** put this function **outside** of any other function or hook for it to work properly unless you know what you are doing!</warning>\r\n<warning>You **must** read information in the same order as you write it.</warning>\r\n<warning>Each net message has a length limit of 64KB!</warning>\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'messageName'
type = 'string'
description = 'The message name to hook to.'
``````````
name = 'callback'
type = 'function'
description = 'The function to be called if the specified message was received. Arguments are:\r\n\r\n<page>number</page> len - Length of the message, in bits<br>\r\n<page>Player</page> ply - The player that sent the message, works only serverside'

[Send]
description = 'Sends the current message to the specified player, or to all players listed in the table.\r\n\r\n**Scope:** Server'
[[.args]]
name = 'ply'
type = 'Player'
description = 'The player(s) to send the message to. Can be a table of players or a <page>CRecipientFilter</page>.'

[SendOmit]
description = 'Sends the current message to all except the specified, or to all except all players in the table.\r\n\r\n**Scope:** Server'
[[.args]]
name = 'ply'
type = 'Player'
description = 'The player(s) to NOT send the message to. Can be a table of players'

[SendPAS]
description = 'Sends the message to all players that are in the same potentially audible set(PAS) as the position, or simply said, it adds all players that can potentially hear sounds from this position.\r\n\r\n**Scope:** Server'
[[.args]]
name = 'position'
type = 'Vector'
description = 'PAS position.'

[SendPVS]
description = 'Sends the message to all players the position is in the PVS of or, more simply said, sends the message to players that can potentially see this position.\r\n\r\n**Scope:** Server'
[[.args]]
name = 'position'
type = 'Vector'
description = 'Position that must be in players\' visibility set.'

[SendToServer]
description = 'Sends the current message to the server.\r\n\r\n**Scope:** Client'

[Start]
description = 'Begins a new net message. If another net message is already started and hasn\'t been sent yet, it will be discarded.\r\n\r\n<warning>Each net message has a length limit of 64KB!</warning>\r\n\r\n<warning>The message name must be pooled with <page>util.AddNetworkString</page> beforehand!</warning>\r\n\r\n<warning>Net messages will not reliably reach the client until the client\'s <page>GM:InitPostEntity</page> hook is called.</warning>\r\n\r\n**Returns:** True if the message has been started.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'messageName'
type = 'string'
description = 'The name of the message to send'
``````````
name = 'unreliable'
type = 'boolean'
description = 'If set to true, the message is not guaranteed to reach its destination'
[[.returns]]
type = 'boolean'

[WriteAngle]
description = 'Writes an angle to the current net message.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'angle'
type = 'Angle'
description = 'The angle to be sent.'

[WriteBit]
description = 'Appends a boolean (as 1 or 0) to the current net message.\r\n\r\nPlease note that the bit is written here from a <page>boolean</page> (true/false) but <page>net.ReadBit</page> returns a number.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'boolean'
type = 'boolean'
description = 'Bit status (false = 0, true = 1)'

[WriteBool]
description = 'Appends a boolean to the current net message. Alias of <page>net.WriteBit</page>\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'boolean'
type = 'boolean'
description = 'Boolean value to write'

[WriteColor]
description = 'Appends a <page>Color</page> to the current net message.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'Color'
type = 'table'
description = 'The <page>Color</page> you want to append to the net message.'

[WriteData]
description = 'Writes a chunk of binary data to the message.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'binaryData'
type = 'string'
description = 'The binary data to be sent.'
``````````
name = 'length'
type = 'number'
description = 'The length of the binary data to be sent, in bytes.'

[WriteDouble]
description = 'Appends a double-precision number to the current net message.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'double'
type = 'number'
description = 'The double to be sent'

[WriteEntity]
description = 'Appends an entity to the current net message.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'entity'
type = 'Entity'
description = 'The entity to be sent.'

[WriteFloat]
description = 'Appends a float (number with decimals) to the current net message.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'float'
type = 'number'
description = 'The float to be sent.'

[WriteInt]
description = 'Appends an integer - a whole number - to the current net message. Can be read back with <page>net.ReadInt</page> on the receiving end.\r\n\r\nUse <page>net.WriteUInt</page> to send an unsigned number (that you know will never be negative). Use <page>net.WriteFloat</page> for a non-whole number (e.g. 2.25).\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'integer'
type = 'number'
description = 'The integer to be sent.'
``````````
name = 'bitCount'
type = 'number'
description = 'The amount of bits the number consists of. This must be 32 or less.\r\n\r\nIf you are unsure what to set, just set it to 32.\r\n\r\n\r\n\r\nConsult the table below to determine the bit count you need:\r\n\r\n| Bit Count |  Minimum value |  Maximum value |\r\n|-----------|:--------------:|:--------------:|\r\n| 3 | -4 | 3 |\r\n| 4 | -8 | 7 |\r\n| 5 | -16 | 15 |\r\n| 6 | -32 | 31 |\r\n| 7 | -64 | 63 |\r\n| 8 | -128 | 127 |\r\n| 9 | -256 | 255 |\r\n| 10 | -512 | 511 |\r\n| 11 | -1024 | 1023 |\r\n| 12 | -2048 | 2047 |\r\n| 13 | -4096 | 4095 |\r\n| 14 | -8192 | 8191 |\r\n| 15 | -16384 | 16383 |\r\n| 16 | -32768 | 32767 |\r\n| 17 | -65536 | 65535 |\r\n| 18 | -131072 | 131071 |\r\n| 19 | -262144 | 262143 |\r\n| 20 | -524288 | 524287 |\r\n| 21 | -1048576 | 1048575 |\r\n| 22 | -2097152 | 2097151 |\r\n| 23 | -4194304 | 4194303 |\r\n| 24 | -8388608 | 8388607 |\r\n| 25 | -16777216 | 16777215 |\r\n| 26 | -33554432 | 33554431 |\r\n| 27 | -67108864 | 67108863 |\r\n| 28 | -134217728 | 134217727 |\r\n| 29 | -268435456 | 268435455 |\r\n| 30 | -536870912 | 536870911 |\r\n| 31 | -1073741824 | 1073741823 |\r\n| 32 | -2147483648 | 2147483647 |'

[WriteMatrix]
description = 'Writes a <page>VMatrix</page> to the current net message.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'matrix'
type = 'VMatrix'
description = 'The matrix to be sent.'

[WriteNormal]
description = 'Writes a normalized/direction vector ( Vector with length of 1 ) to the net message.\r\n\r\nThis function uses less bandwidth compared to <page>net.WriteVector</page> and will not send vectors with length of > 1 properly.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'normal'
type = 'Vector'
description = 'The normalized/direction vector to be send.'

[WriteString]
description = 'Appends a string to the current net message. The size of the string is 8 bits plus 8 bits for every ASCII character in the string. The maximum allowed length of a single written string is 65533 characters.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'string'
type = 'string'
description = 'The string to be sent.'

[WriteTable]
description = 'Appends a table to the current net message. Adds 16 extra bits per key/value pair so you\'re better off writing each individual key/value as the exact type if possible.\r\n\r\n<warning>All net messages have a 64kb buffer. This function will not check or error when that buffer is overflown. You might want to consider using <page>util.TableToJSON</page> and <page>util.Compress</page> and send the resulting string in 60kb chunks, doing the opposite on the receiving end.</warning>\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'table'
type = 'table'
description = 'The table to be sent.\r\n\r\n<warning>If the table contains a nil key the table may not be read correctly.\r\n\r\nNot all objects can be sent over the network. Things like functions, <page>IMaterial</page>s, etc will cause errors when reading the table from a net message.</warning>'

[WriteType]
description = '<internal>Used internally by <page>net.WriteTable</page>.</internal>\r\n\r\nAppends any type of value to the current net message.\r\n\r\n<note>An additional 8-bit unsigned integer indicating the type will automatically be written to the packet before the value, in order to facilitate reading with <page>net.ReadType</page>. If you know the data type you are writing, use a function meant for that specific data type to reduce amount of data sent.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'Data'
type = 'any'
description = 'The data to be sent'

[WriteUInt]
description = 'Appends an unsigned integer with the specified number of bits to the current net message.\r\nUse <page>net.WriteInt</page> if you want to send negative and positive numbers. Use <page>net.WriteFloat</page> for a non-whole number (e.g. 2.25).\r\n<note>Unsigned numbers do not support negative numbers.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'unsignedInteger'
type = 'number'
description = 'The unsigned integer to be sent.'
``````````
name = 'numberOfBits'
type = 'number'
description = 'The size of the integer to be sent, in bits. Acceptable values range from any number 1 to 32 inclusive. For reference, 1 = bit, 4 = nibble, 8 = byte, 16 = short, 32 = long.\r\n\r\nConsult the table below to determine the bit count you need. The minimum value for all bit counts is 0.\r\n\r\n| Bit Count |  Maximum value |\r\n|-----------|:--------------:|\r\n| 1 | 1  |\r\n| 2 | 3  |\r\n| 3 | 7  |\r\n| 4 | 15 |\r\n| 5 | 31 |\r\n| 6 | 63 |\r\n| 7 | 127 |\r\n| 8 | 255 |\r\n| 9 | 511 |\r\n| 10 | 1023 |\r\n| 11 | 2047 |\r\n| 12 | 4095 |\r\n| 13 | 8191 |\r\n| 14 | 16383 |\r\n| 15 | 32767 |\r\n| 16 | 65535 |\r\n| 17 | 131071 |\r\n| 18 | 262143 |\r\n| 19 | 524287  |\r\n| 20 | 1048575  |\r\n| 21 | 2097151  |\r\n| 22 | 4194303  |\r\n| 23 | 8388607  |\r\n| 24 | 16777215  |\r\n| 25 | 33554431  |\r\n| 26 | 67108863  |\r\n| 27 | 134217727  |\r\n| 28 | 268435455  |\r\n| 29 | 536870911  |\r\n| 30 | 1073741823 |\r\n| 31 | 2147483647 |\r\n| 32 | 4294967295 |'

[WriteVector]
description = 'Appends a vector to the current net message.\r\nVectors sent by this function are compressed, which may result in precision loss.  XYZ components greater than 16384 or less than -16384 are irrecoverably altered (most significant bits are trimmed) and precision after the decimal point is low.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'vector'
type = 'Vector'
description = 'The vector to be sent.'

