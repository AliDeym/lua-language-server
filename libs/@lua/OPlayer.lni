<default>
type = 'function'

parent = {
	1 = {
		type = 'object',
		name = 'Player'
	}
}

[AccountID]
description = 'Returns the player\'s AccountID aka SteamID3.\r\n\r\nFor bots this will return values starting with 0 for the first bot, 1 for the second bot and so on.\r\nIn singleplayer, this will return no value.\r\n\r\n**Returns:** Player\'s SteamID3 aka AccountID.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[AddCleanup]
description = 'Adds an entity to the players clean up list.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'type'
type = 'string'
description = 'Cleanup type'
``````````
name = 'ent'
type = 'Entity'
description = 'Entity to add'

[AddCount]
description = 'Adds an entity to the total count of entities of same class.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'str'
type = 'string'
description = 'Entity type'
``````````
name = 'ent'
type = 'Entity'
description = 'Entity'

[AddDeaths]
description = 'Add a certain amount to the player\'s death count\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'count'
type = 'number'
description = 'number of deaths to add'

[AddFrags]
description = 'Add a certain amount to the player\'s frag count (or kills count)\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'count'
type = 'number'
description = 'number of frags to add'

[AddFrozenPhysicsObject]
description = 'Adds a entity to the players list of frozen objects.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'ent'
type = 'Entity'
description = 'Entity'
``````````
name = 'physobj'
type = 'PhysObj'
description = 'Physics object belonging to ent'

[AddPlayerOption]
description = 'Sets up the voting system for the player.\r\nThis is a really barebone system. By calling this a vote gets started, when the player presses 0-9 the callback function gets called along with the key the player pressed. Use the draw callback to draw the vote panel.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Player'
``````````
name = 'name'
type = 'string'
description = 'Name of the vote'
``````````
name = 'timeout'
type = 'number'
description = 'Time until the vote expires'
``````````
name = 'vote_callback'
type = 'function'
description = 'The function to be run when the player presses 0-9 while a vote is active.'
``````````
name = 'draw_callback'
type = 'function'
description = 'Used to draw the vote panel.'

[AddVCDSequenceToGestureSlot]
description = 'Plays a sequence directly from a sequence number, similar to <page>Player:AnimRestartGesture</page>. This function has the advantage to play sequences that haven\'t been bound to an existing <page>Enums/ACT</page>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'slot'
type = 'number'
description = 'Gesture slot using <page>Enums/GESTURE_SLOT</page>'
``````````
name = 'sequenceId'
type = 'number'
description = 'The sequence ID to play, can be retrieved with <page>Entity:LookupSequence</page>.'
``````````
name = 'cycle'
type = 'number'
description = 'The cycle to start the animation at, ranges from 0 to 1.'
``````````
name = 'autokill'
type = 'boolean'
description = 'If the animation should not loop. true = stops the animation, false = the animation keeps playing.'

[Alive]
description = 'Checks if the player is alive.\r\n\r\n**Returns:** Whether the player is alive\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[AllowFlashlight]
description = 'Sets if the player can toggle his flashlight. Function exists on both the server and client but has no effect when ran on the client.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'canFlashlight'
type = 'boolean'
description = 'True allows flashlight toggling'

[AllowImmediateDecalPainting]
description = 'Lets the player spray his decal without delay\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'allow'
type = 'boolean'
description = 'Allow or disallow'

[AnimResetGestureSlot]
description = 'Resets player gesture in selected slot.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'slot'
type = 'number'
description = 'Slot to reset. See the <page>Enums/GESTURE_SLOT</page>.'

[AnimRestartGesture]
description = 'Restart a gesture on a player, within a gesture slot.\r\n\r\n<warning>This is not automatically networked. This function has to be called on the client to be seen by said client.</warning>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'slot'
type = 'number'
description = 'Gesture slot using <page>Enums/GESTURE_SLOT</page>'
``````````
name = 'activity'
type = 'number'
description = 'The activity ( see <page>Enums/ACT</page> ) or sequence that should be played'
``````````
name = 'autokill'
type = 'boolean'
description = 'Whether the animation should be automatically stopped. true = stops the animation, false = the animation keeps playing/looping'

[AnimRestartMainSequence]
description = 'Restarts the main animation on the player, has the same effect as calling <page>Entity:SetCycle</page>( 0 ).\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'

[AnimSetGestureSequence]
description = 'Sets the sequence of the animation playing in the given gesture slot.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'slot'
type = 'number'
description = 'The gesture slot. See <page>Enums/GESTURE_SLOT</page>'
``````````
name = 'sequenceID'
type = 'number'
description = 'Sequence ID to set.'

[AnimSetGestureWeight]
description = 'Sets the weight of the animation playing in the given gesture slot.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'slot'
type = 'number'
description = 'The gesture slot. See <page>Enums/GESTURE_SLOT</page>'
``````````
name = 'weight'
type = 'number'
description = 'The weight this slot should be set to. Value must be ranging from 0 to 1.'

[Armor]
description = 'Returns the player\'s armor.\r\n\r\n**Returns:** The player\'s armor.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[Ban]
description = 'Bans the player from the server for a certain amount of minutes.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'minutes'
type = 'number'
description = 'Duration of the ban in minutes (0 is permanent)'
``````````
name = 'kick'
type = 'boolean'
description = 'Whether to kick the player after banning them or not'

[CanUseFlashlight]
description = 'Returns true if the player\'s flashlight hasn\'t been disabled by <page>Player:AllowFlashlight</page>.\r\n\r\n<note>This is not synchronized between clients and server automatically!</note>\r\n\r\n**Returns:** Whether the player can use flashlight.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[ChatPrint]
description = 'Prints a string to the chatbox of the client.\r\n\r\n<warning>Just like the <page>usermessage</page>, this function is affected by the 255 byte limit!</warning>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'message'
type = 'string'
description = 'String to be printed'

[CheckLimit]
description = 'Checks if the limit is hit or not. If it is, it will throw a notification saying so.\r\n\r\n**Returns:** Returns true if limit is not hit, false if it is hit\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'limitType'
type = 'string'
description = 'Limit type. In unmodified Sandbox possible values are:\r\n* "props"\r\n* "ragdolls"\r\n* "vehicles"\r\n* "effects"\r\n* "balloons"\r\n* "cameras"\r\n* "npcs"\r\n* "sents"\r\n* "dynamite"\r\n* "lamps"\r\n* "lights"\r\n* "wheels"\r\n* "thrusters"\r\n* "hoverballs"\r\n* "buttons"\r\n* "emitters"'
[[.returns]]
type = 'boolean'

[ConCommand]
description = 'Runs the concommand on the player. This does not work on bots.\r\n\r\nIf you wish to directly modify the movement input of bots, use <page>GM:StartCommand</page> instead.\r\n\r\n<note>Some commands/convars are blocked from being ran/changed using this function, usually to prevent harm/annoyance to clients. For a list of blocked commands, see <page>Blocked ConCommands</page>.</note>\r\n<bug>On clientside running a ConCommand on an other player will not throw any warnings or errors but will run the ConCommand on LocalPlayer() instead.</bug>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'command'
type = 'string'
description = 'command to run'

[CreateRagdoll]
description = 'Creates the player\'s death ragdoll entity and deletes the old one.\r\n\r\nThis is normally used when a player dies, to create their death ragdoll.\r\n\r\nThe ragdoll will be created with the player\'s properties such as <page text="Position">Entity:GetPos</page>, <page text="Angles">Entity:GetAngles</page>, <page text="PlayerColor">Player:GetPlayerColor</page>, <page text="Velocity">Entity:GetVelocity</page> and <page text="Model">Entity:GetModel</page>.\r\n\r\nYou can retrieve the entity this creates with <page>Player:GetRagdollEntity</page>.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'

[CrosshairDisable]
description = 'Disables the default player\'s crosshair. Can be reenabled with <page>Player:CrosshairEnable</page>. This will affect <page>WEAPON:DoDrawCrosshair</page>.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'

[CrosshairEnable]
description = 'Enables the player\'s crosshair, if it was previously disabled via <page>Player:CrosshairDisable</page>.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'

[Crouching]
description = 'Returns whether the player is crouching or not. (FL_DUCKING flag)\r\n\r\n**Returns:** Whether the player is crouching\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[Deaths]
description = 'Returns the player\'s death count\r\n\r\n**Returns:** The number of deaths the player has had.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[DebugInfo]
description = 'Prints the players\' name and position to the console.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'

[DetonateTripmines]
description = 'Detonates all tripmines belonging to the player.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'

[DoAnimationEvent]
description = 'Sends a third person animation event to the player.\r\n\r\nCalls <page>GM:DoAnimationEvent</page> with <page text="PLAYERANIMEVENT_CUSTOM_GESTURE">Enums/PLAYERANIMEVENT</page> as the event, data as the given data.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'data'
type = 'number'
description = 'The data to send.'

[DoAttackEvent]
description = 'Starts the player\'s attack animation. The attack animation is determined by the weapon\'s HoldType.\r\n\r\nSimilar to other animation event functions, calls <page>GM:DoAnimationEvent</page> with <page text="PLAYERANIMEVENT_ATTACK_PRIMARY">Enums/PLAYERANIMEVENT</page> as the event and no extra data.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'

[DoCustomAnimEvent]
description = 'Sends a specified third person animation event to the player.\r\n\r\nCalls <page>GM:DoAnimationEvent</page> with specified arguments.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'event'
type = 'number'
description = 'The event to send. See <page>Enums/PLAYERANIMEVENT</page>.'
``````````
name = 'data'
type = 'number'
description = 'The data to send alongside the event.'

[DoReloadEvent]
description = 'Sends a third person reload animation event to the player.\r\n\r\nSimilar to other animation event functions, calls <page>GM:DoAnimationEvent</page> with <page text="PLAYERANIMEVENT_RELOAD">Enums/PLAYERANIMEVENT</page> as the event and no extra data.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'

[DoSecondaryAttack]
description = 'Sends a third person secondary fire animation event to the player.\r\n\r\nSimilar to other animation event functions, calls <page>GM:DoAnimationEvent</page> with <page text="PLAYERANIMEVENT_ATTACK_SECONDARY">Enums/PLAYERANIMEVENT</page> as the event and no extra data.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'

[DrawViewModel]
description = 'Show/Hide the player\'s weapon\'s viewmodel.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'draw'
type = 'boolean'
description = 'Should draw'
``````````
name = 'vm'
type = 'number'
description = 'Which view model to show/hide, 0-2.'

[DrawWorldModel]
description = 'Show/Hide the player\'s weapon\'s worldmodel.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'draw'
type = 'boolean'
description = 'Should draw'

[DropNamedWeapon]
description = 'Drops the players\' weapon of a specific class.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'class'
type = 'string'
description = 'The class to drop.'
``````````
name = 'target'
type = 'Vector'
description = 'If set, launches the weapon at given position. There is a limit to how far it is willing to throw the weapon. Overrides velocity argument.'
``````````
name = 'velocity'
type = 'Vector'
description = 'If set and previous argument is unset, launches the weapon with given velocity. If the velocity is higher than 400, it will be clamped to 400.'

[DropObject]
description = 'Drops any object the player is currently holding with either gravitygun or +Use (E key)\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'

[DropWeapon]
description = 'Forces the player to drop the specified weapon\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'weapon'
type = 'Weapon'
description = 'Weapon to be dropped. If unset, will default to the currently equipped weapon.'
``````````
name = 'target'
type = 'Vector'
description = 'If set, launches the weapon at given position. There is a limit to how far it is willing to throw the weapon. Overrides velocity argument.'
``````````
name = 'velocity'
type = 'Vector'
description = 'If set and previous argument is unset, launches the weapon with given velocity. If the velocity is higher than 400, it will be clamped to 400.'

[EnterVehicle]
description = 'Enters the player into specified vehicle\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'vehicle'
type = 'Vehicle'
description = 'Vehicle the player will enter'

[EquipSuit]
description = 'Equips the player with the HEV suit.\r\n\r\nAllows the player to zoom, walk slowly, sprint, pickup armor batteries, use the health and armor stations and also shows the HUD.<br>\r\nThe player also emits a flatline sound on death, which can be overridden with <page>GM:PlayerDeathSound</page>.\r\n\r\nThe player is automatically equipped with the suit on spawn, if you wish to stop that, use <page>Player:RemoveSuit</page>.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'

[ExitVehicle]
description = 'Makes the player exit the vehicle if they\'re in one.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'

[Flashlight]
description = 'Enables/Disables the player\'s flashlight.<page>Player:CanUseFlashlight</page> must be true in order for the player\'s flashlight to be changed.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'isOn'
type = 'boolean'
description = 'Turns the flashlight on/off'

[FlashlightIsOn]
description = 'Returns true if the player\'s flashlight is on.\r\n\r\n**Returns:** Whether the player\'s flashlight is on.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[Frags]
description = 'Returns the amount of kills a player has.\r\n\r\n**Returns:** kills\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[Freeze]
description = 'Freeze the player. Frozen players cannot move, look around, or attack. Key bindings are still called. Similar to <page>Player:Lock</page> but the player can still take damage.\r\n\r\nAdds or removes the <page text="FL_FROZEN">Enums/FL</page> flag from the player.\r\n\r\n<bug>Frozen bots will still be able to look around.</bug>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'frozen'
type = 'boolean'
description = 'Whether the player should be frozen.'

[GetActiveWeapon]
description = 'Returns the player\'s active weapon.\r\n\r\nIf used on a <page>Global.LocalPlayer</page>() and the player is spectating another player with `OBS_MODE_IN_EYE`, the weapon returned will be of the spectated player.\r\n\r\n**Returns:** The weapon the player is currently has equipped.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'Weapon'

[GetAimVector]
description = 'Returns the direction that the player is aiming.\r\n\r\n**Returns:** The direction vector of players aim\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'Vector'

[GetAllowFullRotation]
description = 'Returns true if the players\' model is allowed to rotate around the pitch and roll axis.\r\n\r\n**Returns:** Allowed\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[GetAllowWeaponsInVehicle]
description = 'Returns whether the player is allowed to use his weapons in a vehicle or not.\r\n\r\n**Returns:** Whether the player is allowed to use his weapons in a vehicle or not.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[GetAmmo]
description = 'Returns a table of all ammo the player has.\r\n\r\n**Returns:** A table with the following format\r\n* <page>number</page> Key - AmmoID to be used with functions like <page>game.GetAmmoName</page>.\r\n* <page>number</page> Value - Amount of ammo the player has of this kind.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'table'

[GetAmmoCount]
description = 'Gets the amount of ammo the player has.\r\n\r\n**Returns:** The amount of ammo player has in reserve.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'ammotype'
type = 'any'
description = 'The ammunition type. Can be either <page>number</page> ammo ID or <page>string</page> ammo name.'
[[.returns]]
type = 'number'

[GetAvoidPlayers]
description = 'Gets if the player will be pushed out of nocollided players.\r\n\r\n**Returns:** pushed\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[GetCanWalk]
description = 'Returns true if the player is able to walk using the (default) alt key.\r\n\r\n**Returns:** AbleToWalk\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[GetCanZoom]
description = 'Determines whenever the player is allowed to use the zoom functionality.\r\n\r\n**Returns:** canZoom\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[GetClassID]
description = 'Returns the player\'s class id.\r\n\r\n**Returns:** The player\'s class id.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[GetCount]
description = 'Gets total count of entities of same class.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'type'
type = 'string'
description = 'Entity type to get count of.'
``````````
name = 'minus'
type = 'number'
description = 'If specified, it will reduce the counter by this value. Works only serverside.'

[GetCrouchedWalkSpeed]
description = 'Returns the crouched walk speed multiplier.\r\n\r\nSee also <page>Player:GetWalkSpeed</page> and <page>Player:SetCrouchedWalkSpeed</page>.\r\n\r\n**Returns:** The crouched walk speed multiplier.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[GetCurrentCommand]
description = 'Returns the last command which was sent by the specified player. This can only be called on the player which <page>Global.GetPredictionPlayer</page>() returns.\r\n\r\n<note>When called clientside in singleplayer during <page>WEAPON:Think</page>, it will return nothing as the hook is not technically predicted in that instance. See the note on the page.</note>\r\n\r\n<bug issue="3302">This will fail in <page>GM:StartCommand</page>.</bug>\r\n\r\n**Returns:** Last user commands\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'CUserCmd'

[GetCurrentViewOffset]
description = 'Gets the **actual** view offset which equals the difference between the players actual position and their view when standing.\r\n\r\nDo not confuse with <page>Player:GetViewOffset</page> and <page>Player:GetViewOffsetDucked</page>\r\n\r\n**Returns:** The actual view offset.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'Vector'

[GetDrivingEntity]
description = 'Gets the entity the player is currently driving.\r\n\r\n**Returns:** DriveEntity\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'Entity'

[GetDrivingMode]
description = 'Returns driving mode of the player. See <page>Entity Driving</page>.\r\n\r\n**Returns:** The drive mode ID or 0 if player doesn\'t use the drive system.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[GetDuckSpeed]
description = 'Returns a player\'s duck speed (in seconds)\r\n\r\n**Returns:** duckspeed\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[GetEntityInUse]
description = 'Returns the entity the player is currently using, like func_tank mounted turrets or +use prop pickups.\r\n\r\n**Returns:** Entity in use, or NULL entity otherwise. For +use prop pickups, this will be NULL clientside.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'Entity'

[GetEyeTrace]
description = 'Returns a table with information of what the player is looking at.\r\n\r\nThe results of this function are cached every frame.\r\n\r\nUses <page>util.GetPlayerTrace</page> internally and is therefore bound by its limits.\r\n\r\nSee also <page>Player:GetEyeTraceNoCursor</page>\r\n\r\n**Returns:** Trace information, see <page>Structures/TraceResult</page>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'table'

[GetEyeTraceNoCursor]
description = 'Returns the trace according to the players view direction, ignoring their mouse ( Holding C and moving the mouse in Sandbox ).\r\n\r\nThe results of this function are cached every frame.\r\n\r\nSee also <page>Player:GetEyeTrace</page>\r\n\r\n**Returns:** Trace result. See <page>Structures/TraceResult</page>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'table'

[GetFOV]
description = 'Returns the FOV of the player.\r\n\r\n**Returns:** Field of view as a float\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[GetFriendStatus]
description = 'Returns the steam "relationship" towards the player.\r\n\r\n**Returns:** Should return one of four different things depending on their status on your friends list: "friend", "blocked", "none" or "requested".\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Player'
[[.returns]]
type = 'string'

[GetHands]
description = 'Gets the hands entity of a player\r\n\r\n**Returns:** The hands entity if players has one\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'Entity'

[GetHoveredWidget]
description = 'Returns the widget the player is hovering with his mouse.\r\n\r\n**Returns:** The hovered widget.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'Entity'

[GetHull]
description = 'Gets the bottom base and the top base size of the player\'s hull.\r\n\r\n**Returns:** Player\'s hull bottom base size.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'Vector'

[GetHullDuck]
description = 'Gets the bottom base and the top base size of the player\'s crouch hull.\r\n\r\n**Returns:** Player\'s crouch hull bottom base size.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'Vector'

[GetInfo]
description = 'Retrieves the value of a client-side <page>ConVar</page>. The <page>ConVar</page> must have a <page text="FCVAR_USERINFO">Enums/FCVAR</page> flag for this to work.\r\n\r\n<warning>The returned value is truncated to 31 bytes.</warning>\r\n\r\n**Returns:** The value of the <page>ConVar</page>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'cVarName'
type = 'string'
description = 'The name of the client-side <page>ConVar</page>'
[[.returns]]
type = 'string'

[GetInfoNum]
description = 'Retrieves the numeric value of a client-side convar, returns nil if value is not convertible to a number. The <page>ConVar</page> must have a <page text="FCVAR_USERINFO">Enums/FCVAR</page> flag for this to work.\r\n\r\n**Returns:** The value of the <page>ConVar</page> or the default value\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'cVarName'
type = 'string'
description = 'The name of the <page>ConVar</page> to query the value of'
``````````
name = 'default'
type = 'number'
description = 'Default value if we failed to retrieve the number.'
[[.returns]]
type = 'number'

[GetJumpPower]
description = 'Returns the jump power of the player\r\n\r\n**Returns:** Jump power\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[GetLadderClimbSpeed]
description = 'Returns the player\'s ladder climbing speed.\r\n\r\nSee <page>Player:GetWalkSpeed</page> for normal walking speed, <page>Player:GetRunSpeed</page> for sprinting speed and <page>Player:GetSlowWalkSpeed</page> for slow walking speed.\r\n\r\n**Returns:** The ladder climbing speed.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[GetLaggedMovementValue]
description = 'Returns the timescale multiplier of the player movement.\r\n\r\n**Returns:** The timescale multiplier, defaults to 1.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[GetMaxSpeed]
description = 'Returns the player\'s maximum movement speed.\r\n\r\nSee also <page>Player:SetMaxSpeed</page>, <page>Player:GetWalkSpeed</page> and <page>Player:GetRunSpeed</page>.\r\n\r\n**Returns:** The maximum movement speed the player can go at.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[GetName]
description = 'Returns the player\'s name, this is an alias of <page>Player:Nick</page>.\r\n\r\n<note>This function overrides <page>Entity:GetName</page> (in the Lua metatable, not in c++), keep it in mind when dealing with <page>ents.FindByName</page> or any engine function which requires the mapping name.</note>\r\n\r\n**Returns:** The player\'s name.\r\n\r\n<bug issue="3178">This is limited to 31 characters even though Steam names can have 32.</bug>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'string'

[GetNoCollideWithTeammates]
description = 'Returns whenever the player is set not to collide with their teammates.\r\n\r\n**Returns:** noCollideWithTeammates\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[GetObserverMode]
description = 'Returns the the observer mode of the player\r\n\r\n**Returns:** Observe mode of that player, see <page>Enums/OBS_MODE</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[GetObserverTarget]
description = 'Returns the entity the player is currently observing.\r\n\r\nSet using <page>Player:SpectateEntity</page>.\r\n\r\n**Returns:** The entity the player is currently spectating, or <page text="NULL">Global_Variables</page> if the player has no target.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'Entity'

[GetPData]
description = 'Returns a **P**layer **Data** key-value pair from the SQL database. (sv.db when called on server,  cl.db when called on client)\r\n\r\nInternally uses the <page>sql</page>.\r\n\r\n<warning>This function internally uses <page>Player:UniqueID</page>, which can cause collisions (two or more players sharing the same PData entry). It\'s recommended that you don\'t use it. See the related wiki page for more information.</warning>\r\n\r\n<note>PData is not networked from servers to clients!</note>\r\n\r\n**Returns:** The data in the SQL database or the default value given.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'key'
type = 'string'
description = 'Name of the PData key'
``````````
name = 'default'
type = 'any'
description = 'Default value if PData key doesn\'t exist.'
[[.returns]]
type = 'string'

[GetPlayerColor]
description = 'Returns a player model\'s color. The part of the model that is colored is determined by the model itself, and is different for each model. The format is Vector(r,g,b), and each color should be between 0 and 1.\r\n\r\n**Returns:** color\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'Vector'

[GetPlayerInfo]
description = 'Returns a table containing player information.\r\n\r\n**Returns:** A table containing player information.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Player'
[[.returns]]
type = 'table'

[GetPreferredCarryAngles]
description = 'Returns the preferred carry angles of an object, if any are set.\r\n\r\nCalls <page>GM:GetPreferredCarryAngles</page> with the target entity and returns the carry angles.\r\n\r\n**Returns:** Carry angles or nil if the entity has no preferred carry angles.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'carryEnt'
type = 'Entity'
description = 'Entity to retrieve the carry angles of.'
[[.returns]]
type = 'Angle'

[GetPressedWidget]
description = 'Returns the widget entity the player is using.\r\n\r\nHaving a pressed widget stops the player from firing his weapon to allow input to be passed onto the widget.\r\n\r\n**Returns:** The pressed widget.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'Entity'

[GetPreviousWeapon]
description = 'Returns the weapon the player previously had equipped.\r\n\r\n**Returns:** The previous weapon of the player.\r\n\r\n<warning>This is not guaranteed to be a weapon entity so it should be checked with <page>Entity:IsWeapon</page> for safety.</warning>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'Entity'

[GetPunchAngle]
description = '<deprecated>You should use <page>Player:GetViewPunchAngles</page> instead.</deprecated>\r\nReturns players screen punch effect angle.\r\n\r\n**Returns:** The punch angle\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'Angle'

[GetRagdollEntity]
description = 'Returns players death ragdoll. The ragdoll is created by <page>Player:CreateRagdoll</page>.\r\n\r\n**Returns:** The ragdoll.\r\n\r\nUnlike normal clientside ragdolls (`C_ClientRagdoll`), this will be a `C_HL2MPRagdoll` on the client, and `hl2mp_ragdoll` on the server.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'Entity'

[GetRenderAngles]
description = 'Returns the render angles for the player.\r\n\r\n**Returns:** The render angles of the player. Only **yaw** part of the angle seems to be present.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'Angle'

[GetRunSpeed]
description = 'Returns the player\'s sprint speed.\r\n\r\nSee also <page>Player:SetRunSpeed</page>, <page>Player:GetWalkSpeed</page> and <page>Player:GetMaxSpeed</page>.\r\n\r\n**Returns:** The sprint speed\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[GetShootPos]
description = 'Returns the position of a Player\'s view\r\n\r\n<note>This is the same as calling <page>Entity:EyePos</page> on the player.</note>\r\n\r\n**Returns:** aim pos\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'Vector'

[GetSlowWalkSpeed]
description = 'Returns the player\'s slow walking speed, which is activated via <key>+WALK</key> keybind.\r\n\r\nSee <page>Player:GetWalkSpeed</page> for normal walking speed, <page>Player:GetRunSpeed</page> for sprinting speed and <page>Player:GetLadderClimbSpeed</page> for ladder climb speed.\r\n\r\n**Returns:** The new slow walking speed.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[GetStepSize]
description = 'Returns the maximum height player can step onto.\r\n\r\n**Returns:** The maximum height player can get up onto without jumping, in hammer units.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[GetSuitPower]
description = 'Returns the player\'s HEV suit power.\r\n\r\n<bug issue="3449">This will only work for the local player when used clientside.</bug>\r\n\r\n**Returns:** The current suit power.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[GetTimeoutSeconds]
description = 'Returns the number of seconds that the player has been timing out for. You can check if a player is timing out with <page>Player:IsTimingOut</page>.\r\n\r\n**Returns:** Timeout seconds.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[GetTool]
description = 'Returns TOOL table of players current tool, or of the one specified.\r\n\r\n**Returns:** TOOL table, or nil if the table wasn\'t found or the player doesn\'t have a tool gun.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'mode'
type = 'string'
description = 'Classname of the tool to retrieve. ( Filename of the tool in gmod_tool/stools/ )'
[[.returns]]
type = 'table'

[GetUnDuckSpeed]
description = 'Returns a player\'s unduck speed (in seconds)\r\n\r\n**Returns:** unduck speed\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[GetUseEntity]
description = 'Returns the entity the player would use if they would press their `+use` keybind.\r\n\r\n**Returns:** The entity that would be used or NULL.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'Entity'

[GetUserGroup]
description = 'Returns the player\'s user group.\r\n\r\n**Returns:** The user group of the player. This will return "user" if player has no user group.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'string'

[GetVehicle]
description = 'Gets the vehicle the player is driving, returns NULL ENTITY if the player is not driving.\r\n\r\n**Returns:** vehicle\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'Vehicle'

[GetViewEntity]
description = 'Returns the entity the player is using to see from (such as the player itself, the camera, or another entity).\r\n\r\n**Returns:** The entity the player is using to see from\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'Entity'

[GetViewModel]
description = 'Returns the player\'s view model entity by the index.\r\nEach player has 3 view models by default, but only the first one is used.\r\n\r\nTo use the other viewmodels in your SWEP, see <page>Entity:SetWeaponModel</page>.\r\n\r\n<note>In the Client <page text="realm">States</page>, other players\' viewmodels are not available unless they are being spectated.</note>\r\n\r\n**Returns:** The view model entity\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'index'
type = 'number'
description = 'optional index of the view model to return, can range from 0 to 2'
[[.returns]]
type = 'Entity'

[GetViewOffset]
description = 'Returns the view offset of the player which equals the difference between the players actual position and their view.\r\n\r\nSee also <page>Player:GetViewOffsetDucked</page>.\r\n\r\n**Returns:** New view offset, must be local vector to players <page>Entity:GetPos</page>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'Vector'

[GetViewOffsetDucked]
description = 'Returns the view offset of the player which equals the difference between the players actual position and their view when ducked.\r\n\r\nSee also <page>Player:GetViewOffset</page>.\r\n\r\n**Returns:** New crouching view offset, must be local vector to players <page>Entity:GetPos</page>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'Vector'

[GetViewPunchAngles]
description = 'Returns players screen punch effect angle.\r\n\r\n**Returns:** The punch angle\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'Angle'

[GetWalkSpeed]
description = 'Returns the player\'s normal walking speed. Not sprinting, not slow walking. (+walk)\r\n\r\nSee also <page>Player:SetWalkSpeed</page>, <page>Player:GetMaxSpeed</page> and <page>Player:GetRunSpeed</page>.\r\n\r\n**Returns:** The normal walking speed.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[GetWeapon]
description = 'Returns the weapon for the specified class\r\n\r\n**Returns:** The weapon for the specified class.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'className'
type = 'string'
description = 'Class name of weapon'
[[.returns]]
type = 'Weapon'

[GetWeaponColor]
description = 'Returns a player\'s weapon color. The part of the model that is colored is determined by the model itself, and is different for each model. The format is Vector(r,g,b), and each color should be between 0 and 1.\r\n\r\n**Returns:** color\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'Vector'

[GetWeapons]
description = 'Returns a table of the player\'s weapons.\r\n\r\n**Returns:** All the weapons the player currently has.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'table'

[Give]
description = 'Gives the player a weapon.\r\n\r\n<note>While this function is meant for weapons/pickupables only, it is **not** restricted to weapons. Any entity can be spawned using this function, including NPCs and SENTs.</note>\r\n\r\n**Returns:** The weapon given to the player, if one was given. It will return NULL if the player already has the weapon, or the weapon entity (entity with given classname) doesn\'t exist.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'weaponClassName'
type = 'string'
description = 'Class name of weapon to give the player'
``````````
name = 'bNoAmmo'
type = 'boolean'
description = 'Set to true to not give any ammo on weapon spawn. (Reserve ammo set by DefaultClip)'
[[.returns]]
type = 'Weapon'

[GiveAmmo]
description = 'Gives ammo to a player\r\n\r\n**Returns:** Ammo given.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'amount'
type = 'number'
description = 'Amount of ammo'
``````````
name = 'type'
type = 'string'
description = 'Type of ammo.\r\n\r\nThis can also be a number for ammo ID, useful for custom ammo types.\r\n\r\nYou can find a list of default ammo types <page text="here">Default_Ammo_Types</page>.'
``````````
name = 'hidePopup'
type = 'boolean'
description = 'Hide display popup when giving the ammo'
[[.returns]]
type = 'number'

[GodDisable]
description = 'Disables god mode on the player.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'

[GodEnable]
description = 'Enables god mode on the player.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'

[HasGodMode]
description = 'Returns whether the player has god mode or not, contolled by <page>Player:GodEnable</page> and <page>Player:GodDisable</page>.\r\n\r\n<bug issue="2038">This is not synced between the client and server. This will cause the client to always return false even in godmode.</bug>\r\n\r\n**Returns:** Whether the player has god mode or not.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[HasWeapon]
description = 'Returns if the player has the specified weapon\r\n\r\n**Returns:** True if the player has the weapon\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'className'
type = 'string'
description = 'Class name of the weapon'
[[.returns]]
type = 'boolean'

[InVehicle]
description = 'Returns if the player is in a vehicle\r\n\r\n**Returns:** Whether the player is in a vehicle.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[IPAddress]
description = 'Returns the player\'s IP address and connection port in ip:port form\r\n\r\n**Returns:** The player\'s IP address and connection port\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
[[.returns]]
type = 'string'

[IsAdmin]
description = 'Returns whether the player is an admin or not.\r\n\r\n**Returns:** True if the player is an admin.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[IsBot]
description = 'Returns if the player is an bot or not\r\n\r\n**Returns:** True if the player is a bot.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[IsConnected]
description = 'Returns true from the point when the player is sending client info but not fully in the game until they disconnect.\r\n\r\n**Returns:** isConnected\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[IsDrivingEntity]
description = 'Used to find out if a player is currently \'driving\' an entity (by which we mean \'right click > drive\' ).\r\n\r\n**Returns:** A value representing whether or not the player is \'driving\' an entity.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[IsFrozen]
description = 'Returns whether the players movement is currently frozen, controlled by <page>Player:Freeze</page>.\r\n\r\n**Returns:** Whether the players movement is currently frozen or not.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[IsFullyAuthenticated]
description = 'Returns whether the player identity was confirmed by the steam network.\r\n\r\n**Returns:** Whether the player has been fully authenticated or not.\r\n\r\nThis will always be true for singleplayer and the listen server host.\r\nThis will always be false for bots.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[IsListenServerHost]
description = 'Returns if a player is the host of the current session.\r\n\r\n**Returns:** True if the player is the listen server host, false otherwise.\r\n\r\nThis will always be true in single player, and false on a dedicated server.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[IsMuted]
description = 'Returns whether or not the player is muted locally.\r\n\r\n**Returns:** whether or not the player is muted locally.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[IsPlayingTaunt]
description = 'Returns true if the player is playing a taunt.\r\n\r\n**Returns:** Whether the player is playing a taunt.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[IsSpeaking]
description = 'Returns whenever the player is heard by the local player.\r\n\r\n**Returns:** isSpeaking\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[IsSprinting]
description = 'Returns whether the player is currently sprinting or not.\r\n\r\n**Returns:** Is the player sprinting or not\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[IsSuitEquipped]
description = 'Returns whenever the player is equipped with the suit item.\r\n\r\n<bug issue="3449">This will only work for the local player when used clientside.</bug>\r\n\r\n**Returns:** Is the suit equipped or not.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[IsSuperAdmin]
description = 'Returns whether the player is a superadmin.\r\n\r\n**Returns:** True if the player is a superadmin.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[IsTimingOut]
description = 'Returns true if the player is timing out (i.e. is losing connection), false otherwise.\r\n\r\n**Returns:** isTimingOut\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[IsTyping]
description = 'Returns whether the player is typing in their chat.\r\n\r\nThis may not work properly if the server uses a custom chatbox.\r\n\r\n**Returns:** Whether the player is typing in their chat or not.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[IsUserGroup]
description = 'Returns true/false if the player is in specified group or not.\r\n\r\n**Returns:** isInUserGroup\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'groupname'
type = 'string'
description = 'Group to check the player for.'
[[.returns]]
type = 'boolean'

[IsVoiceAudible]
description = 'Returns if the player can be heard by the local player.\r\n\r\n**Returns:** isAudible\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[IsWorldClicking]
description = 'Returns if the player is in the context menu.\r\n\r\n<note>Although this is shared, it will only work properly on the CLIENT for the local player. Using this serverside or on other players will return false.</note>\r\n\r\n**Returns:** Is the player world clicking or not.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[KeyDown]
description = 'Gets whether a key is down. This is not networked to other players, meaning only the local client can see the keys they are pressing.\r\n\r\n**Returns:** isDown ?\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'key'
type = 'number'
description = 'The key, see <page>Enums/IN</page>'
[[.returns]]
type = 'boolean'

[KeyDownLast]
description = 'Gets whether a key was down one tick ago.\r\n\r\n**Returns:** Is key down ?\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'key'
type = 'number'
description = 'The key, see <page>Enums/IN</page>'
[[.returns]]
type = 'boolean'

[KeyPressed]
description = 'Gets whether a key was just pressed this tick.\r\n\r\n**Returns:** Was pressed or not\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'key'
type = 'number'
description = 'Corresponds to an <page>Enums/IN</page>'
[[.returns]]
type = 'boolean'

[KeyReleased]
description = 'Gets whether a key was just released this tick.\r\n\r\n**Returns:** Was released or not\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'key'
type = 'number'
description = 'The key, see <page>Enums/IN</page>'
[[.returns]]
type = 'boolean'

[Kick]
description = 'Kicks the player from the server.\r\n<note>This can not be run before the player has fully joined in. Use <page>game.KickID</page> for that.</note>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'reason'
type = 'string'
description = 'Reason to show for disconnection.\r\n\r\n<warning>This will be shortened to ~512 chars, though this includes the command itself and the player index so will realistically be more around ~498. It is recommended to avoid going near the limit to avoid truncation.</warning>'

[Kill]
description = 'Kills a player and calls <page>GM:PlayerDeath</page>.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'

[KillSilent]
description = 'Kills a player without notifying the rest of the server.\r\n\r\nThis will call <page>GM:PlayerSilentDeath</page> instead of <page>GM:PlayerDeath</page>.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'

[LagCompensation]
description = 'This allows the server to mitigate the lag of the player by moving back all the entities that can be lag compensated to the time the player attacked with his weapon.\r\n\r\nThis technique is most commonly used on things that hit other entities instantaneously, such as traces.\r\n\r\n<note><page>Entity:FireBullets</page> calls this function internally.</note>\r\n\r\nLag compensation only works for players and entities that have been enabled with <page>Entity:SetLagCompensated</page>\r\n\r\nDespite being defined shared, it can only be used server-side in a <page text="Predicted Hook">~search:%3Cpredicted%3EYes</page>.\r\n\r\n<warning>This function NEEDS to be disabled after you\'re done with it or it will break the movement of the entities affected!</warning>\r\n\r\n<bug issue="3683">Lag compensation does not support pose parameters.</bug>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'lagCompensation'
type = 'boolean'
description = 'The state of the lag compensation, true to enable and false to disable.'

[LastHitGroup]
description = 'Returns the hitgroup where the player was last hit.\r\n\r\n**Returns:** Hitgroup, see <page>Enums/HITGROUP</page>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[LimitHit]
description = 'Shows "limit hit" notification in sandbox.\r\n<note>This function is only available in Sandbox and its derivatives.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'type'
type = 'string'
description = 'Type of hit limit.'

[Lock]
description = 'Stops a player from using any inputs, such as moving, turning, or attacking. Key binds are still called. Similar to <page>Player:Freeze</page> but the player takes no damage.\r\n\r\nAdds the <page text="FL_FROZEN">Enums/FL</page> and <page text="FL_GODMODE">Enums/FL</page> flags to the player.\r\n\r\n<bug>Frozen bots will still be able to look around.</bug>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'

[MotionSensorPos]
description = 'Returns the position of a Kinect bone.\r\n\r\n**Returns:** Position of the bone.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'bone'
type = 'number'
description = 'Bone to get the position of. Must be from 0 to 19.'
[[.returns]]
type = 'Vector'

[Name]
description = 'Returns the players name. Identical to <page>Player:Nick</page> and <page>Player:GetName</page>.\r\n\r\n**Returns:** Player\'s Steam name.\r\n\r\n<bug issue="3178">This is limited to 31 characters even though Steam names can have 32.</bug>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'string'

[Nick]
description = 'Returns the player\'s nickname.\r\n\r\n**Returns:** Player\'s Steam name\r\n\r\n<bug issue="3178">This is limited to 31 characters even though Steam names can have 32.</bug>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'string'

[OwnerSteamID64]
description = 'Returns the 64-bit SteamID aka CommunityID of the Steam Account that owns the Garry\'s Mod license this player is using. This is useful for detecting players using Steam Family Sharing.\r\n\r\nIf player is not using Steam Family Sharing, this will return the player\'s actual SteamID64().\r\n\r\n<note>This data will only be available after the player has fully authenticated with Steam. See <page>Player:IsFullyAuthenticated</page>.</note>\r\n\r\n**Returns:** The 64bit SteamID\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
[[.returns]]
type = 'string'

[PacketLoss]
description = 'Returns the packet loss of the client. It is not networked so it only returns 0 when run clientside.\r\n\r\n**Returns:** Packets lost\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[PhysgunUnfreeze]
description = 'Unfreezes the props player is looking at. This is essentially the same as pressing reload with the physics gun, including double press for unfreeze all.\r\n\r\n**Returns:** Number of props unfrozen.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[PickupObject]
description = 'This makes the player hold ( same as pressing <key>E</key> on a small prop ) the provided entity.\r\n\r\n<note>Don\'t get this confused with picking up items like ammo or health kits</note>\r\n\r\n<note>This picks up the passed entity regardless of its mass or distance from the player</note>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'entity'
type = 'Entity'
description = 'Entity to pick up.'

[PickupWeapon]
description = 'Forces the player to pickup an existing weapon entity. The player will not pick up the weapon if they already own a weapon of given type, or if the player could not normally have this weapon in their inventory.\r\n\r\nThis function **will** bypass <page>GM:PlayerCanPickupWeapon</page>.\r\n\r\n**Returns:** Whether the player succeeded in picking up the weapon or not.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'wep'
type = 'Weapon'
description = 'The weapon to try to pick up.'
``````````
name = 'ammoOnly'
type = 'boolean'
description = 'If set to true, the player will only attempt to pick up the ammo from the weapon. The weapon will not be picked up even if the player doesn\'t have a weapon of this type, and the weapon will be removed if the player picks up any ammo from it.'
[[.returns]]
type = 'boolean'

[Ping]
description = 'Returns the player\'s ping to server.\r\n\r\n**Returns:** The player\'s ping.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[PlayStepSound]
description = 'Plays the correct step sound according to what the player is staying on.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'volume'
type = 'number'
description = 'Volume for the sound, in range from 0 to 1'

[PrintMessage]
description = 'Displays a message either in their chat, console, or center of the screen. See also <page>Global.PrintMessage</page>.\r\n\r\n<note>When called serverside, this uses the archaic user message system (the <page>umsg</page>) and hence is limited to ≈250 characters.</note>\r\n\r\n<note>`HUD_PRINTCENTER` will not work when this is called clientside.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'type'
type = 'number'
description = 'Which type of message should be sent to the player (<page>Enums/HUD</page>)'
``````````
name = 'message'
type = 'string'
description = 'Message to be sent to the player'

[RemoveAllAmmo]
description = 'Removes all ammo from a certain player\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'

[RemoveAllItems]
description = 'Removes all weapons and ammo from the player.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'

[RemoveAmmo]
description = 'Removes the amount of the specified ammo from the player.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'ammoCount'
type = 'number'
description = 'The amount of ammunition to remove.'
``````````
name = 'ammoName'
type = 'string'
description = 'The name of the ammunition to remove from. This can also be a <page>number</page> ammoID.'

[RemovePData]
description = 'Removes a **P**layer **Data** key-value pair from the SQL database. (sv.db when called on server,  cl.db when called on client)\r\n\r\nInternally uses the <page>sql</page>.\r\n\r\n<warning>This function internally uses <page>Player:UniqueID</page>, which can cause collisions (two or more players sharing the same PData entry). It\'s recommended that you don\'t use it. See the related wiki page for more information.</warning>\r\n\r\n**Returns:** true is succeeded, false otherwise\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'key'
type = 'string'
description = 'Key to remove'
[[.returns]]
type = 'boolean'

[RemoveSuit]
description = 'Strips the player\'s suit item.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'

[ResetHull]
description = 'Resets both normal and duck hulls to their default values.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'

[Say]
description = 'Forces the player to say whatever the first argument is. Works on bots too.\r\n\r\n<note>This function ignores the default chat message cooldown</note>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'text'
type = 'string'
description = 'The text to force the player to say.'
``````````
name = 'teamOnly'
type = 'boolean'
description = 'Whether to send this message to our own team only.'

[ScreenFade]
description = 'Fades the screen\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'flags'
type = 'number'
description = 'Fade flags defined with <page>Enums/SCREENFADE</page>.'
``````````
name = 'clr'
type = 'number'
description = 'The color of the screenfade'
``````````
name = 'fadeTime'
type = 'number'
description = 'Fade(in/out) effect transition time ( From no fade to full fade and vice versa )'
``````````
name = 'fadeHold'
type = 'number'
description = 'Fade effect hold time'

[SelectWeapon]
description = 'Sets the active weapon of the player by its class name.\r\n\r\n<warning>This will switch the weapon out of prediction, causing delay on the client and <page>WEAPON:Deploy</page> and <page>WEAPON:Holster</page> to be called out of prediction. Try using <page>CUserCmd:SelectWeapon</page> or <page>input.SelectWeapon</page>, instead.</warning>\r\n\r\n<note>This will trigger the weapon switch event and associated animations. To switch weapons silently, use <page>Player:SetActiveWeapon</page>.</note>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'className'
type = 'string'
description = 'The class name of the weapon to switch to.\r\n\r\nIf the player doesn\'t have the specified weapon, nothing will happen. You can use <page>Player:Give</page> to give the weapon first.'

[SendHint]
description = 'Sends a hint to a player.\r\n\r\n<note>This function is only available in Sandbox and its derivatives. Since this adds `#Hint_` to the beginning of each message, you should only use it with default hint messages, or those cached with <page>language.Add</page>. For hints with custom text, look at <page>notification.AddLegacy</page>.</note>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'name'
type = 'string'
description = 'Name/class/index of the hint. The text of the hint will contain this value. ( "#Hint_" .. name ) An example is `PhysgunFreeze`.'
``````````
name = 'delay'
type = 'number'
description = 'Delay in seconds before showing the hint'

[SendLua]
description = 'Executes a simple Lua string on the player.\r\n<note>If you need to use this function more than once consider using <page>net</page> library. Send net message and make the entire code you want to execute in <page>net.Receive</page> on client.</note>\r\n\r\n<note>The string is limited to 254 bytes. Consider using the <page text="net library">Net_Library_Usage</page> for more advanced server-client interaction.</note>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'script'
type = 'string'
description = 'The script to execute.'

[SetActiveWeapon]
description = 'Sets the player\'s active weapon. You should use <page>CUserCmd:SelectWeapon</page> or <page>Player:SelectWeapon</page>, instead in most cases.\r\n\r\n<note>This function will not trigger the weapon switch event or associated equip animations. You can achieve this using <page>Player:SelectWeapon</page> with <page>Entity:GetClass</page>.</note>\r\n\r\n<note>This will not call <page>GM:PlayerSwitchWeapon</page>.</note>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'weapon'
type = 'Weapon'
description = 'The weapon to equip.'

[SetAllowFullRotation]
description = 'Set if the players\' model is allowed to rotate around the pitch and roll axis.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'Allowed'
type = 'boolean'
description = 'Allowed to rotate'

[SetAllowWeaponsInVehicle]
description = 'Allows player to use his weapons in a vehicle. You need to call this before entering a vehicle.\r\n\r\n<bug issue="1277">Shooting in a vehicle fires two bullets.</bug>\r\n\r\n<bug issue="3261">Weapon viewpunch does not decay while in a vehicle, leading to incorrect aim angles.</bug>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'allow'
type = 'boolean'
description = 'Show we allow player to use his weapons in a vehicle or not.'

[SetAmmo]
description = 'Sets the amount of the specified ammo for the player.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'ammoCount'
type = 'number'
description = 'The amount of ammunition to set.'
``````````
name = 'ammoType'
type = 'any'
description = 'The ammunition type. Can be either <page>number</page> ammo ID or <page>string</page> ammo name.'

[SetArmor]
description = 'Sets the player armor to the argument.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'Amount'
type = 'number'
description = 'The amount that the player armor is going to be set to.'

[SetAvoidPlayers]
description = 'Pushes the player away from another player whenever it\'s inside the other players bounding box.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'avoidPlayers'
type = 'boolean'
description = 'Avoid or not avoid.'

[SetCanWalk]
description = 'Set if the player should be allowed to walk using the (default) alt key.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'abletowalk'
type = 'boolean'
description = 'True allows the player to walk.'

[SetCanZoom]
description = 'Sets whether the player can use the HL2 suit zoom ("+zoom" bind) or not.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'canZoom'
type = 'boolean'
description = 'Whether to make the player able or unable to zoom.'

[SetClassID]
description = 'Sets the player\'s class id.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'classID'
type = 'number'
description = 'The class id the player is being set with.'

[SetCrouchedWalkSpeed]
description = 'Sets the crouched walk speed multiplier.\r\n\r\nDoesn\'t work for values above 1.\r\n\r\nSee also <page>Player:SetWalkSpeed</page> and <page>Player:GetCrouchedWalkSpeed</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'speed'
type = 'number'
description = 'The walk speed multiplier that crouch speed should be.'

[SetCurrentViewOffset]
description = 'Sets the **actual** view offset which equals the difference between the players actual position and their view when standing.\r\n\r\nDo not confuse with <page>Player:SetViewOffset</page> and <page>Player:SetViewOffsetDucked</page>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'viewOffset'
type = 'Vector'
description = 'The new view offset.'

[SetDeaths]
description = 'Sets a player\'s death count\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'deathcount'
type = 'number'
description = 'Number of deaths (positive or negative)'

[SetDrivingEntity]
description = '<internal></internal>\r\nSets the driving entity and driving mode.\r\n\r\nUse <page>drive.PlayerStartDriving</page> instead, see <page>Entity Driving</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'drivingEntity'
type = 'Entity'
description = 'The entity the player should drive.'
``````````
name = 'drivingMode'
type = 'number'
description = 'The driving mode index.'

[SetDSP]
description = 'Applies the specified sound filter to the player.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'soundFilter'
type = 'number'
description = 'The index of the sound filter to apply.\r\nPick from the [list of DSP\'s](https://developer.valvesoftware.com/wiki/Dsp_presets).'
``````````
name = 'fastReset'
type = 'boolean'
description = 'If set to true the sound filter will be removed faster.'

[SetDuckSpeed]
description = 'Sets how quickly a player ducks.\r\n\r\n<bug issue="2722">This will not work for values >= 1.</bug>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'duckSpeed'
type = 'number'
description = 'How quickly the player will duck.'

[SetEyeAngles]
description = 'Sets the angle of the player\'s view (may rotate body too if angular difference is large)\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'angle'
type = 'Angle'
description = 'Angle to set the view to'

[SetFOV]
description = 'Set a player\'s FOV (Field Of View) over a certain amount of time.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'fov'
type = 'number'
description = 'the angle of perception (FOV). Set to 0 to return to default user FOV. ( Which is ranging from 75 to 90, depending on user settings )'
``````````
name = 'time'
type = 'number'
description = 'the time it takes to transition to the FOV expressed in a floating point.'
``````````
name = 'requester'
type = 'Entity'
description = 'The requester or "owner" of the zoom event.'

[SetFrags]
description = 'Sets a player\'s frags (kills)\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'fragcount'
type = 'number'
description = 'Number of frags (positive or negative)'

[SetHands]
description = 'Sets the hands entity of a player.\r\n\r\nThe hands entity is an entity introduced in Garry\'s Mod 13 and it\'s used to show the player\'s hands attached to the viewmodel.\r\nThis is similar to the approach used in L4D and CS:GO, for more information on how to implement this system in your gamemode visit <page>Using Viewmodel Hands</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'hands'
type = 'Entity'
description = 'The hands entity to set'

[SetHoveredWidget]
description = 'Sets the widget that is currently hovered by the player\'s mouse.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'widget'
type = 'Entity'
description = 'The widget entity that the player is hovering.'

[SetHull]
description = 'Sets the mins and maxs of the AABB of the players collision.\r\n\r\n<bug issue="3365">Setting both the mins and maxs to <page>Global.Vector</page>(0,0,0) will crash the game.</bug>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'hullMins'
type = 'Vector'
description = 'The min coordinates of the hull.'
``````````
name = 'hullMaxs'
type = 'Vector'
description = 'The max coordinates of the hull.'

[SetHullDuck]
description = 'Sets the mins and maxs of the AABB of the players collision when ducked.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'hullMins'
type = 'Vector'
description = 'The min coordinates of the hull.'
``````````
name = 'hullMaxs'
type = 'Vector'
description = 'The max coordinates of the hull.'

[SetJumpPower]
description = 'Sets the jump power, eg. the velocity the player will applied to when he jumps.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'jumpPower'
type = 'number'
description = 'The new jump velocity.'

[SetLadderClimbSpeed]
description = 'Sets the player\'s ladder climbing speed.\r\n\r\nSee <page>Player:SetWalkSpeed</page> for normal walking speed, <page>Player:SetRunSpeed</page> for sprinting speed and <page>Player:SetSlowWalkSpeed</page> for slow walking speed.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'speed'
type = 'number'
description = 'The ladder climbing speed.'

[SetLaggedMovementValue]
description = 'Slows down the player movement simulation by the timescale, this is used internally in the HL2 weapon stripping sequence.\r\n\r\nIt achieves such behavior by multiplying the <page>Global.FrameTime</page> by the specified timescale at the start of the movement simulation and then restoring it afterwards.\r\n\r\n<note>This is reset to 1 on spawn</note>\r\n\r\n<note>There is no weapon counterpart to this, you\'ll have to hardcode the multiplier in the weapon or call <page>Weapon:SetNextPrimaryFire</page> / <page>Weapon:SetNextSecondaryFire</page> manually from a</note>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'timescale'
type = 'number'
description = 'The timescale multiplier.'

[SetLastHitGroup]
description = 'Sets the hitgroup where the player was last hit.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'hitgroup'
type = 'number'
description = 'The hitgroup to set as the "last hit", see <page>Enums/HITGROUP</page>.'

[SetMaxSpeed]
description = 'Sets the maximum speed which the player can move at.\r\n\r\n<note>This is called automatically by the engine. If you wish to limit player speed without setting their run/sprint speeds, see <page>CMoveData:SetMaxClientSpeed</page>.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'walkSpeed'
type = 'number'
description = 'The maximum speed.'

[SetMuted]
description = 'Sets if the player should be muted locally.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Player'
``````````
name = 'mute'
type = 'boolean'
description = 'Mute or unmute.'

[SetNoCollideWithTeammates]
description = 'Sets whenever the player should not collide with their teammates.\r\n\r\n<bug issue="2757">This only works with <page>Player:Team</page> IDs 1-4. This also has major collision issues. This is fixed in the next update.</bug>\r\n<bug issue="1820">Melee damage, such as from zombie attacks, will not register if this is turned on with <page>Player:Team</page> IDs 1-4. This is fixed in the next update.</bug>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'shouldNotCollide'
type = 'boolean'
description = 'True to disable, false to enable collision.'

[SetNoTarget]
description = 'Sets the players visibility towards NPCs.\r\n\r\nInternally this toggles the <page text="FL_NOTARGET">Enums/FL</page> flag, which you can manually test for using <page>Entity:IsFlagSet</page>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'visibility'
type = 'boolean'
description = 'The visibility.'

[SetObserverMode]
description = 'Sets the players observer mode. You must start the spectating first with <page>Player:Spectate</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'mode'
type = 'number'
description = 'Spectator mode using <page>Enums/OBS_MODE</page>.'

[SetPData]
description = 'Writes a **P**layer **Data** key-value pair to the SQL database. (sv.db when called on server,  cl.db when called on client)\r\n\r\nInternally uses the <page>sql</page>.\r\n\r\n<warning>This function internally uses <page>Player:UniqueID</page>, which can cause collisions (two or more players sharing the same PData entry). It\'s recommended that you don\'t use it. See the related wiki page for more information.</warning>\r\n\r\n<note>PData is not networked from servers to clients!</note>\r\n\r\n**Returns:** Whether the operation was successful or not\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'key'
type = 'string'
description = 'Name of the PData key'
``````````
name = 'value'
type = 'any'
description = 'Value to write to the key (**must** be an SQL valid data type, such as a string or integer)'
[[.returns]]
type = 'boolean'

[SetPlayerColor]
description = 'Sets the player model\'s color. The part of the model that is colored is determined by the model itself, and is different for each model.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'Color'
type = 'Vector'
description = 'This is the color to be set. The format is Vector(r, g, b), and each color should be between 0 and 1.'

[SetPressedWidget]
description = 'Sets the widget that is currently in use by the player\'s mouse.\r\n\r\nHaving a pressed widget stops the player from firing his weapon to allow input to be passed onto the widget.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'pressedWidget'
type = 'Entity'
description = 'The widget the player is currently using.'

[SetRenderAngles]
description = 'Sets the render angles of a player.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'ang'
type = 'Angle'
description = 'The new render angles to set'

[SetRunSpeed]
description = 'Sets the player\'s sprint speed.\r\n\r\nSee also <page>Player:GetRunSpeed</page>, <page>Player:SetWalkSpeed</page> and <page>Player:SetMaxSpeed</page>.\r\n<note>player_default class run speed is: 600</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'runSpeed'
type = 'number'
description = 'The new sprint speed when sv_friction is below 10. Higher sv_friction values will result in slower speed.\r\n\r\nHas to be 7 or above or the player won\'t be able to move.'

[SetSlowWalkSpeed]
description = 'Sets the player\'s slow walking speed, which is activated via <key>+WALK</key> keybind.\r\n\r\nSee <page>Player:SetWalkSpeed</page> for normal walking speed, <page>Player:SetRunSpeed</page> for sprinting speed and <page>Player:SetLadderClimbSpeed</page> for ladder climb speed.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'speed'
type = 'number'
description = 'The new slow walking speed.'

[SetStepSize]
description = 'Sets the maximum height a player can step onto without jumping.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'stepHeight'
type = 'number'
description = 'The new maximum height the player can step onto without jumping'

[SetSuitPower]
description = 'Sets the player\'s HEV suit power.\r\n\r\n<bug issue="3449">This will only work for the local player when used clientside.</bug>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'power'
type = 'number'
description = 'The new suit power.'

[SetSuppressPickupNotices]
description = 'Sets whenever to suppress the pickup notification for the player.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'doSuppress'
type = 'boolean'
description = 'Whenever to suppress the notice or not.'

[SetTeam]
description = 'Sets the player to the chosen team.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'Team'
type = 'number'
description = 'The team that the player is being set to.'

[SetUnDuckSpeed]
description = 'Sets how quickly a player un-ducks\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'UnDuckSpeed'
type = 'number'
description = 'How quickly the player will un-duck'

[SetupHands]
description = 'Sets up the players view model hands. Calls <page>GM:PlayerSetHandsModel</page> to set the model of the hands.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'ent'
type = 'Entity'
description = 'If the player is spectating an entity, this should be the entity the player is spectating, so we can use its hands model instead.'

[SetUserGroup]
description = 'Sets the usergroup of the player.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'groupName'
type = 'string'
description = 'The user group of the player.'

[SetViewEntity]
description = 'Attaches the players view to the position and angles of the specified entity.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'viewEntity'
type = 'Entity'
description = 'The entity to attach the player view to.'

[SetViewOffset]
description = 'Sets the **desired** view offset which equals the difference between the players actual position and their view when standing.\r\n\r\nIf you want to set **actual** view offset, use <page>Player:SetCurrentViewOffset</page>\r\n\r\nSee also <page>Player:SetViewOffsetDucked</page> for **desired** view offset when crouching.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'viewOffset'
type = 'Vector'
description = 'The new desired view offset when standing.'

[SetViewOffsetDucked]
description = 'Sets the **desired** view offset which equals the difference between the players actual position and their view when crouching.\r\n\r\nIf you want to set **actual** view offset, use <page>Player:SetCurrentViewOffset</page>\r\n\r\nSee also <page>Player:SetViewOffset</page> for **desired** view offset when standing.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'viewOffset'
type = 'Vector'
description = 'The new desired view offset when crouching.'

[SetViewPunchAngles]
description = 'Sets client\'s view punch. See <page>Player:ViewPunch</page>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'punchAngle'
type = 'Angle'
description = 'The angle to set.'

[SetWalkSpeed]
description = 'Sets the player\'s normal walking speed. Not sprinting, not slow walking <key>+walk</key>.\r\n\r\n\r\nSee also <page>Player:SetSlowWalkSpeed</page>, <page>Player:GetWalkSpeed</page>, <page>Player:SetCrouchedWalkSpeed</page>, <page>Player:SetMaxSpeed</page> and <page>Player:SetRunSpeed</page>.\r\n\r\n<bug issue="2030">Using a speed of 0 can lead to prediction errors.</bug>\r\n<note>player_default class run speed is: 400</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'walkSpeed'
type = 'number'
description = 'The new walk speed when sv_friction is below 10. Higher sv_friction values will result in slower speed.\r\n\r\nHas to be 7 or above or the player won\'t be able to move.'

[SetWeaponColor]
description = 'Sets the player weapon\'s color. The part of the model that is colored is determined by the model itself, and is different for each model.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'Color'
type = 'Vector'
description = 'This is the color to be set. The format is Vector(r,g,b), and each color should be between 0 and 1.'

[ShouldDrawLocalPlayer]
description = 'Returns whether the player\'s player model will be drawn at the time the function is called.\r\n\r\n**Returns:** `true` if the player\'s playermodel is visible\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Player'
[[.returns]]
type = 'boolean'

[ShouldDropWeapon]
description = 'Sets whether the player\'s current weapon should drop on death.\r\n\r\n<note>This is reset on spawn to the <page text="player class">Player_Classes</page>\'s **DropWeaponOnDie** field by <page>player_manager.OnPlayerSpawn</page>.</note>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'drop'
type = 'boolean'
description = 'Whether to drop the player\'s current weapon or not'

[ShowProfile]
description = 'Opens the player steam profile page in the steam overlay browser.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Player'

[SimulateGravGunDrop]
description = 'Signals the entity that it was dropped by the gravity gun.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'ent'
type = 'Entity'
description = 'Entity that was dropped.'

[SimulateGravGunPickup]
description = 'Signals the entity that it was picked up by the gravity gun. This call is only required if you want to simulate the situation of picking up objects.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'ent'
type = 'Entity'
description = 'The entity picked up'

[Spectate]
description = 'Starts spectate mode for given player. This will also affect the players movetype in some cases.\r\n\r\n<bug issue="4608">Using this function while spectating the player\'s own ragdoll will cause it to teleport it to the center of the map. You will spectate the ragdoll even after it\'s been teleported. This only happens on the client of the player spectating the ragdoll and is purely client-side.</bug>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'mode'
type = 'number'
description = 'Spectate mode, see <page>Enums/OBS_MODE</page>.'

[SpectateEntity]
description = 'Makes the player spectate the entity.\r\n\r\nTo get the applied spectated entity, use <page>Player:GetObserverTarget</page>.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'entity'
type = 'Entity'
description = 'Entity to spectate.'

[SprayDecal]
description = 'Makes a player spray their decal.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'sprayOrigin'
type = 'Vector'
description = 'The location to spray from'
``````````
name = 'sprayEndPos'
type = 'Vector'
description = 'The location to spray to'

[SprintDisable]
description = 'Disables the sprint on the player.\r\n\r\n<bug issue="2390">Not working - use <page>Player:SetRunSpeed</page> or <page>CMoveData:SetMaxSpeed</page> in a <page>GM:Move</page> hook, instead.</bug>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'

[SprintEnable]
description = 'Enables the sprint on the player.\r\n\r\n<bug issue="2390">Not working - use <page>Player:SetRunSpeed</page> or <page>CMoveData:SetMaxSpeed</page> in a <page>GM:Move</page> hook, instead.</bug>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'

[StartSprinting]
description = '<deprecated>This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.</deprecated>\r\n\r\nDoesn\'t appear to do anything.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'

[StartWalking]
description = '<deprecated>This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.</deprecated>\r\n\r\nWhen used in a <page>GM:SetupMove</page> hook, this function will force the player to walk, as well as preventing the player from sprinting.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'

[SteamID]
description = 'Returns the player\'s SteamID. In singleplayer, this will be STEAM_ID_PENDING serverside.\r\n\r\nFor Bots this will return `BOT` on the server and on the client it returns `NULL`.\r\n\r\nUse <page>Player:AccountID</page> for a shorter version of the SteamID.\r\n\r\n**Returns:** SteamID\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'string'

[SteamID64]
description = 'Returns the player\'s 64-bit SteamID aka CommunityID.\r\n\r\n<warning>In singleplayer, this will return no value serverside.</warning>\r\n\r\n<note>In a multirun environment, this will return no value serverside for all "copies" of a player.</note>\r\n\r\n<note>For bots, this will return 90071996842377216 (equivalent to STEAM_0:0:0) for the first bot to join.\r\n\r\nFor each additional bot, the number increases by 1. So the next bot will be 90071996842377217 (STEAM_0:1:0) then 90071996842377218 (STEAM_0:0:1) and so on.</note>\r\n\r\n<note>On the client it returns no value for bots.</note>\r\n\r\nUse <page>Player:AccountID</page> for a shorter version of the SteamID.\r\n\r\n**Returns:** Player\'s 64bit SteamID aka CommunityID.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'string'

[StopSprinting]
description = '<deprecated>This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.</deprecated>\r\n\r\nWhen used in a <page>GM:SetupMove</page> hook, this function will prevent the player from sprinting.\r\n\r\nWhen +walk is engaged, the player will still be able to sprint to half speed (normal run speed) as opposed to full sprint speed without this function.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'

[StopWalking]
description = '<deprecated>This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.</deprecated>\r\n\r\nWhen used in a <page>GM:SetupMove</page> hook, this function behaves unexpectedly by preventing the player from sprinting similar to <page>Player:StopSprinting</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'

[StopZooming]
description = 'Turns off the zoom mode of the player. (+zoom console command)\r\n\r\nBasically equivalent of entering "-zoom" into player\'s console.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'

[StripAmmo]
description = 'Removes all ammo from the player.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'

[StripWeapon]
description = 'Removes the specified weapon class from a certain player\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'weapon'
type = 'string'
description = 'The weapon class to remove'

[StripWeapons]
description = 'Removes all weapons from a certain player\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'

[SuppressHint]
description = 'Prevents a hint from showing up.\r\n\r\n\r\n<note>This function is only available in Sandbox and its derivatives</note>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'name'
type = 'string'
description = 'Hint name/class/index to prevent from showing up'

[SwitchToDefaultWeapon]
description = 'Attempts to switch the player weapon to the one specified in the "cl_defaultweapon" convar, if the player does not own the specified weapon nothing will happen.\r\n\r\nIf you want to switch to a specific weapon, use: <page>Player:SetActiveWeapon</page>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'

[Team]
description = 'Returns the player\'s team ID.\r\n\r\nReturns 0 clientside when the game is not fully loaded.\r\n\r\n**Returns:** The player\'s team\'s index number, as in the <page>Enums/TEAM</page> or a custom team defined in <page>team.SetUp</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[TimeConnected]
description = 'Returns the time in seconds since the player connected.\r\n<note>Bots will always return value 0.</note>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[TraceHullAttack]
description = 'Performs a trace hull and applies damage to the entities hit, returns the first entity hit.\r\n\r\n<warning>Hitting the victim entity with this function in <page>ENTITY:OnTakeDamage</page> can cause infinite loops.</warning>\r\n\r\n**Returns:** The hit entity\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'
``````````
name = 'startPos'
type = 'Vector'
description = 'The start position of the hull trace.'
``````````
name = 'endPos'
type = 'Vector'
description = 'The end position of the hull trace.'
``````````
name = 'mins'
type = 'Vector'
description = 'The minimum coordinates of the hull.'
``````````
name = 'maxs'
type = 'Vector'
description = 'The maximum coordinates of the hull.'
``````````
name = 'damage'
type = 'number'
description = 'The damage to be applied.'
``````````
name = 'damageFlags'
type = 'Vector'
description = 'Bitflag specifying the damage type, see <page>Enums/DMG</page>.'
``````````
name = 'damageForce'
type = 'number'
description = 'The force to be applied to the hit object.'
``````````
name = 'damageAllNPCs'
type = 'boolean'
description = 'Whether to apply damage to all hit NPCs or not.'
[[.returns]]
type = 'Entity'

[TranslateWeaponActivity]
description = 'Translates <page>Enums/ACT</page> according to the holdtype of players currently held weapon.\r\n\r\n**Returns:** Translated <page>Enums/ACT</page>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'act'
type = 'number'
description = 'The initial <page>Enums/ACT</page>'
[[.returns]]
type = 'number'

[UnfreezePhysicsObjects]
description = 'Unfreezes all objects the player has frozen with their Physics Gun. Same as double pressing R while holding Physics Gun.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'

[UniqueID]
description = '<warning>**This function has collisions,** where more than one player has the same UniqueID. It is **highly** recommended to use <page>Player:AccountID</page>, <page>Player:SteamID</page> or <page>Player:SteamID64</page> instead, which are guaranteed to be unique to each player.</warning>\r\n\r\nReturns a 32 bit integer that remains constant for a player across joins/leaves and across different servers. This can be used when a string is inappropriate - e.g. in a database primary key.\r\n\r\n<note>In Singleplayer, this function will always return 1.</note>\r\n\r\n**Returns:** The player\'s Unique ID\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[UniqueIDTable]
description = 'Returns a table that will stay allocated for the specific player between connects until the server shuts down. Note, that this table is not synchronized between client and server.\r\n\r\n**Returns:** The table that contains any info you have put in it.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'key'
type = 'any'
description = 'Unique table key.'
[[.returns]]
type = 'table'

[UnLock]
description = 'Unlocks the player movement if locked previously.\r\n<br>\r\nWill disable godmode for the player if locked previously.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'

[UnSpectate]
description = 'Stops the player from spectating another entity.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Player'

[UserID]
description = 'Returns the player\'s ID.\r\nYou can use <page>Global.Player</page>() to get the player by their ID.\r\n\r\n**Returns:** The player\'s user ID\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

[ViewPunch]
description = 'Simulates a push on the client\'s screen.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'PunchAngle'
type = 'Angle'
description = 'The angle in which to push the player\'s screen.'

[ViewPunchReset]
description = 'Resets the player\'s view punch ( <page>Player:ViewPunch</page> ) effect back to normal.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Player'
``````````
name = 'tolerance'
type = 'number'
description = 'Reset all ViewPunch below this threshold.'

[VoiceVolume]
description = 'Returns the players voice volume, how loud the player\'s voice communication currently is, as a normal number. Doesn\'t work on local player unless the voice_loopback convar is set to 1.\r\n\r\n**Returns:** The voice volume.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Player'
[[.returns]]
type = 'number'

