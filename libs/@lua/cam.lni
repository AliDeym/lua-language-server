[cam]
type = 'table'
[[.source]]
type = 'global'
``````````
type = 'library'
name = 'cam'

<default>
type = 'function'
parent = {
	1 = {
		type = 'global',
		name = 'cam'
	},
	2 = {
		type = 'library',
		name = 'cam'
	}
}

[ApplyShake]
description = 'Shakes the screen at a certain position.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'pos'
type = 'Vector'
description = 'Origin of the shake.'
``````````
name = 'angles'
type = 'Angle'
description = 'Angles of the shake.'
``````````
name = 'factor'
type = 'number'
description = 'The shake factor.'

[End]
description = 'Switches the renderer back to the previous drawing mode from a 3D context.\r\n\r\nThis function is an alias of <page>cam.End3D</page>.\r\n\r\n<bug issue="1091">This will crash the game if there is no context to end.</bug>\r\n\r\n**Scope:** Client'

[End2D]
description = 'Switches the renderer back to the previous drawing mode from a 2D context.\r\n\r\n<bug issue="1091">This will crash the game if there is no context to end.</bug>\r\n\r\n**Scope:** Client'

[End3D]
description = 'Switches the renderer back to the previous drawing mode from a 3D context.\r\n\r\n<bug issue="1091">This will crash the game if there is no context to end.</bug>\r\n\r\n**Scope:** Client'

[End3D2D]
description = 'Switches the renderer back to the previous drawing mode from a 3D2D context.\r\n\r\n<bug issue="1091">This will crash the game if there is no context to end.</bug>\r\n\r\n**Scope:** Client'

[EndOrthoView]
description = 'Switches the renderer back to the previous drawing mode from a 3D orthographic rendering context.\r\n\r\n**Scope:** Client'

[GetModelMatrix]
description = 'Returns the currently active model matrix.\r\n<validate>Does this actually mean the matrix on top of the stack? Probably</validate>\r\n\r\n**Returns:** The currently active matrix.\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'VMatrix'

[IgnoreZ]
description = 'Tells the renderer to ignore the depth buffer and draw any upcoming operation "ontop" of everything that was drawn yet.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'ignoreZ'
type = 'boolean'
description = 'Determines whenever to ignore the depth buffer or not.'

[PopModelMatrix]
description = 'Pops the current active rendering matrix from the stack and reinstates the previous one.\r\n\r\n**Scope:** Client'

[PushModelMatrix]
description = 'Pushes the specified matrix onto the render matrix stack. Unlike opengl, this will replace the current model matrix.\r\n\r\n<note>This does not work with <page>cam.Start3D2D</page> if `multiply` is false.</note>\r\n\r\n**Scope:** Client'
[[.args]]
name = 'matrix'
type = 'VMatrix'
description = 'The matrix to push.'
``````````
name = 'multiply'
type = 'boolean'
description = 'If set, multiplies given matrix with currently active matrix (<page>cam.GetModelMatrix</page>) before pushing.'

[Start]
description = 'Sets up a new rendering context. This is an extended version of <page>cam.Start3D</page> and <page>cam.Start2D</page>. Must be finished by <page>cam.End3D</page> or <page>cam.End2D</page>.\r\n\r\n<bug issue="2682">This will not update current view properties for 3D contexts.</bug>\r\n\r\n**Scope:** Client'
[[.args]]
name = 'dataTbl'
type = 'table'
description = 'Render context config. See <page>Structures/RenderCamData</page>'

[Start2D]
description = 'Sets up a new 2D rendering context. Must be finished by <page>cam.End2D</page>.\r\n\r\nThis is almost always used with a render target from the <page>render</page>. To set its position use <page>render.SetViewPort</page> with a target already stored.\r\n\r\n<note>This will put an identity matrix at the top of the model matrix stack. If you are trying to use <page>cam.PushModelMatrix</page>, call it after this function and not before.</note>\r\n<rendercontext hook="true" type="2D"></rendercontext>\r\n\r\n**Scope:** Client'

[Start3D]
description = 'Sets up a new 3D rendering context. Must be finished by <page>cam.End3D</page>.\r\n\r\nFor more advanced settings such as an orthographic view, use <page>cam.Start</page> instead.\r\n\r\n<rendercontext hook="true" type="3D"></rendercontext>\r\n<note>Both zNear and zFar need a value before any of them work.\r\n\r\nzNear also requires a value higher than 0.\r\n</note>\r\n<bug issue="1995">Negative x/y values won\'t work.</bug>\r\n\r\n<bug issue="2682">This will not update current view properties.</bug>\r\n\r\n**Scope:** Client'
[[.args]]
name = 'pos'
type = 'Vector'
description = 'Render cam position.'
``````````
name = 'angles'
type = 'Angle'
description = 'Render cam angles.'
``````````
name = 'fov'
type = 'number'
description = 'Field of view.'
``````````
name = 'x'
type = 'number'
description = 'X coordinate of where to start the new view port.'
``````````
name = 'y'
type = 'number'
description = 'Y coordinate of where to start the new view port.'
``````````
name = 'w'
type = 'number'
description = 'Width of the new viewport.'
``````````
name = 'h'
type = 'number'
description = 'Height of the new viewport.'
``````````
name = 'zNear'
type = 'number'
description = 'Distance to near clipping plane.'
``````````
name = 'zFar'
type = 'number'
description = 'Distance to far clipping plane.'

[Start3D2D]
description = 'Sets up a new 2D rendering context. Must be finished by <page>cam.End3D2D</page>. This function pushes a new matrix onto the stack. (<page>cam.PushModelMatrix</page>)\r\n\r\nMatrix formula:\r\n```\r\nlocal m = Matrix()\r\nm:SetAngles(angles)\r\nm:SetTranslation(pos)\r\nm:SetScale(Vector(scale, -scale, 1))\r\n```\r\n\r\n<rendercontext hook="true" type="2D"></rendercontext>\r\n<rendercontext hook="false" type="3D"></rendercontext>\r\n<warning>This should be closed by <page>cam.End3D2D</page> otherwise the game crashes</warning>\r\n\r\n**Scope:** Client'
[[.args]]
name = 'pos'
type = 'Vector'
description = 'Origin of the 3D2D context, ie. the top left corner, (0, 0).'
``````````
name = 'angles'
type = 'Angle'
description = 'Angles of the 3D2D context.\r\n+x in the 2d context corresponds to +x of the angle (its forward direction).\r\n+y in the 2d context corresponds to -y of the angle (its right direction).\r\n\r\nIf (dx, dy) are your desired (+x, +y) unit vectors, the angle you want is dx:AngleEx(dx:Cross(-dy)).'
``````````
name = 'scale'
type = 'number'
description = 'The scale of the render context.\r\nIf scale is 1 then 1 pixel in 2D context will equal to 1 unit in 3D context.'

[StartOrthoView]
description = 'Sets up a new 3d context using orthographic projection.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'leftOffset'
type = 'number'
description = 'The left plane offset.'
``````````
name = 'topOffset'
type = 'number'
description = 'The top plane offset.'
``````````
name = 'rightOffset'
type = 'number'
description = 'The right plane offset.'
``````````
name = 'bottomOffset'
type = 'number'
description = 'The bottom plane offset.'

