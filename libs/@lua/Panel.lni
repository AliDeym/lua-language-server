<default>
type = 'function'

parent = {
	1 = {
		type = 'object',
		name = 'Panel'
	},
}

[Add]
description = 'Adds the specified object to the panel.\r\n\r\n**Returns:** New panel\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'object'
type = 'Panel'
description = 'The panel to be added (parented). Can also be:\r\n* <page>string</page> Class Name - creates panel with the specified name and adds it to the panel.\r\n* <page>table</page> PANEL table - creates a panel from table and adds it to the panel.'
[[.returns]]
type = 'Panel'

[AddText]
description = '<deprecated>Does nothing</deprecated>\r\nThis function does nothing.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[AlignBottom]
description = 'Aligns the panel on the bottom of its parent with the specified offset.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'offset'
type = 'number'
description = 'The align offset.'

[AlignLeft]
description = 'Aligns the panel on the left of its parent with the specified offset.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'offset'
type = 'number'
description = 'The align offset.'

[AlignRight]
description = 'Aligns the panel on the right of its parent with the specified offset.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'offset'
type = 'number'
description = 'The align offset.'

[AlignTop]
description = 'Aligns the panel on the top of its parent with the specified offset.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'offset'
type = 'number'
description = 'The align offset.'

[AlphaTo]
description = 'Uses animation to transition the current alpha value of a panel to a new alpha, over a set period of time and after a specified delay.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'alpha'
type = 'number'
description = 'The alpha value (0-255) to approach.'
``````````
name = 'duration'
type = 'number'
description = 'The time in seconds it should take to reach the alpha.'
``````````
name = 'delay'
type = 'number'
description = 'The delay before the animation starts.'
``````````
name = 'callback'
type = 'function'
description = 'The function to be called once the animation finishes. Arguments are:\r\n* <page>table</page> animData - The AnimationData that was used. See <page>Structures/AnimationData</page>\r\n* <page>Panel</page> pnl - The panel object whose alpha was changed.'

[AnimationThinkInternal]
description = '<internal></internal> Performs the per-frame operations required for panel animations.\r\n\r\nThis is called every frame by <page>PANEL:AnimationThink</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[AnimTail]
description = 'Returns the <page>Global.SysTime</page> value when all animations for this panel object will end.\r\n\r\n**Returns:** The system time value when all animations will end for this panel.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'number'

[AppendText]
description = 'Appends text to a <page>RichText</page> element. This does not automatically add a new line.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'txt'
type = 'string'
description = 'The text to append (add on).'

[ApplyGWEN]
description = 'Used by <page>Panel:LoadGWENFile</page> and <page>Panel:LoadGWENString</page> to apply a GWEN controls table to a panel object.\r\n\r\nYou can do this manually using <page>file.Read</page> and <page>util.JSONToTable</page> to import and create a GWEN table structure from a `.gwen` file. This method can then be called, passing the GWEN table\'s `Controls` member.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'GWENTable'
type = 'table'
description = 'The GWEN controls table to apply to the panel.'

[Center]
description = 'Centers the panel on its parent.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[CenterHorizontal]
description = 'Centers the panel horizontally with specified fraction.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'fraction'
type = 'number'
description = 'The center fraction.'

[CenterVertical]
description = 'Centers the panel vertically with specified fraction.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'fraction'
type = 'number'
description = 'The center fraction.'

[ChildCount]
description = 'Returns the amount of children of the of panel.\r\n\r\n**Returns:** The amount of children the panel has.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'number'

[ChildrenSize]
description = 'Returns the width and height of the space between the position of the panel (upper-left corner) and the max bound of the children panels (farthest reaching lower-right corner).\r\n\r\n**Returns:** The children size width.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'number'

[Clear]
description = 'Marks all of the panel\'s children for deletion.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[ColorTo]
description = 'Fades panels color to specified one. It won\'t work unless panel has SetColor function.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'color'
type = 'table'
description = 'The color to fade to'
``````````
name = 'length'
type = 'number'
description = 'Length of the animation'
``````````
name = 'delay'
type = 'number'
description = 'Delay before start fading'
``````````
name = 'callback'
type = 'function'
description = 'Function to execute when finished'

[Command]
description = 'Sends an action command signal to the panel. The response is handled by <page>PANEL:ActionSignal</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'command'
type = 'string'
description = 'The command to send to the panel.'

[ConVarChanged]
description = 'Updates a panel object\'s associated console variable. This must first be set up with <page>Global.Derma_Install_Convar_Functions</page>, and have a ConVar set using <page>Panel:SetConVar</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'newValue'
type = 'string'
description = 'The new value to set the associated console variable to.'

[ConVarNumberThink]
description = 'A think hook for <page>Panel</page>s using ConVars as a value. Call it in the Think hook. Sets the panel\'s value should the convar change.\r\n\r\nThis function is best for: checkboxes, sliders, number wangs\r\n\r\nFor a string alternative, see <page>Panel:ConVarStringThink</page>.\r\n\r\n`Important`: Make sure your Panel has a SetValue function, else you may get errors.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[ConVarStringThink]
description = 'A think hook for <page text="panels">Panel</page> using ConVars as a value. Call it in the Think hook. Sets the panel\'s value should the convar change.\r\n\r\nThis function is best for: text inputs, read-only inputs, dropdown selects\r\n\r\nFor a number alternative, see <page>Panel:ConVarNumberThink</page>.\r\n\r\n`Important`: Make sure your Panel has a SetValue function, else you may get errors.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[CopyBase]
description = 'Gets the size, position and dock state of the passed panel object, and applies it to this one.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'srcPanel'
type = 'Panel'
description = 'The panel to copy the boundary and dock settings from.'

[CopyBounds]
description = 'Copies position and size of the panel.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'base'
type = 'Panel'
description = 'The panel to copy size and position from.'

[CopyHeight]
description = 'Copies the height of the panel.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'base'
type = 'Panel'
description = 'Panel to copy the height from.'

[CopyPos]
description = 'Copies the position of the panel.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'base'
type = 'Panel'
description = 'Panel to position the width from.'

[CopySelected]
description = 'Performs the "CONTROL + C" key combination effect ( Copy selection to clipboard ) on selected text.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[CopyWidth]
description = 'Copies the width of the panel.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'base'
type = 'Panel'
description = 'Panel to copy the width from.'

[CursorPos]
description = 'Returns the cursor position relative to the top left of the panel.\r\n\r\nThis is equivalent to calling <page>gui.MousePos</page> and then <page>Panel:ScreenToLocal</page>.\r\n\r\n<warning>This function uses a cached value for the screen position of the panel, computed at the end of the last VGUI Think/Layout pass.\r\n\r\nie. inaccurate results may be returned if the panel or any of its ancestors have been repositioned outside of <page>PANEL:Think</page> or <page>PANEL:PerformLayout</page> within the last frame.</warning>\r\n\r\n**Returns:** X coordinate of the cursor, relative to the top left of the panel.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'number'

[CutSelected]
description = 'Performs the "CONTROL + X" ( delete text and copy it to clipboard buffer ) action on selected text.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[DeleteCookie]
description = 'Deletes a cookie value using the panel\'s cookie name ( <page>Panel:GetCookieName</page> ) and the passed extension.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'cookieName'
type = 'string'
description = 'The unique cookie name to delete.'

[DisableLerp]
description = 'Resets the panel object\'s <page>Panel:SetPos</page> method and removes its animation table (`Panel.LerpAnim`). This effectively undoes the changes made by <page>Panel:LerpPositions</page>.\r\n\r\nIn order to use Lerp animation again, you must call <page>Panel:Stop</page> before setting its `SetPosReal` property to \'nil\'. See the example below.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[Distance]
description = 'Returns the linear distance from the center of this panel object and another. **Both panels must have the same parent for this function to work properly.**\r\n\r\n**Returns:** The linear (straight-line) distance between the center of the two objects.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'tgtPanel'
type = 'Panel'
description = 'The target object with which to compare position.'
[[.returns]]
type = 'number'

[DistanceFrom]
description = 'Returns the distance between the center of this panel object and a specified point **local to the parent panel**.\r\n\r\n**Returns:** The linear (straight-line) distance between the specified point local to parent panel and the center of this panel object.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'posX'
type = 'number'
description = 'The horizontal (x) position in pixels of the point to compare with. Local to the parent panel, or container, not the panel the function is called on.'
``````````
name = 'posY'
type = 'number'
description = 'The vertical (y) position in pixels of the point to compare with. Local to the parent panel, or container, not the panel the function is called on.'
[[.returns]]
type = 'number'

[Dock]
description = 'Sets the dock type for the panel, making the panel "dock" in a certain direction, modifying it\'s position and size.\r\n\r\nYou can set the inner spacing of a panel\'s docking using <page>Panel:DockPadding</page>, which will affect docked child panels, and you can set the outer spacing of a panel\'s docking using <page>Panel:DockMargin</page>, which affects how docked siblings are positioned/sized.\r\n\r\n<note>After using this function, if you want to get the correct panel\'s bounds (position, size), use <page>Panel:InvalidateParent</page> (use `true` as argument if you need to update immediately)</note>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'dockType'
type = 'number'
description = 'Dock type using <page>Enums/DOCK</page>.'

[DockMargin]
description = 'Sets the dock margin of the panel.\r\n\r\nThe dock margin is the extra space that will be left around the edge when this element is docked inside its parent element.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'marginLeft'
type = 'number'
description = 'The left margin to the parent.'
``````````
name = 'marginTop'
type = 'number'
description = 'The top margin to the parent.'
``````````
name = 'marginRight'
type = 'number'
description = 'The right margin to the parent.'
``````````
name = 'marginBottom'
type = 'number'
description = 'The bottom margin to the parent.'

[DockPadding]
description = 'Sets the dock padding of the panel.\r\n\r\nThe dock padding is the extra space that will be left around the edge when child elements are docked inside this element.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'paddingLeft'
type = 'number'
description = 'The left padding to the parent.'
``````````
name = 'paddingTop'
type = 'number'
description = 'The top padding to the parent.'
``````````
name = 'paddingRight'
type = 'number'
description = 'The right padding to the parent.'
``````````
name = 'paddingBottom'
type = 'number'
description = 'The bottom padding to the parent.'

[DoModal]
description = 'Makes the panel "lock" the screen until it is removed. It will silently fail if used while cursor is not visible. Call <page>Panel:MakePopup</page> before calling this function.\r\n\r\n<bug issue="3457">You can still click in the world even if locked.</bug>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[DragClick]
description = '<internal></internal> Called by <page>Panel:DragMouseRelease</page> when a user clicks one mouse button whilst dragging with another.\r\n\r\n**Returns:** Always returns `true`.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'boolean'

[DragHover]
description = '<internal></internal> Called by <page>dragndrop.HoverThink</page> to perform actions on an object that is dragged and hovered over another.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'HoverTime'
type = 'number'
description = 'If this time is greater than 0.1, <page>PANEL:DragHoverClick</page> is called, passing it as an argument.'

[DragHoverEnd]
description = '<internal></internal> Called to end a drag and hover action. This resets the panel\'s <page>PANEL:PaintOver</page> method, and is primarily used by <page>dragndrop.StopDragging</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[DragMousePress]
description = 'Called to inform the <page>dragndrop</page> that a mouse button is being held down on a panel object.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'mouseCode'
type = 'number'
description = 'The code for the mouse button pressed, passed by, for example, <page>PANEL:OnMousePressed</page>. See the <page>Enums/MOUSE</page>.'

[DragMouseRelease]
description = 'Called to inform the <page>dragndrop</page> that a mouse button has been depressed on a panel object.\r\n\r\n**Returns:** `true` if an object was being dragged, otherwise `false`.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'mouseCode'
type = 'number'
description = 'The code for the mouse button pressed, passed by, for example, <page>PANEL:OnMouseReleased</page>. See the <page>Enums/MOUSE</page>.'
[[.returns]]
type = 'boolean'

[DrawDragHover]
description = '<internal></internal> Called to draw the drop target when an object is being dragged across another. See <page>Panel:SetDropTarget</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'x'
type = 'number'
description = 'The x coordinate of the top-left corner of the drop area.'
``````````
name = 'y'
type = 'number'
description = 'The y coordinate of the top-left corner of the drop area.'
``````````
name = 'width'
type = 'number'
description = 'The width of the drop area.'
``````````
name = 'height'
type = 'number'
description = 'The height of the drop area.'

[DrawFilledRect]
description = 'Draws a coloured rectangle to fill the panel object this method is called on. The colour is set using <page>surface.SetDrawColor</page>. This should only be called within the object\'s <page>PANEL:Paint</page> or <page>PANEL:PaintOver</page> hooks, as a shortcut for <page>surface.DrawRect</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[DrawOutlinedRect]
description = 'Draws a hollow rectangle the size of the panel object this method is called on, with a border width of 1 px. The border colour is set using <page>surface.SetDrawColor</page>. This should only be called within the object\'s <page>PANEL:Paint</page> or <page>PANEL:PaintOver</page> hooks, as a shortcut for <page>surface.DrawOutlinedRect</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[DrawSelections]
description = 'Used to draw the magenta highlight colour of a panel object when it is selected. This should be called in the object\'s <page>PANEL:PaintOver</page> hook. Once this is implemented, the highlight colour will be displayed only when the object is selectable and selected. This is achieved using <page>Panel:SetSelectable</page> and <page>Panel:SetSelected</page> respectively.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[DrawTextEntryText]
description = 'Used to draw the text in a <page>DTextEntry</page> within a derma skin. This should be called within the <page>SKIN:PaintTextEntry</page> skin hook.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'textCol'
type = 'table'
description = 'The colour of the main text.'
``````````
name = 'highlightCol'
type = 'table'
description = 'The colour of the selection highlight (when selecting text).'
``````````
name = 'cursorCol'
type = 'table'
description = 'The colour of the text cursor (or caret).'

[DrawTexturedRect]
description = 'Draws a textured rectangle to fill the panel object this method is called on. The texture is set using <page>surface.SetTexture</page> or <page>surface.SetMaterial</page>. This should only be called within the object\'s <page>PANEL:Paint</page> or <page>PANEL:PaintOver</page> hooks, as a shortcut for <page>surface.DrawTexturedRect</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[Droppable]
description = 'Makes this panel droppable. This is used with <page>Panel:Receiver</page> to create drag and drop events.\r\n\r\nCan be called multiple times with different names allowing to be dropped onto different receivers.\r\n\r\n**Returns:** Blank table stored on the panel itself under pnl.m_DragSlot[ name ]. Is reset every time this function is called and does not appear to be used or exposed anywhere else.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'name'
type = 'string'
description = 'Name of your droppable panel'
[[.returns]]
type = 'table'

[EndBoxSelection]
description = 'Completes a box selection. If the end point of the selection box is within the selection canvas, mouse capture is disabled for the panel object, and the selected state of each child object within the selection box is toggled.\r\n\r\n**Returns:** Whether the end point of the selection box was within the selection canvas.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'boolean'

[Exec]
description = '<internal></internal> Used to run commands within a <page>DHTML</page> window.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'cmd'
type = 'string'
description = 'The command to be run.'

[Find]
description = 'Finds a panel in its children(and sub children) with the given name.\r\n\r\n**Returns:** foundPanel\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'panelName'
type = 'string'
description = 'The name of the panel that should be found.'
[[.returns]]
type = 'Panel'

[FocusNext]
description = 'Focuses the next panel in the focus queue.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[FocusPrevious]
description = 'Focuses the previous panel in the focus queue.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[GetAlpha]
description = 'Returns the alpha multiplier for this panel.\r\n\r\n**Returns:** alphaMul\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'number'

[GetBGColor]
description = 'Returns the background color of a panel such as a <page>RichText</page>, <page>Label</page> or <page>DColorCube</page>.\r\n\r\n<note>This doesn\'t apply to all VGUI elements and its function varies between them</note>\r\n\r\n**Returns:** The <page>Color</page> structure\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'number'

[GetBounds]
description = 'Returns the position and size of the panel.\r\n\r\nThis is equivalent to calling <page>Panel:GetPos</page> and <page>Panel:GetSize</page> together.\r\n\r\n**Returns:** The x coordinate of the panel, relative to its parent\'s top left.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'number'

[GetCaretPos]
description = 'Returns the position/offset of the caret (or text cursor) in a text-based panel object.\r\n\r\n**Returns:** The caret position/offset from the start of the text. A value of `0` means the caret sits before the first character.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'number'

[GetChild]
description = 'Gets a child by its index.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'childIndex'
type = 'number'
description = 'The index of the child to get.\r\n\r\n<note>This index starts at 0, except when you use this on a <page>DMenu</page>.</note>'

[GetChildPosition]
description = 'Gets a child object\'s position relative to this panel object. The number of levels is not relevant; the child may have many parents between itself and the object on which the method is called.\r\n\r\n**Returns:** The horizontal (x) position of the child relative to this panel object.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'pnl'
type = 'Panel'
description = 'The panel to get the position of.'
[[.returns]]
type = 'number'

[GetChildren]
description = 'Returns a table with all the child panels of the panel.\r\n\r\n**Returns:** children\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'table'

[GetChildrenInRect]
description = 'Returns a table of all visible, selectable children of the panel object that lie at least partially within the specified rectangle.\r\n\r\n**Returns:** A table of panel objects that lie at least partially within the specified rectangle.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'x'
type = 'number'
description = 'The horizontal (x) position of the top-left corner of the rectangle, relative to the panel object.'
``````````
name = 'y'
type = 'number'
description = 'The vertical (y) position of the top-left corner of the rectangle, relative to the panel object.'
``````````
name = 'w'
type = 'number'
description = 'The width of the rectangle.'
``````````
name = 'h'
type = 'number'
description = 'The height of the rectangle.'
[[.returns]]
type = 'table'

[GetClassName]
description = 'Returns the class name of the panel.\r\n\r\n**Returns:** className\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'string'

[GetClosestChild]
description = 'Returns the child of this panel object that is closest to the specified point. The point is relative to the object on which the method is called. The distance the child is from this point is also returned.\r\n\r\n**Returns:** The child object that was closest to the specified point.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'x'
type = 'number'
description = 'The horizontal (x) position of the point.'
``````````
name = 'y'
type = 'number'
description = 'The vertical (y) position of the point.'
[[.returns]]
type = 'Panel'

[GetContentSize]
description = 'Gets the size of the content/children within a panel object.\r\n\r\nOnly works with <page>Label</page> derived panels by default such as <page>DLabel</page>.\r\n\r\n\r\nWill also work on any panel that manually implements this method.\r\n\r\n**Returns:** The content width of the object.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'number'

[GetCookie]
description = 'Gets the value of a cookie stored by the panel object. This can also be done with <page>cookie.GetString</page>, using the panel\'s cookie name, a fullstop, and then the actual name of the cookie.\r\n\r\nMake sure the panel\'s cookie name has not changed since writing, or the cookie will not be accessible. This can be done with <page>Panel:GetCookieName</page> and <page>Panel:SetCookieName</page>.\r\n\r\n**Returns:** The value of the stored cookie, or the default value should the cookie not exist.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'cookieName'
type = 'string'
description = 'The name of the cookie from which to retrieve the value.'
``````````
name = 'default'
type = 'string'
description = 'The default value to return if the cookie does not exist.'
[[.returns]]
type = 'string'

[GetCookieName]
description = 'Gets the name the panel uses to store cookies. This is set with <page>Panel:SetCookieName</page>.\r\n\r\n**Returns:** The name the panel uses when reading or writing cookies. The format used is as follows:\r\n```\r\npanelCookieName.individualCookieName\r\n```\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'string'

[GetCookieNumber]
description = 'Gets the value of a cookie stored by the panel object, as a number. This can also be done with <page>cookie.GetNumber</page>, using the panel\'s cookie name, a fullstop, and then the actual name of the cookie.\r\n\r\nMake sure the panel\'s cookie name has not changed since writing, or the cookie will not be accessible. This can be done with <page>Panel:GetCookieName</page> and <page>Panel:SetCookieName</page>.\r\n\r\n**Returns:** The number value of the stored cookie, or the default value should the cookie not exist.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'cookieName'
type = 'string'
description = 'The name of the cookie from which to retrieve the value.'
``````````
name = 'default'
type = 'number'
description = 'The default value to return if the cookie does not exist.'
[[.returns]]
type = 'number'

[GetDock]
description = 'Returns a dock enum for the panel\'s current docking type.\r\n\r\n**Returns:** The dock enum for the panel. See <page>Enums/DOCK</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'number'

[GetDockMargin]
description = 'Returns the docked margins of the panel. (set by <page>Panel:DockMargin</page>)\r\n\r\n**Returns:** Left margin.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'number'

[GetDockPadding]
description = 'Returns the docked padding of the panel. (set by <page>Panel:DockPadding</page>)\r\n\r\n**Returns:** Left padding.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'number'

[GetFGColor]
description = 'Returns the foreground color of the panel.\r\n\r\nFor a <page>Label</page> or <page>RichText</page>, this is the color of its text.\r\n\r\n<note>This doesn\'t apply to all VGUI elements (such as <page>DLabel</page>) and its function varies between them</note>\r\n\r\n**Returns:** A color structure. See <page>Color</page>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'table'

[GetFont]
description = 'Returns the name of the font that the panel renders its text with.\r\n\r\nThis is the same font name set with <page>Panel:SetFontInternal</page>.\r\n\r\n**Returns:** fontName\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'string'

[GetHTMLMaterial]
description = 'Returns the panel\'s HTML material. Only works with <page>Awesomium</page>, <page>HTML</page> and <page>DHTML</page> panels that have been fully loaded.\r\n\r\n**Returns:** The HTML material used by the panel. Typically starts with "__vgui_texture_" followed by an incremental number.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'IMaterial'

[GetMaximumCharCount]
description = 'Returns the current maximum character count.\r\n\r\nThis function will only work on <page>RichText</page> and <page>TextEntry</page> panels and their derivatives.\r\n\r\n**Returns:** The maximum amount of characters this panel is allowed to contain.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'number'

[GetName]
description = 'Returns the internal name of the panel.\r\n\r\n**Returns:** name\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'string'

[GetNumLines]
description = 'Returns the number of lines in a <page>RichText</page>. You must wait a couple frames before calling this after using <page>Panel:AppendText</page> or <page>Panel:SetText</page>, otherwise it will return the number of text lines before the text change.\r\n\r\n<note>Even though this function can be called on any panel, it will only work with <page>RichText</page></note>\r\n\r\n**Returns:** The number of lines.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'number'

[GetParent]
description = 'Returns the parent of the panel, returns nil if there is no parent.\r\n\r\n**Returns:** The parent of given panel\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'Panel'

[GetPos]
description = 'Returns the position of the panel relative to its <page>Panel:GetParent</page>.\r\n\r\nIf you require the panel\'s position **and** size, consider using <page>Panel:GetBounds</page> instead.\r\n\r\n\r\nIf you need the position in screen space, see <page>Panel:LocalToScreen</page>.\r\n\r\n**Returns:** X coordinate, relative to this panels parents top left corner.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'number'

[GetSelectedChildren]
description = 'Returns a table of all children of the panel object that are selected. This is recursive, and the returned table will include tables for any child objects that also have children. This means that not all first-level members in the returned table will be of type <page>Panel</page>.\r\n\r\n**Returns:** A table of any child objects that are selected, including tables for children of the child objects (These tables may also contain table members, as the method is recursive).\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'table'

[GetSelectedTextRange]
description = 'Returns the currently selected range of text.\r\n\r\nThis function will only work on <page>RichText</page> and <page>TextEntry</page> panels and their derivatives.\r\n\r\n**Returns:** The start of the range. If no text is selected it may be 0 and/or equal to the end range.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'number'

[GetSelectionCanvas]
description = 'Returns the panel object (`self`) if it has been enabled as a selection canvas. This is achieved using <page>Panel:SetSelectionCanvas</page>.\r\n\r\n**Returns:** The panel object this method was called on if enabled as a selection canvas, otherwise `nil`.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'Panel'

[GetSize]
description = 'Returns the size of the panel.\r\n\r\nIf you require both the panel\'s position and size, consider using <page>Panel:GetBounds</page> instead.\r\n\r\n**Returns:** width\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'number'

[GetSkin]
description = 'Returns the table for the derma skin currently being used by this panel object.\r\n\r\n**Returns:** The derma skin table currently being used by this object.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'table'

[GetTable]
description = 'Returns the internal Lua table of the panel.\r\n\r\n**Returns:** A table containing all the members of given panel object.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'table'

[GetTall]
description = 'Returns the height of the panel.\r\n\r\n**Returns:** height\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'number'

[GetText]
description = 'Returns the panel\'s text (where applicable).\r\n\r\nThis method returns a maximum of 1023 bytes, except for <page>DTextEntry</page>.\r\n\r\n**Returns:** The panel\'s text.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'string'

[GetTextInset]
description = 'Gets the left and top text margins of a text-based panel object, such as a <page>DButton</page> or <page>DLabel</page>. This is set with <page>Panel:SetTextInset</page>.\r\n\r\n**Returns:** The left margin of the text, in pixels.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'number'

[GetTextSize]
description = 'Gets the size of the text within a <page>Label</page> derived panel.\r\n\r\n<bug issue="2576">This can return 0 incorrectly.</bug>\r\n\r\n**Returns:** The width of the text in the DLabel.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'number'

[GetValidReceiverSlot]
description = 'Gets valid receiver slot of currently dragged panel.\r\n\r\n**Returns:** The panel this was called on if a valid receiver slot exists, otherwise false.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'Panel'

[GetValue]
description = 'Returns the value the panel holds.\r\n\r\nIn engine is only implemented for <page>CheckButton</page>, <page>Label</page> and <page>TextEntry</page> as a string.\r\n\r\n<note>This function is limited to 8092 Bytes. If using <page>DTextEntry</page>, use <page>Panel:GetText</page> for unlimited bytes.</note>\r\n\r\n**Returns:** The value the panel holds.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'any'

[GetWide]
description = 'Returns the width of the panel.\r\n\r\n**Returns:** width\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'number'

[GetZPos]
description = 'Returns the Z position of the panel.\r\n\r\n**Returns:** The Z order position of the panel.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'number'

[GoBack]
description = 'Goes back one page in the HTML panel\'s history if available.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[GoForward]
description = 'Goes forward one page in the HTML panel\'s history if available.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[GoToHistoryOffset]
description = 'Goes to the page in the HTML panel\'s history at the specified relative offset.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'offset'
type = 'number'
description = 'The offset in the panel\'s back/forward history, relative to the current page, that you would like to skip to. Because this is relative, 0 = current page while negative goes back and positive goes forward. For example, -2 will go back 2 pages in the history.'

[GotoTextEnd]
description = 'Causes a <page>RichText</page> element to scroll to the bottom of its text.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[GotoTextStart]
description = 'Causes a <page>RichText</page> element to scroll to the top of its text.\r\n\r\n<bug issue="2239">This does not work on the same frame as <page>Panel:SetText</page>.</bug>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[GWEN_SetCheckboxText]
description = '<internal></internal> Used by <page>Panel:ApplyGWEN</page> to apply the `CheckboxText` property to a <page>DCheckBoxLabel</page>. This does exactly the same as <page>Panel:GWEN_SetText</page>, but exists to cater for the seperate GWEN properties.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'txt'
type = 'string'
description = 'The text to be applied to the DCheckBoxLabel.'

[GWEN_SetControlName]
description = '<internal></internal> Used by <page>Panel:ApplyGWEN</page> to apply the `ControlName` property to a panel. This calls <page>Panel:SetName</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'name'
type = 'string'
description = 'The new name to apply to the panel.'

[GWEN_SetDock]
description = '<internal></internal> Used by <page>Panel:ApplyGWEN</page> to apply the `Dock` property to a  panel object. This calls <page>Panel:Dock</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'dockState'
type = 'string'
description = 'The dock mode to pass to the panel\'s `Dock` method. This reads a string and applies the approriate <page>Enums/DOCK</page>.\r\n* `Right`: Dock right.\r\n* `Left`: Dock left.\r\n* `Bottom`: Dock at the bottom.\r\n* `Top`: Dock at the top.\r\n* `Fill`: Fill the parent panel.'

[GWEN_SetHorizontalAlign]
description = '<internal></internal> Used by <page>Panel:ApplyGWEN</page> to apply the `HorizontalAlign` property to a  panel object. This calls <page>Panel:SetContentAlignment</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'hAlign'
type = 'string'
description = 'The alignment, as a string, to pass to <page>Panel:SetContentAlignment</page>. Accepts:\r\n* `Right`: Align mid-right.\r\n* `Left`: Align mid-left.\r\n* `Center`: Align mid-center.'

[GWEN_SetMargin]
description = '<internal></internal> Used by <page>Panel:ApplyGWEN</page> to apply the `Margin` property to a  panel object. This calls <page>Panel:DockMargin</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'margins'
type = 'table'
description = 'A four-membered table containing the margins as numbers:\r\n* <page>number</page> left - The left margin.\r\n* <page>number</page> top - The top margin.\r\n* <page>number</page> right - The right margin.\r\n* <page>number</page> bottom - The bottom margin.'

[GWEN_SetMax]
description = '<internal></internal> Used by <page>Panel:ApplyGWEN</page> to apply the `Max` property to a  <page>DNumberWang</page>, <page>Slider</page>, <page>DNumSlider</page> or <page>DNumberScratch</page>. This calls `SetMax` on one of the previously listed methods.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'maxValue'
type = 'number'
description = 'The maximum value the element is to permit.'

[GWEN_SetMin]
description = '<internal></internal> Used by <page>Panel:ApplyGWEN</page> to apply the `Min` property to a  <page>DNumberWang</page>, <page>Slider</page>, <page>DNumSlider</page> or <page>DNumberScratch</page>. This calls `SetMin` on one of the previously listed methods.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'minValue'
type = 'number'
description = 'The minimum value the element is to permit.'

[GWEN_SetPosition]
description = '<internal></internal> Used by <page>Panel:ApplyGWEN</page> to apply the `Position` property to a  panel object. This calls <page>Panel:SetPos</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'pos'
type = 'table'
description = 'A two-membered table containing the x and y coordinates as numbers:\r\n* <page>number</page> x - The x coordinate.\r\n* <page>number</page> y - The y coordinate.'

[GWEN_SetSize]
description = '<internal></internal> Used by <page>Panel:ApplyGWEN</page> to apply the `Size` property to a  panel object. This calls <page>Panel:SetSize</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'size'
type = 'table'
description = 'A two-membered table containing the width and heights as numbers:\r\n* <page>number</page> w - The width.\r\n* <page>number</page> h - The height.'

[GWEN_SetText]
description = '<internal></internal> Used by <page>Panel:ApplyGWEN</page> to apply the `Text` property to a panel.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'txt'
type = 'string'
description = 'The text to be applied to the panel.'

[HasChildren]
description = 'Returns whenever the panel has child panels.\r\n\r\n**Returns:** hasChilds\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'boolean'

[HasFocus]
description = 'Returns if the panel is focused.\r\n\r\n**Returns:** hasFocus\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'boolean'

[HasHierarchicalFocus]
description = 'Returns if the panel or any of its children(sub children and so on) has the focus.\r\n\r\n**Returns:** hasHierarchicalFocus\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'boolean'

[HasParent]
description = 'Returns whether the panel is a descendent of the given panel.\r\n\r\n**Returns:** True if the panel is contained within parentPanel.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'parentPanel'
type = 'Panel'
description = ''
[[.returns]]
type = 'boolean'

[Hide]
description = 'Makes a panel invisible.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[InsertClickableTextEnd]
description = 'Marks the end of a clickable text segment in a <page>RichText</page> element, started with <page>Panel:InsertClickableTextStart</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[InsertClickableTextStart]
description = 'Starts the insertion of clickable text for a <page>RichText</page> element. Any text appended with <page>Panel:AppendText</page> between this call and <page>Panel:InsertClickableTextEnd</page> will become clickable text.\r\n\r\nThe hook <page>PANEL:ActionSignal</page> is called when the text is clicked, with "TextClicked" as the signal name and `signalValue` as the signal value.\r\n\r\n<note>The clickable text is a separate Derma panel which will not inherit the current font from the `RichText`.</note>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'signalValue'
type = 'string'
description = 'The text passed as the action signal\'s value.'

[InsertColorChange]
description = 'Inserts a color change in a <page>RichText</page> element, which affects the color of all text added with <page>Panel:AppendText</page> until another color change is applied.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'r'
type = 'number'
description = 'The red value `(0 - 255)`.'
``````````
name = 'g'
type = 'number'
description = 'The green value `(0 - 255)`.'
``````````
name = 'b'
type = 'number'
description = 'The blue value `(0 - 255)`.'
``````````
name = 'a'
type = 'number'
description = 'The alpha value `(0 - 255)`.'

[InsertFade]
description = 'Begins a text fade for a <page>RichText</page> element where the last appended text segment is fully faded out after a specific amount of time, at a specific speed.\r\n\r\nThe alpha of the text at any given time is determined by the text\'s base alpha * ((`sustain` - <page>Global.CurTime</page>) / `length`) where <page>Global.CurTime</page> is added to `sustain` when this method is called.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'sustain'
type = 'number'
description = 'The number of seconds the text remains visible.'
``````````
name = 'length'
type = 'number'
description = 'The number of seconds it takes the text to fade out.\r\n\r\nIf set **lower** than `sustain`, the text will not begin fading out until (`sustain` - `length`) seconds have passed.\r\n\r\nIf set **higher** than `sustain`, the text will begin fading out immediately at a fraction of the base alpha.\r\n\r\nIf set to **-1**, the text doesn\'t fade out.'

[InvalidateChildren]
description = 'Invalidates the layout of this panel object and all its children. This will cause these objects to re-layout immediately, calling <page>PANEL:PerformLayout</page>. If you want to perform the layout in the next frame, you will have loop manually through all children, and call <page>Panel:InvalidateLayout</page> on each.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'recursive'
type = 'boolean'
description = 'If `true`, the method will recursively invalidate the layout of all children. Otherwise, only immediate children are affected.'

[InvalidateLayout]
description = 'Causes the panel to re-layout in the next frame. During the layout process  <page>PANEL:PerformLayout</page> will be called on the target panel.\r\n\r\nYou should avoid calling this function every frame.\r\n\r\n<bug issue="2574">Using this on a panel after clicking on a docked element will cause docked elements to reorient themselves incorrectly. This can be fixed by assigning a unique <page>Panel:SetZPos</page> to each docked element.</bug>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'layoutNow'
type = 'boolean'
description = 'If true the panel will re-layout instantly and not wait for the next frame.'

[InvalidateParent]
description = 'Invalidates the layout of the parent of this panel object. This will cause it to re-layout, calling <page>PANEL:PerformLayout</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'layoutNow'
type = 'boolean'
description = 'If `true`, the re-layout will occur immediately, otherwise it will be performed in the next frame.'

[IsChildHovered]
description = 'Determines whether the mouse cursor is hovered over one of this panel object\'s children. This is a reverse process using <page>vgui.GetHoveredPanel</page>, and looks upward to find the parent.\r\n\r\n**Returns:** Whether or not one of this panel object\'s children is being hovered over.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'immediate'
type = 'boolean'
description = 'Set to true to check only the immediate children of given panel ( first level )'
[[.returns]]
type = 'boolean'

[IsDraggable]
description = 'Returns whether this panel is draggable ( if user is able to drag it ) or not.\r\n\r\n**Returns:** Whether this panel is draggable ( if user is able to drag it ) or not.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'boolean'

[IsDragging]
description = 'Returns whether this panel is currently being dragged or not.\r\n\r\n**Returns:** Whether this panel is currently being dragged or not.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'boolean'

[IsEnabled]
description = 'Returns whether the the panel is enabled or disabled.\r\n\r\nSee <page>Panel:SetEnabled</page> for a function that makes the panel enabled or disabled.\r\n\r\n**Returns:** Whether the panel is enabled or disabled.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'boolean'

[IsHovered]
description = 'Returns whether the mouse cursor is hovering over this panel or not\r\n\r\nUses <page>vgui.GetHoveredPanel</page> internally.\r\n\r\nRequires <page>Panel:SetMouseInputEnabled</page> to be set to true.\r\n\r\n**Returns:** true if the panel is hovered\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'boolean'

[IsKeyboardInputEnabled]
description = 'Returns true if the panel can receive keyboard input.\r\n\r\n**Returns:** keyboardInputEnabled\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'boolean'

[IsLoading]
description = 'Determines whether or not a <page>HTML</page> or <page>DHTML</page> element is currently loading a page.\r\n\r\n<note>Before calling <page>Panel:SetHTML</page> or <page>DHTML:OpenURL</page>, the result seems to be `false` with the Awesomium web renderer and `true` for the Chromium web renderer. This difference can be used to determine the available HTML5 capabilities.</note>\r\n<note>On Awesomium, the result remains `true` until the root document is loaded and when in-page content is loading (when adding pictures, frames, etc.). During this state, the HTML texture is not refreshed and the panel is not painted (it becomes invisible).\r\n\r\nOn Chromium, the value is only `true` when the root document is not ready. The rendering is not suspended when in-page elements are loading.</note>\r\n\r\n**Returns:** Whether or not the (D)HTML object is loading.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'boolean'

[IsMarkedForDeletion]
description = 'Returns if the panel is going to be deleted in the next frame.\r\n\r\n**Returns:** markedForDeletion\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'boolean'

[IsMouseInputEnabled]
description = 'Returns true if the panel can receive mouse input.\r\n\r\n**Returns:** mouseInputEnabled\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'boolean'

[IsOurChild]
description = 'Returns whether the panel contains the given panel, recursively.\r\n\r\n**Returns:** True if the panel contains childPanel.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'childPanel'
type = 'Panel'
description = ''
[[.returns]]
type = 'boolean'

[IsSelectable]
description = 'Determines if the panel object is selectable (like icons in the Spawn Menu, holding <key>Shift</key>). This is set with <page>Panel:SetSelectable</page>.\r\n\r\n**Returns:** Whether the panel is selectable or not.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'boolean'

[IsSelected]
description = 'Returns if the panel object is selected (like icons in the Spawn Menu, holding <key>Shift</key>). This can be set in Lua using <page>Panel:SetSelected</page>.\r\n\r\n**Returns:** Whether the panel object is selected or not. Always returns false if the object is not selectable. This can be modified using <page>Panel:SetSelectable</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'boolean'

[IsSelectionCanvas]
description = 'Determines if the panel object is a selection canvas or not. This is set with <page>Panel:SetSelectionCanvas</page>.\r\n\r\n**Returns:** The value (if any) set by <page>Panel:SetSelectionCanvas</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'any'

[IsValid]
description = 'Returns if the panel is valid and not marked for deletion.\r\n\r\n**Returns:** True if the object is valid.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'boolean'

[IsVisible]
description = 'Returns if the panel is visible.\r\n\r\n**Returns:** isVisible\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'boolean'

[IsWorldClicker]
description = 'Returns if a panel allows world clicking set by <page>Panel:SetWorldClicker</page>.\r\n\r\n**Returns:** If the panel allows world clicking.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'boolean'

[KillFocus]
description = 'Remove the focus from the panel.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[LerpPositions]
description = 'Redefines the panel object\'s <page>Panel:SetPos</page> method to operate using frame-by-frame linear interpolation (Lerp). When the panel\'s position is changed, it will move to the target position at the speed defined. You can undo this with <page>Panel:DisableLerp</page>.\r\n\r\nUnlike the other panel animation functions, such as <page>Panel:MoveTo</page>, this animation method will not operate whilst the game is paused. This is because it relies on <page>Global.FrameTime</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'speed'
type = 'number'
description = 'The speed at which to move the panel. This is affected by the value of `easeOut`. Recommended values are:\r\n* **0.1 - 10** when `easeOut` is `false`.\r\n* **0.1 - 1** when `easeOut` is `true`.'
``````````
name = 'easeOut'
type = 'boolean'
description = 'This causes the panel object to \'jump\' at the target, slowing as it approaches. This affects the `speed` value significantly, see above.'

[LoadControlsFromFile]
description = '<deprecated></deprecated>\r\n<internal></internal>\r\nSimilar to <page>Panel:LoadControlsFromString</page> but loads controls from a file.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'path'
type = 'string'
description = 'The path to load the controls from.'

[LoadControlsFromString]
description = '<deprecated></deprecated>\r\n<internal></internal>\r\nLoads controls(positions, etc) from given data. This is what the default options menu uses.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'data'
type = 'string'
description = 'The data to load controls from. Format unknown.'

[LoadGWENFile]
description = 'Loads a .gwen file (created by GWEN Designer) and calls <page>Panel:LoadGWENString</page> with the contents of the loaded file.\r\n\r\nUsed to load panel controls from a file.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'filename'
type = 'string'
description = 'The file to open. The path is relative to garrysmod/garrysmod/.'
``````````
name = 'path'
type = 'string'
description = 'The path used to look up the file.\r\n\r\n* "GAME" Structured like base folder (garrysmod/), searches all the mounted content (main folder, addons, mounted games etc)\r\n* "LUA" or "lsv" - All Lua folders (lua/) including gamesmodes and addons\r\n* "DATA" Data folder (garrysmod/data)\r\n* "MOD" Strictly the game folder (garrysmod/), ignores mounting.'

[LoadGWENString]
description = 'Loads controls for the panel from a JSON string.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'str'
type = 'string'
description = 'JSON string containing information about controls to create.'

[LocalCursorPos]
description = 'Returns the cursor position local to the position of the panel (usually the upper-left corner).\r\n\r\n**Returns:** The x coordinate\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'number'

[LocalToScreen]
description = 'Gets the absolute screen position of the position specified relative to the panel.\r\n\r\nSee also <page>Panel:ScreenToLocal</page>.\r\n\r\n<warning>This function uses a cached value for the screen position of the panel, computed at the end of the last VGUI Think/Layout pass, so inaccurate results may be returned if the panel or any of its ancestors have been re-positioned outside of <page>PANEL:Think</page> or <page>PANEL:PerformLayout</page> within the last frame.</warning>\r\n\r\n<note>If the panel uses <page>Panel:Dock</page>, this function will return 0, 0 when the panel was created. The position will be updated in the next frame.</note>\r\n\r\n**Returns:** The X coordinate relative to the screen.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'posX'
type = 'number'
description = 'The X coordinate of the position on the panel to translate.'
``````````
name = 'posY'
type = 'number'
description = 'The Y coordinate of the position on the panel to translate.'
[[.returns]]
type = 'number'

[MakePopup]
description = 'Focuses the panel and enables it to receive input.\r\n\r\nThis automatically calls <page>Panel:SetMouseInputEnabled</page> and <page>Panel:SetKeyboardInputEnabled</page> and sets them to true.\r\n\r\n<note>Panels derived from <page>Panel</page> will not work properly with this function. Due to this, any children will not be intractable with keyboard. Derive from <page>EditablePanel</page> instead.</note>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[MouseCapture]
description = 'Allows the panel to receive mouse input even if the mouse cursor is outside the bounds of the panel.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'doCapture'
type = 'boolean'
description = 'Set to true to enable, set to false to disable.'

[MoveAbove]
description = 'Places the panel above the passed panel with the specified offset.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'panel'
type = 'Panel'
description = 'Panel to position relatively to.'
``````````
name = 'offset'
type = 'number'
description = 'The align offset.'

[MoveBelow]
description = 'Places the panel below the passed panel with the specified offset.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'panel'
type = 'Panel'
description = 'Panel to position relatively to.'
``````````
name = 'offset'
type = 'number'
description = 'The align offset.'

[MoveBy]
description = 'Moves the panel by the specified coordinates using animation.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'moveX'
type = 'number'
description = 'The number of pixels to move by in the horizontal (x) direction.'
``````````
name = 'moveY'
type = 'number'
description = 'The number of pixels to move by in the vertical (y) direction.'
``````````
name = 'time'
type = 'number'
description = 'The time (in seconds) in which to perform the animation.'
``````````
name = 'delay'
type = 'number'
description = 'The delay (in seconds) before the animation begins.'
``````````
name = 'ease'
type = 'number'
description = 'The easing of the start and/or end speed of the animation. See <page>Panel:NewAnimation</page> for how this works.'
``````````
name = 'callback'
type = 'function'
description = 'The function to be called once the animation is complete. Arguments are:\r\n* <page>table</page> animData - The <page>AnimationData that was used.</page>\r\n* <page>Panel</page> pnl - The panel object that was moved.'

[MoveLeftOf]
description = 'Places the panel left to the passed panel with the specified offset.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'panel'
type = 'Panel'
description = 'Panel to position relatively to.'
``````````
name = 'offset'
type = 'number'
description = 'The align offset.'

[MoveRightOf]
description = 'Places the panel right to the passed panel with the specified offset.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'panel'
type = 'Panel'
description = 'Panel to position relatively to.'
``````````
name = 'offset'
type = 'number'
description = 'The align offset.'

[MoveTo]
description = 'Moves the panel to the specified position using animation.\r\n<note>Setting the ease argument to 0 will result in the animation happening instantly, this applies to all MoveTo/SizeTo functions</note>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'posX'
type = 'number'
description = 'The target x coordinate of the panel.'
``````````
name = 'posY'
type = 'number'
description = 'The target y coordinate of the panel.'
``````````
name = 'time'
type = 'number'
description = 'The time to perform the animation within.'
``````````
name = 'delay'
type = 'number'
description = 'The delay before the animation starts.'
``````````
name = 'ease'
type = 'number'
description = 'The easing of the start and/or end speed of the animation. See <page>Panel:NewAnimation</page> for how this works.'
``````````
name = 'callback'
type = 'function'
description = 'The function to be called once the animation finishes. Arguments are:\r\n* <page>table</page> animData - The <page>AnimationData that was used.</page>\r\n* <page>Panel</page> pnl - The panel object that was moved.'

[MoveToAfter]
description = 'Moves this panel object in front of the specified sibling (child of the same parent) in the render order, and shuffles up the Z-positions of siblings now behind.\r\n\r\n**Returns:** `false` if the passed panel is not a sibling, otherwise `nil`.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'siblingPanel'
type = 'Panel'
description = 'The panel to move this one in front of. Must be a child of the same parent panel.'
[[.returns]]
type = 'boolean'

[MoveToBack]
description = 'Moves the panel object behind all other panels on screen. If the panel has been made a pop-up with <page>Panel:MakePopup</page>, it will still draw in front of any panels that haven\'t.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[MoveToBefore]
description = 'Moves this panel object behind the specified sibling (child of the same parent) in the render order, and shuffles up the <page>Panel:SetZPos</page> of siblings now in front.\r\n\r\n**Returns:** `false` if the passed panel is not a sibling, otherwise `nil`.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'siblingPanel'
type = 'Panel'
description = 'The panel to move this one behind. Must be a child of the same parent panel.'
[[.returns]]
type = 'boolean'

[MoveToFront]
description = 'Moves the panel in front of all other panels on screen. Unless the panel has been made a pop-up using <page>Panel:MakePopup</page>, it will still draw behind any that have.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[NewAnimation]
description = 'Creates a new animation for the panel object.\r\n\r\nMethods that use this function:\r\n* <page>Panel:MoveTo</page>\r\n* <page>Panel:SizeTo</page>\r\n* <page>Panel:SlideUp</page>\r\n* <page>Panel:SlideDown</page>\r\n* <page>Panel:ColorTo</page>\r\n* <page>Panel:AlphaTo</page>\r\n* <page>Panel:MoveBy</page>\r\n* <page>Panel:LerpPositions</page>\r\n\r\n**Returns:** Partially filled <page>Structures/AnimationData</page> with members:\r\n* <page>number</page> EndTime - Equal to `length` and `delay` arguments added together, plus either the <page>Global.SysTime</page> if there is no other animation queued or the end time of the last animation in the queue.\r\n* <page>number</page> StartTime - Equal to the `delay` argument, plus either the <page>Global.SysTime</page> if there is no other animation queued or the end time of the last animation in the queue.\r\n* <page>number</page> Ease - Equal to the `ease` argument.\r\n* <page>function</page> OnEnd - Equal to the `callback` argument.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'length'
type = 'number'
description = 'The length of the animation in seconds.'
``````````
name = 'delay'
type = 'number'
description = 'The delay before the animation starts.'
``````````
name = 'ease'
type = 'number'
description = 'The power/index to use for easing.\r\n* Positive values greater than 1 will ease in; the higher the number, the sharper the curve\'s gradient (less linear).\r\n* A value of 1 removes all easing.\r\n* Positive values between 0 and 1 ease out; values closer to 0 increase the curve\'s gradient (less linear).\r\n* A value of 0 will break the animation and should be avoided.\r\n* Any value less than zero will ease in/out; the value has no effect on the gradient.'
``````````
name = 'callback'
type = 'function'
description = 'The function to be called when the animation ends. Arguments passed are:\r\n* <page>table</page> animTable - The <page>Structures/AnimationData</page> that was used.\r\n* <page>Panel</page> tgtPanel - The panel object that was animated.'
[[.returns]]
type = 'table'

[NewObject]
description = '<internal></internal>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'objectName'
type = 'string'
description = ''

[NewObjectCallback]
description = '<internal></internal>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'objectName'
type = 'string'
description = ''
``````````
name = 'callbackName'
type = 'string'
description = ''

[NoClipping]
description = 'Sets whether this panel\'s drawings should be clipped within the parent panel\'s bounds.\r\n\r\nSee also <page>Global.DisableClipping</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'clip'
type = 'boolean'
description = 'Whether to clip or not.'

[NumSelectedChildren]
description = 'Returns the number of children of the panel object that are selected. This is equivalent to calling <page>Panel:IsSelected</page> on all child objects and counting the number of returns that are `true`.\r\n\r\n**Returns:** The number of child objects that are currently selected. This does not include the parent object you are calling the method from.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'number'

[PaintAt]
description = 'Paints a ghost copy of the panel at the given position.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'posX'
type = 'number'
description = 'The x coordinate to draw the panel from.'
``````````
name = 'posY'
type = 'number'
description = 'The y coordinate to draw the panel from.'

[PaintManual]
description = 'Paints the panel at its current position. To use this you must call <page>Panel:SetPaintedManually</page>(true).\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[ParentToHUD]
description = 'Parents the panel to the HUD.\r\nMakes it invisible on the escape-menu and disables controls.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[Paste]
description = '<warning>Due to privacy concerns, this function has been disabled</warning>\r\n\r\nOnly works for TextEntries.\r\n\r\nPastes the contents of the clipboard into the TextEntry.\r\n\r\n<note>Tab characters will be dropped from the pasted text</note>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[PositionLabel]
description = 'Sets the width and position of a <page>DLabel</page> and places the passed panel object directly to the right of it. Returns the `y` value of the bottom of the tallest object. The panel on which this method is run is not relevant; only the passed objects are affected.\r\n\r\n**Returns:** The distance from the top of the parent panel to the bottom of the tallest object (the `y` position plus the height of the label or passed panel, depending on which is tallest).\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'lblWidth'
type = 'number'
description = 'The width to set the label to.'
``````````
name = 'x'
type = 'number'
description = 'The horizontal (x) position at which to place the label.'
``````````
name = 'y'
type = 'number'
description = 'The vertical (y) position at which to place the label.'
``````````
name = 'lbl'
type = 'Panel'
description = 'The label to resize and position.'
``````````
name = 'panelObj'
type = 'Panel'
description = 'The panel object to place to the right of the label.'
[[.returns]]
type = 'number'

[PostMessage]
description = '<deprecated>Only used in deprecated Derma controls.</deprecated>Sends a command to the panel.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'messageName'
type = 'string'
description = 'The name of the message.'
``````````
name = 'valueType'
type = 'string'
description = 'The type of the variable to post.'
``````````
name = 'value'
type = 'string'
description = 'The value to post.'

[Prepare]
description = '<internal></internal>\r\nInstalls Lua defined functions into the panel.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[Queue]
description = 'Enables the queue for panel animations. If enabled, the next new animation will begin after all current animations have ended. This must be called before <page>Panel:NewAnimation</page> to work, and only applies to the next new animation. If you want to queue many, you must call this before each.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[RebuildSpawnIcon]
description = 'Causes a <page>SpawnIcon</page> to rebuild its model image.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[RebuildSpawnIconEx]
description = 'Re-renders a spawn icon with customized cam data.\r\n\r\n<page>Global.PositionSpawnIcon</page> can be used to easily calculate the necessary camera parameters.\r\n\r\n<note>This function does **not** accept the standard <page>Structures/CamData</page>.</note>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'data'
type = 'table'
description = 'A four-membered table containing the information needed to re-render:\r\n* <page>Vector</page> cam_pos - The relative camera position the model is viewed from.\r\n* <page>Angle</page> cam_ang - The camera angle the model is viewed from.\r\n* <page>number</page> cam_fov - The camera\'s field of view (FOV).\r\n* <page>Entity</page> ent - The entity object of the model.\r\nSee the example below for how to retrieve these values.'

[Receiver]
description = 'Allows the panel to receive drag and drop events. Can be called multiple times with different names to receive multiple different draggable panel events.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'name'
type = 'string'
description = 'Name of DnD panels to receive. This is set on the drag\'n\'drop-able panels via  <page>Panel:Droppable</page>'
``````````
name = 'func'
type = 'function'
description = 'This function is called whenever a panel with valid name is hovering above and dropped on this panel. It has next arguments:\r\n* <page>Panel</page> pnl - The receiver panel\r\n* <page>table</page> tbl - A table of panels dropped onto receiver panel\r\n* <page>boolean</page> dropped - False if hovering over, true if dropped onto\r\n* <page>number</page> menuIndex - Index of clicked menu item from third argument of <page>Panel:Receiver</page>\r\n* <page>number</page> x - Cursor pos, relative to the receiver\r\n* <page>number</page> y - Cursor pos, relative to the receiver'
``````````
name = 'menu'
type = 'table'
description = 'A table of strings that will act as a menu if drag\'n\'drop was performed with a right click'

[Refresh]
description = 'Refreshes the HTML panel\'s current page.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'ignoreCache'
type = 'boolean'
description = 'If true, the refresh will ignore cached content similar to "ctrl+f5" in most browsers.'

[Remove]
description = 'Marks a panel for deletion so it will be deleted on the next frame.\r\n\r\nThis will not mark child panels for deletion this frame, but they will be marked and deleted in the next frame.\r\n\r\nSee also <page>Panel:IsMarkedForDeletion</page>\r\n\r\nWill automatically call <page>Panel:InvalidateParent</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[RequestFocus]
description = 'Attempts to obtain focus for this panel.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[ResetAllFades]
description = 'Resets all text fades in a <page>RichText</page> element made with <page>Panel:InsertFade</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'hold'
type = 'boolean'
description = 'True to reset fades, false otherwise.'
``````````
name = 'expiredOnly'
type = 'boolean'
description = 'Any value equating to `true` will reset fades only on text segments that are completely faded out.'
``````````
name = 'newSustain'
type = 'number'
description = 'The new sustain value of each faded text segment. Set to -1 to keep the old sustain value.'

[RunJavascript]
description = 'Runs/Executes a string as JavaScript code in a panel.\r\n<note>This function does **NOT** evaluate expression (i.e. allow you to pass variables from JavaScript (JS) to Lua context).<br>Because a return value is nil/no value (a.k.a. void).<br>If you wish to pass/return values from JS to Lua, you may want to use <page>DHTML:AddFunction</page> function to accomplish that job.</note>\r\n<note>The Awesomium web renderer automatically delays the code execution if the document is not ready, but the Chromium web renderer does not!\r\n\r\nThis means that with Chromium, you cannot JavaScript run code immediatly after calling <page>Panel:SetHTML</page> or <page>DHTML:OpenURL</page>. You should wait for the events <page>PANEL:OnDocumentReady</page> or <page>PANEL:OnFinishLoadingDocument</page> to be triggered before proceeding, otherwise you may manipulate an empty / incomplete document.</note>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'js'
type = 'string'
description = 'Specify JavaScript code to be executed.'

[SaveUndoState]
description = 'Saves the current state (caret position and the text inside) of a <page>TextEntry</page> as an undo state.\r\n\r\nSee also <page>Panel:Undo</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[ScreenToLocal]
description = 'Translates global screen coordinate to coordinates relative to the panel.\r\n\r\nSee also <page>Panel:LocalToScreen</page>.\r\n\r\n<warning>This function uses a cached value for the screen position of the panel, computed at the end of the last VGUI Think/Layout pass, so inaccurate results may be returned if the panel or any of its ancestors have been re-positioned outside of <page>PANEL:Think</page> or <page>PANEL:PerformLayout</page> within the last frame.</warning>\r\n\r\n**Returns:** Relativeposition X\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'screenX'
type = 'number'
description = 'The x coordinate of the screen position to be translated.'
``````````
name = 'screenY'
type = 'number'
description = 'The y coordinate of the screed position be to translated.'
[[.returns]]
type = 'number'

[SelectAll]
description = 'Selects all items within a panel or object. For text-based objects, selects all text.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[SelectAllOnFocus]
description = 'If called on a text entry, clicking the text entry for the first time will automatically select all of the text ready to be copied by the user.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[SelectAllText]
description = 'Selects all the text in a panel object. Will not select non-text items; for this, use <page>Panel:SelectAll</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[SelectNone]
description = 'Deselects all items in a panel object. For text-based objects, this will deselect all text.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[SetAchievement]
description = 'Sets the achievement to be displayed by <page>AchievementIcon</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'id'
type = 'number'
description = 'Achievement number ID'

[SetActionFunction]
description = '<deprecated>Does nothing at all.</deprecated>\r\n\r\nUsed in <page>Button</page> to call a function when the button is clicked and in <page>Slider</page> when the value changes.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'func'
type = 'function'
description = 'Function to call when the <page>Button</page> is clicked or the <page>Slider</page> value is changed.\r\n\r\nArguments given are:\r\n* <page>Panel</page> self - The panel itself\r\n* <page>string</page> action - "Command" on button press, "SliderMoved" on slider move.\r\n* <page>number</page> val - The new value of the <page>Slider</page>. Will always equal 0 for buttons.\r\n* <page>number</page> zed - Always equals 0.'

[SetAllowNonAsciiCharacters]
description = 'Configures a text input to allow user to type characters that are not included in the US-ASCII (7-bit ASCII) character set.\r\n\r\nCharacters not included in US-ASCII are multi-byte characters in UTF-8. They can be accented characters, non-Latin characters and special characters.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'allowed'
type = 'boolean'
description = 'Set to true in order not to restrict input characters.'

[SetAlpha]
description = 'Sets the alpha multiplier for the panel\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'alpha'
type = 'number'
description = 'The alpha value in the range of 0-255.'

[SetAnimationEnabled]
description = 'Enables or disables animations for the panel object by overriding the <page>PANEL:AnimationThink</page> hook to nil and back.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'enable'
type = 'boolean'
description = 'Whether to enable or disable animations.'

[SetAutoDelete]
description = 'Sets whenever the panel should be removed if the parent was removed.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'autoDelete'
type = 'boolean'
description = 'Whenever to delete if the parent was removed or not.'

[SetBGColor]
description = 'Sets the background color of a panel such as a <page>RichText</page>, <page>Label</page> or <page>DColorCube</page>.\r\n\r\n<note>This doesn\'t apply to all VGUI elements and its function varies between them</note>\r\n\r\nFor <page>DLabel</page> elements, you must use <page>Panel:SetPaintBackgroundEnabled</page>( true ) before applying the color.\r\n\r\nThis will not work on setup of the panel - you should use this function in a hook like <page>PANEL:ApplySchemeSettings</page> or <page>PANEL:PerformLayout</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'r or color'
type = 'number'
description = 'The red channel of the color, or a <page>Color</page>. If you pass the latter, the following three arguments are ignored.'
``````````
name = 'g'
type = 'number'
description = 'The green channel of the color.'
``````````
name = 'b'
type = 'number'
description = 'The blue channel of the color.'
``````````
name = 'a'
type = 'number'
description = 'The alpha channel of the color.'

[SetBGColorEx]
description = '<internal></internal>Sets the background color of the panel.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'r'
type = 'number'
description = 'The red channel of the color.'
``````````
name = 'g'
type = 'number'
description = 'The green channel of the color.'
``````````
name = 'b'
type = 'number'
description = 'The blue channel of the color.'
``````````
name = 'a'
type = 'number'
description = 'The alpha channel of the color.'

[SetCaretPos]
description = 'Sets the position of the caret (or text cursor) in a text-based panel object.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'offset'
type = 'number'
description = 'Caret position/offset from the start of text. A value of `0` places the caret before the first character.'

[SetCommand]
description = 'Sets the action signal command that\'s fired when a <page>Button</page> is clicked. The hook <page>PANEL:ActionSignal</page> is called as the click response.\r\n\r\nThis has no effect on buttons unless it has had its `AddActionSignalTarget` method called (an internal function not available by default in Garry\'s Mod LUA).\r\n\r\nA better alternative is calling <page>Panel:Command</page> when a <page>DButton</page> is clicked.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[SetContentAlignment]
description = 'Sets the alignment of the contents.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'alignment'
type = 'number'
description = 'The direction of the content, based on the number pad.\r\n\r\n<key>1</key>: **bottom-left** <br>\r\n<key>2</key>: **bottom-center** <br>\r\n<key>3</key>: **bottom-right** <br>\r\n<key>4</key>: **middle-left** <br>\r\n<key>5</key>: **center** <br>\r\n<key>6</key>: **middle-right** <br>\r\n<key>7</key>: **top-left** <br>\r\n<key>8</key>: **top-center** <br>\r\n<key>9</key>: **top-right** <br>\r\n<img src="DLabel_SetContentAlignment.gif">'

[SetConVar]
description = '<warning>This function does not exist on all panels</warning>\r\n<warning>This function cannot interact with serverside convars unless you are host</warning>\r\n<note>Blocked convars will not work with this, see <page>Blocked ConCommands</page></note>\r\n\r\nSets this panel\'s convar. When the convar changes this panel will update automatically.\r\n\r\nFor developer implementation, see <page>Global.Derma_Install_Convar_Functions</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'convar'
type = 'string'
description = 'The console variable to check.'

[SetCookie]
description = 'Stores a string in the named cookie using <page>Panel:GetCookieName</page> as prefix.\r\n\r\nYou can also retrieve and modify this cookie by using the <page>cookie</page>. Cookies are stored in this format:\r\n\r\n```\r\npanelCookieName.cookieName\r\n```\r\n\r\n\r\n<warning>The panel\'s cookie name MUST be set for this function to work. See <page>Panel:SetCookieName</page>.</warning>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'cookieName'
type = 'string'
description = 'The unique name used to retrieve the cookie later.'
``````````
name = 'value'
type = 'string'
description = 'The value to store in the cookie. This can be retrieved later as a <page>string</page> or <page>number</page>.'

[SetCookieName]
description = 'Sets the panel\'s cookie name. Calls <page>PANEL:LoadCookies</page> if defined.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'name'
type = 'string'
description = 'The panel\'s cookie name. Used as prefix for <page>Panel:SetCookie</page>'

[SetCursor]
description = 'Sets the appearance of the cursor.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'cursor'
type = 'string'
description = 'The cursor to be set. Can be one of the following:\r\n\r\n* arrow\r\n* beam\r\n* hourglass\r\n* waitarrow\r\n* crosshair\r\n* up\r\n* sizenwse\r\n* sizenesw\r\n* sizewe\r\n* sizens\r\n* sizeall\r\n* no\r\n* hand\r\n* blank\r\n\r\nSet to anything else to set it to "none", the default fallback. Do note that a value of "none" does not, as one might assume, result in no cursor being drawn - hiding the cursor requires a value of "blank" instead.'

[SetDragParent]
description = 'Sets the drag parent.\r\n\r\nDrag parent means that when we start to drag this panel, we\'ll really start dragging the defined parent.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'parent'
type = 'Panel'
description = 'The panel to set as drag parent.'

[SetDrawLanguageID]
description = 'Sets the visibility of the language selection box in a TextEntry when typing in non-English mode.\r\n\r\nSee <page>Panel:SetDrawLanguageIDAtLeft</page> for a function that changes the position of the language selection box.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'visible'
type = 'boolean'
description = 'true to make it visible, false to hide it.'

[SetDrawLanguageIDAtLeft]
description = 'Sets where to draw the language selection box.\r\n\r\nSee <page>Panel:SetDrawLanguageID</page> for a function that hides or shows the language selection box.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'left'
type = 'boolean'
description = 'true = left, false = right'

[SetDrawOnTop]
description = 'Makes the panel render in front of all others, including the spawn menu and main menu.\r\n\r\nPriority is given based on the last call, so of two panels that call this method, the second will draw in front of the first.\r\n\r\n<note>This only makes the panel **draw** above other panels. If there\'s another panel that would have otherwise covered it, users will not be able to interact with it.</note>\r\n<warning>This does not work when using <page>PANEL:SetPaintedManually</page> or <page>PANEL:PaintAt</page>!</warning>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'drawOnTop'
type = 'boolean'
description = 'Whether or not to draw the panel in front of all others.'

[SetDropTarget]
description = 'Sets the target area for dropping when an object is being dragged around this panel using the <page>dragndrop</page>.\r\n\r\nThis draws a target box of the specified size and position, until <page>Panel:DragHoverEnd</page> is called. It uses <page>Panel:DrawDragHover</page> to draw this area.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'x'
type = 'number'
description = 'The x coordinate of the top-left corner of the drop area.'
``````````
name = 'y'
type = 'number'
description = 'The y coordinate of the top-left corner of the drop area.'
``````````
name = 'width'
type = 'number'
description = 'The width of the drop area.'
``````````
name = 'height'
type = 'number'
description = 'The height of the drop area.'

[SetEnabled]
description = 'Sets the enabled state of a disable-able panel object, such as a <page>DButton</page> or <page>DTextEntry</page>.\r\n\r\nSee <page>Panel:IsEnabled</page> for a function that retrieves the "enabled" state of a panel.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'enable'
type = 'boolean'
description = 'Whether to enable or disable the panel object.'

[SetExpensiveShadow]
description = 'Adds a shadow falling to the bottom right corner of the panel\'s text. This has no effect on panels that do not derive from Label.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'distance'
type = 'number'
description = 'The distance of the shadow from the panel.'
``````````
name = 'Color'
type = 'table'
description = 'The color of the shadow. Uses the <page>Color</page>.'

[SetFGColor]
description = 'Sets the foreground color of a panel.\r\n\r\nFor a <page>Label</page> or <page>RichText</page>, this is the color of its text.\r\n\r\nThis function calls <page>Panel:SetFGColorEx</page> internally.\r\n\r\n<note>This doesn\'t apply to all VGUI elements (such as <page>DLabel</page>) and its function varies between them</note>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'r or color'
type = 'number'
description = 'The red channel of the color, or a <page>Color</page>. If you pass the latter, the following three arguments are ignored.'
``````````
name = 'g'
type = 'number'
description = 'The green channel of the color.'
``````````
name = 'b'
type = 'number'
description = 'The blue channel of the color.'
``````````
name = 'a'
type = 'number'
description = 'The alpha channel of the color.'

[SetFGColorEx]
description = '<internal></internal>Sets the foreground color of the panel.\r\n\r\nFor labels, this is the color of their text.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'r'
type = 'number'
description = 'The red channel of the color.'
``````````
name = 'g'
type = 'number'
description = 'The green channel of the color.'
``````````
name = 'b'
type = 'number'
description = 'The blue channel of the color.'
``````````
name = 'a'
type = 'number'
description = 'The alpha channel of the color.'

[SetFocusTopLevel]
description = 'Sets the panel that owns this FocusNavGroup to be the root in the focus traversal hierarchy.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'state'
type = 'boolean'
description = ''

[SetFontInternal]
description = 'Sets the font used to render this panel\'s text.\r\n\r\nTo retrieve the font used by a panel, call <page>Panel:GetFont</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'fontName'
type = 'string'
description = 'The name of the font.\r\n\r\nSee <page text="here">Default_Fonts</page> for a list of existing fonts.\r\nAlternatively, use <page>surface.CreateFont</page> to create your own custom font.'

[SetHeight]
description = 'Sets the height of the panel.\r\n\r\nCalls <page>PANEL:OnSizeChanged</page> and marks this panel for layout (<page>Panel:InvalidateLayout</page>).\r\n\r\n\r\nSee also <page>Panel:SetSize</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'height'
type = 'number'
description = 'The height to be set.'

[SetHTML]
description = 'Allows you to set HTML code within a panel.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'HTML code'
type = 'string'
description = 'The code to set.'

[SetKeyboardInputEnabled]
description = 'Allows or disallows the panel to receive keyboard focus and input. This is recursively applied to all children.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'enable'
type = 'boolean'
description = 'Whether keyboard input should be enabled for this panel.'

[SetKeyBoardInputEnabled]
description = '<deprecated>Alias of <page text="Panel:SetKeyboardInputEnabled">Panel:SetKeyboardInputEnabled(lowercase)</page></deprecated>Enables or disables the keyboard input for the panel.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'keyboardInput'
type = 'boolean'
description = 'Whether to enable or disable keyboard input.'

[SetMaximumCharCount]
description = 'Sets the maximum character count this panel should have.\r\n\r\nThis function will only work on <page>RichText</page> and <page>TextEntry</page> panels and their derivatives.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'maxChar'
type = 'number'
description = 'The new maximum amount of characters this panel is allowed to contain.'

[SetMinimumSize]
description = 'Sets the minimum dimensions of the panel or object.\r\n\r\nYou can restrict either or both values.\r\n\r\nCalling the function without arguments will remove the minimum size.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'minW'
type = 'number'
description = 'The minimum width of the object.'
``````````
name = 'minH'
type = 'number'
description = 'The minimum height of the object.'

[SetModel]
description = 'Sets the model to be displayed by <page>SpawnIcon</page>.\r\n\r\n<note>This must be called after setting size if you wish to use a different size spawnicon</note>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'ModelPath'
type = 'string'
description = 'The path of the model to set'
``````````
name = 'skin'
type = 'number'
description = 'The skin to set'
``````````
name = 'bodygroups'
type = 'string'
description = 'The body groups to set. Each single-digit number in the string represents a separate bodygroup, **up to 9 in total**.'

[SetMouseInputEnabled]
description = 'Enables or disables the mouse input for the panel.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'mouseInput'
type = 'boolean'
description = 'Whenever to enable or disable mouse input.'

[SetName]
description = 'Sets the internal name of the panel.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'name'
type = 'string'
description = 'The new name of the panel.'

[SetPaintBackgroundEnabled]
description = 'Sets whenever all the default background of the panel should be drawn or not.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'paintBackground'
type = 'boolean'
description = 'Whenever to draw the background or not.'

[SetPaintBorderEnabled]
description = 'Sets whenever all the default border of the panel should be drawn or not.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'paintBorder'
type = 'boolean'
description = 'Whenever to draw the border or not.'

[SetPaintedManually]
description = 'Enables or disables painting of the panel manually with <page>Panel:PaintManual</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'paintedManually'
type = 'boolean'
description = 'True if the panel should be painted manually.'

[SetPaintFunction]
description = '<deprecated>This function does nothing.</deprecated>\r\nThis function does nothing.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[SetParent]
description = 'Sets the parent of the panel.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'parent'
type = 'Panel'
description = 'The new parent of the panel.'

[SetPlayer]
description = 'Used by <page>AvatarImage</page> to load an avatar for given player.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'player'
type = 'Player'
description = 'The player to use avatar of.'
``````````
name = 'size'
type = 'number'
description = 'The size of the avatar to use. Acceptable sizes are 32, 64, 184.'

[SetPopupStayAtBack]
description = 'If this panel object has been made a popup with <page>Panel:MakePopup</page>, this method will prevent it from drawing in front of other panels when it receives input focus.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'stayAtBack'
type = 'boolean'
description = 'If `true`, the popup panel will not draw in front of others when it gets focus, for example when it is clicked.'

[SetPos]
description = 'Sets the position of the panel\'s top left corner.\r\n\r\nThis will trigger <page>PANEL:PerformLayout</page>. You should avoid calling this function in <page>PANEL:PerformLayout</page> to avoid infinite loops.\r\n\r\n<note>If you wish to position and re-size panels without much guesswork and have them look good on different screen resolutions, you may find <page>Panel:Dock</page> useful</note>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'posX'
type = 'number'
description = 'The x coordinate of the position.'
``````````
name = 'posY'
type = 'number'
description = 'The y coordinate of the position.'

[SetRenderInScreenshots]
description = 'Sets whenever the panel should be rendered in the next screenshot.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'renderInScreenshot'
type = 'boolean'
description = 'Whenever to render or not.'

[SetSelectable]
description = 'Sets whether the panel object can be selected or not (like icons in the Spawn Menu, holding <key>Shift</key>). If enabled, this will affect the function of a <page>DButton</page> whilst <key>Shift</key> is pressed. <page>Panel:SetSelected</page> can be used to select/deselect the object.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'selectable'
type = 'boolean'
description = 'Whether the panel object should be selectable or not.'

[SetSelected]
description = 'Sets the selected state of a selectable panel object. This functionality is set with <page>Panel:SetSelectable</page> and checked with <page>Panel:IsSelectable</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'selected'
type = 'boolean'
description = 'Whether the object should be selected or deselected. <page>Panel:IsSelected</page> can be used to determine the selected state of the object.'

[SetSelectionCanvas]
description = 'Enables the panel object for selection (much like the spawn menu).\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'selCanvas'
type = 'any'
description = 'Any value other than `nil` or `false` will enable the panel object for selection. It is recommended to pass `true`.'

[SetSize]
description = 'Sets the size of the panel.\r\n\r\nCalls <page>PANEL:OnSizeChanged</page> and marks this panel for layout (<page>Panel:InvalidateLayout</page>).\r\n\r\n\r\nSee also <page>Panel:SetWidth</page> and <page>Panel:SetHeight</page>.\r\n\r\n<note>If you wish to position and re-size panels without much guesswork and have them look good on different screen resolutions, you may find <page>Panel:Dock</page> useful</note>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'width'
type = 'number'
description = 'The width of the panel.'
``````````
name = 'height'
type = 'number'
description = 'The height of the panel.'

[SetSkin]
description = 'Sets the derma skin that the panel object will use, and refreshes all panels with <page>derma.RefreshSkins</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'skinName'
type = 'string'
description = 'The name of the skin to use. The default derma skin is `Default`.'

[SetSpawnIcon]
description = 'Sets the .png image to be displayed on a  <page>SpawnIcon</page> or the panel it is based on <page>ModelImage</page>.\r\n\r\nOnly .png images can be used with this function.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'icon'
type = 'string'
description = 'A path to the .png material, for example one of the <page>Silkicons</page> shipped with the game.'

[SetSteamID]
description = 'Used by <page>AvatarImage</page> panels to load an avatar by its 64-bit Steam ID (community ID).\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'steamid'
type = 'string'
description = 'The 64bit SteamID of the player to load avatar of'
``````````
name = 'size'
type = 'number'
description = 'The size of the avatar to use. Acceptable sizes are 32, 64, 184.'

[SetTabPosition]
description = 'When TAB is pressed, the next selectable panel in the number sequence is selected.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'position'
type = 'number'
description = ''

[SetTall]
description = 'Sets height of a panel. An alias of <page>Panel:SetHeight</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'height'
type = 'number'
description = 'Desired height to set'

[SetTerm]
description = 'Removes the panel after given time in seconds.\r\n<note>This function will not work if <page>PANEL:AnimationThink</page> is overridden, unless <page>Panel:AnimationThinkInternal</page> is called every frame.</note>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'delay'
type = 'number'
description = 'Delay in seconds after which the panel should be removed.'

[SetText]
description = 'Sets the text value of a panel object containing text, such as a <page>Label</page>, <page>TextEntry</page> or  <page>RichText</page> and their derivatives, such as <page>DLabel</page>, <page>DTextEntry</page> or <page>DButton</page>.\r\n\r\n<warning>When used on a <page>Label</page> or its derivatives ( <page>DLabel</page> and <page>DButton</page> ), it will automatically call <page>Panel:InvalidateLayout</page>, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.</warning>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'text'
type = 'string'
description = 'The text value to set.'

[SetTextInset]
description = 'Sets the left and top text margins of a text-based panel object, such as a <page>DButton</page> or <page>DLabel</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'insetX'
type = 'number'
description = 'The left margin for the text, in pixels. This will only affect centered text if the margin is greater than its x-coordinate.'
``````````
name = 'insetY'
type = 'number'
description = 'The top margin for the text, in pixels.'

[SetToFullHeight]
description = 'Sets the height of a <page>RichText</page> element to accommodate the text inside.\r\n\r\n<note>This function internally relies on <page>Panel:GetNumLines</page>, so it should be called at least a couple frames after modifying the text using <page>Panel:AppendText</page></note>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[SetTooltip]
description = 'Sets the tooltip to be displayed when a player hovers over the panel object with their cursor.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'str'
type = 'string'
description = 'The text to be displayed in the tooltip. Set false to disable it.'

[SetTooltipPanel]
description = 'Sets the panel to be displayed as contents of a <page>DTooltip</page> when a player hovers over the panel object with their cursor. See <page>Panel:SetTooltipPanelOverride</page> if you are looking to override <page>DTooltip</page> itself.\r\n\r\n<note><page>Panel:SetTooltip</page> will override this functionality.</note>\r\n\r\n<warning>Calling this from <page>PANEL:OnCursorEntered</page> is too late! The tooltip will not be displayed or be updated.</warning>\r\n<warning>Given panel or the previously set one will NOT be automatically removed.</warning>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'tooltipPanel'
type = 'Panel'
description = 'The panel to use as the tooltip.'

[SetTooltipPanelOverride]
description = 'Sets the panel class to be created instead of <page>DTooltip</page> when the player hovers over this panel and a tooltip needs creating.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'override'
type = 'string'
description = 'The panel class to override the default <page>DTooltip</page>. The new panel class must have the following methods:\r\n* <page text="SetText">Panel:SetText</page> - If you are using <page>Panel:SetTooltip</page>.\r\n* <page text="SetContents">DTooltip:SetContents</page> - If you are using <page>Panel:SetTooltipPanel</page>.\r\n* <page text="OpenForPanel">DTooltip:OpenForPanel</page> - A "hook" type function that gets called shortly after creation (and after the above 2) to open and position the tooltip. You can see this logic in `lua/includes/util/tooltips.lua`.'

[SetUnderlineFont]
description = 'Sets the underlined font for use by clickable text in a <page>RichText</page>. See also <page>Panel:InsertClickableTextStart</page>\r\n\r\nThis function will only work on <page>RichText</page> panels.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'fontName'
type = 'string'
description = 'The name of the font.\r\n\r\nSee <page text="here">Default_Fonts</page> for a list of existing fonts.\r\nAlternatively, use <page>surface.CreateFont</page> to create your own custom font.'

[SetURL]
description = 'Sets the URL of a link-based panel such as <page>DLabelURL</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'url'
type = 'string'
description = 'The URL to set. This **must** begin with `http://`.'

[SetVerticalScrollbarEnabled]
description = 'Sets the visibility of the vertical scrollbar.\r\n\r\nWorks for <page>RichText</page> and <page>TextEntry</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'display'
type = 'boolean'
description = 'True to display the vertical text scroll bar, false to hide it.'

[SetVisible]
description = 'Sets the "visibility" of the panel.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'visible'
type = 'boolean'
description = 'The visibility of the panel.'

[SetWide]
description = 'Sets width of a panel. An alias of <page>Panel:SetWidth</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'width'
type = 'number'
description = 'Desired width to set'

[SetWidth]
description = 'Sets the width of the panel.\r\n\r\nCalls <page>PANEL:OnSizeChanged</page> and marks this panel for layout (<page>Panel:InvalidateLayout</page>).\r\n\r\n\r\nSee also <page>Panel:SetSize</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'width'
type = 'number'
description = 'The new width of the panel.'

[SetWorldClicker]
description = 'This makes it so that when you\'re hovering over this panel you can `click` on the world. Your viewmodel will aim etc. This is primarily used for the Sandbox context menu.\r\n\r\n<bug issue="3467">This function doesn\'t scale with custom FOV specified by <page>GM:CalcView</page> or <page>WEAPON:TranslateFOV</page>.</bug>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'enabled'
type = 'boolean'
description = ''

[SetWrap]
description = 'Sets whether text wrapping should be enabled or disabled on <page>Label</page> and <page>DLabel</page> panels.\r\nUse <page>DLabel:SetAutoStretchVertical</page> to automatically correct vertical size; <page>Panel:SizeToContents</page> will not set the correct height.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'wrap'
type = 'boolean'
description = 'True to enable text wrapping, false otherwise.'

[SetZPos]
description = 'Sets the panels z position which determines the rendering order.\r\n\r\nPanels with lower z positions appear behind panels with higher z positions.\r\n\r\nThis also controls in which order panels docked with <page>Panel:Dock</page> appears.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'zIndex'
type = 'number'
description = 'The z position of the panel. <br>\r\nCan\'t be lower than -32768 or higher than 32767.'

[Show]
description = 'Makes a panel visible.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[SizeTo]
description = 'Uses animation to resize the panel to the specified size.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'sizeW'
type = 'number'
description = 'The target width of the panel. Use -1 to retain the current width.'
``````````
name = 'sizeH'
type = 'number'
description = 'The target height of the panel. Use -1 to retain the current height.'
``````````
name = 'time'
type = 'number'
description = 'The time to perform the animation within.'
``````````
name = 'delay'
type = 'number'
description = 'The delay before the animation starts.'
``````````
name = 'ease'
type = 'number'
description = 'Easing of the start and/or end speed of the animation. See <page>Panel:NewAnimation</page> for how this works.'
``````````
name = 'callback'
type = 'function'
description = 'The function to be called once the animation finishes. Arguments are:\r\n* <page>table</page> animData - The <page>AnimationData that was used.</page>\r\n* <page>Panel</page> pnl - The panel object that was resized.'

[SizeToChildren]
description = 'Resizes the panel to fit the bounds of its children.\r\n\r\n<note>Your panel must have its layout updated (<page>Panel:InvalidateLayout</page>) for this function to work properly.</note>\r\n<note>The sizeW and sizeH parameters are false by default. Therefore, calling this function with no arguments will result in a no-op.</note>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'sizeW'
type = 'boolean'
description = 'Resize with width of the panel.'
``````````
name = 'sizeH'
type = 'boolean'
description = 'Resize the height of the panel.'

[SizeToContents]
description = 'Resizes the panel so that its width and height fit all of the content inside.\r\n\r\n<note>Only works on <page>Label</page> derived panels such as <page>DLabel</page> by default, and on any panel that manually implemented the <page>Panel:SizeToContents</page> method, such as <page>DNumberWang</page> and <page>DImage</page>.</note>\r\n\r\n<warning>You must call this function **AFTER** setting text/font, adjusting child panels or otherwise altering the panel.</warning>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[SizeToContentsX]
description = 'Resizes the panel object\'s width to accommodate all child objects/contents.\r\n\r\nOnly works on <page>Label</page> derived panels such as <page>DLabel</page> by default, and on any panel that manually implemented <page>Panel:GetContentSize</page> method.\r\n\r\n<note>You must call this function **AFTER** setting text/font or adjusting child panels.</note>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'addVal'
type = 'number'
description = 'The number of extra pixels to add to the width. Can be a negative number, to reduce the width.'

[SizeToContentsY]
description = 'Resizes the panel object\'s height to accommodate all child objects/contents.\r\n\r\nOnly works on <page>Label</page> derived panels such as <page>DLabel</page> by default, and on any panel that manually implemented <page>Panel:GetContentSize</page> method.\r\n\r\n<note>You must call this function **AFTER** setting text/font or adjusting child panels.</note>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'addVal'
type = 'number'
description = 'The number of extra pixels to add to the height.'

[SlideDown]
description = 'Slides the panel in from above.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'Length'
type = 'number'
description = 'Time to complete the animation.'

[SlideUp]
description = 'Slides the panel out to the top.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'Length'
type = 'number'
description = 'Time to complete the animation.'

[StartBoxSelection]
description = 'Begins a box selection, enables mouse capture for the panel object, and sets the start point of the selection box to the mouse cursor\'s position, relative to this object. For this to work, either the object or its parent must be enabled as a selection canvas. This is set using <page>Panel:SetSelectionCanvas</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[Stop]
description = 'Stops all panel animations by clearing its animation list. This also clears all delayed animations.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[StretchBottomTo]
description = 'Resizes the panel object\'s height so that its bottom is aligned with the top of the passed panel. An offset greater than zero will reduce the panel\'s height to leave a gap between it and the passed panel.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'tgtPanel'
type = 'Panel'
description = 'The panel to align the bottom of this one with.'
``````````
name = 'offset'
type = 'number'
description = 'The gap to leave between this and the passed panel. Negative values will cause the panel\'s height to increase, forming an overlap.'

[StretchRightTo]
description = 'Resizes the panel object\'s width so that its right edge is aligned with the left of the passed panel. An offset greater than zero will reduce the panel\'s width to leave a gap between it and the passed panel.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'tgtPanel'
type = 'Panel'
description = 'The panel to align the right edge of this one with.'
``````````
name = 'offset'
type = 'number'
description = 'The gap to leave between this and the passed panel. Negative values will cause the panel\'s width to increase, forming an overlap.'

[StretchToParent]
description = 'Sets the dimensions of the panel to fill its parent. It will only stretch in directions that aren\'t nil.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
``````````
name = 'offsetLeft'
type = 'number'
description = 'The left offset to the parent.'
``````````
name = 'offsetTop'
type = 'number'
description = 'The top offset to the parent.'
``````````
name = 'offsetRight'
type = 'number'
description = 'The right offset to the parent.'
``````````
name = 'offsetBottom'
type = 'number'
description = 'The bottom offset to the parent.'

[ToggleSelection]
description = 'Toggles the selected state of a selectable panel object. This functionality is set with <page>Panel:SetSelectable</page> and checked with <page>Panel:IsSelectable</page>. To check whether the object is selected or not, <page>Panel:IsSelected</page> is used.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[ToggleVisible]
description = 'Toggles the visibility of a panel and all its children.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[Undo]
description = 'Restores the last saved state (caret position and the text inside) of a <page>TextEntry</page>. Should act identically to pressing CTRL+Z in a <page>TextEntry</page>.\r\n\r\nSee also <page>Panel:SaveUndoState</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[UnselectAll]
description = 'Recursively deselects this panel object and all of its children. This will cascade to all child objects at every level below the parent.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[UpdateHTMLTexture]
description = 'Forcibly updates the panels\' HTML Material, similar to when Paint is called on it.<br>This is only useful if the panel is not normally visible, i.e the panel exists purely for its HTML Material.\r\n<note>Only works on with panels that have a HTML Material. See <page>Panel:GetHTMLMaterial</page> for more details.</note>\r\n<note>A good place to call this is in the <page>GM:PreRender</page> hook</note>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'

[Valid]
description = '<deprecated>Use <page>Panel:IsValid</page> instead.</deprecated>Returns if a given panel is valid or not.\r\n\r\n**Returns:** Whether the panel is valid or not, true being it is, false being it isn\'t.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Panel'
[[.returns]]
type = 'boolean'

