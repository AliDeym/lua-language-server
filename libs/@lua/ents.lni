[ents]
type = 'table'
[[.source]]
type = 'global'
``````````
type = 'library'
name = 'ents'

<default>
type = 'function'
parent = {
	1 = {
		type = 'global',
		name = 'ents'
	},
	2 = {
		type = 'library',
		name = 'ents'
	}
}

[Create]
description = 'Creates an entity. This function will fail and return NULL if the networked-edict limit is hit (around 8176), or the provided entity class doesn\'t exist.\r\n\r\n<warning>Do not use before <page>GM:InitPostEntity</page> has been called, otherwise the server will crash!\r\nIf you need to perform entity creation when the game starts, create a hook for <page>GM:InitPostEntity</page> and do it there.</warning>\r\n\r\n**Returns:** The created entity, or NULL if failed\r\n\r\n**Scope:** Server'
[[.args]]
name = 'class'
type = 'string'
description = 'The classname of the entity to create'
[[.returns]]
type = 'Entity'

[CreateClientProp]
description = 'Creates a clientside only prop. See also <page>Global.ClientsideModel</page>.\r\n\r\nFor physics to work you **must** use the _model_ argument, a simple `SetModel` call will not be enough.\r\n\r\n**Returns:** Created entity. (C_PhysPropClientside)\r\n\r\n**Scope:** Client'
[[.args]]
name = 'model'
type = 'string'
description = 'The model for the entity to be created.'
[[.returns]]
type = 'Entity'

[CreateClientside]
description = 'Creates a clientside only scripted entity. The scripted entity must be of "anim" type.\r\n\r\n**Returns:** Created entity.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'class'
type = 'string'
description = 'The class name of the entity to create.'
[[.returns]]
type = 'Entity'

[FindAlongRay]
description = 'Returns a table of all entities along the ray. The ray does not stop on collisions, meaning it will go through walls/entities.\r\n\r\n**Returns:** Table of the found entities.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'start'
type = 'Vector'
description = 'The start position of the ray'
``````````
name = 'end'
type = 'Vector'
description = 'The end position of the ray'
``````````
name = 'mins'
type = 'Vector'
description = 'The mins corner of the ray'
``````````
name = 'maxs'
type = 'Vector'
description = 'The maxs corner of the ray'
[[.returns]]
type = 'table'

[FindByClass]
description = 'Gets all entities with the given class, supports wildcards. This works internally by iterating over <page>ents.GetAll</page>. Even if internally ents.GetAll is used, It is faster to use ents.FindByClass than ents.GetAll with a single class comparison.\r\n\r\n<note>Asterisks (*) are the only wildcard supported.</note>\r\n\r\n**Returns:** A table containing all found entities\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'class'
type = 'string'
description = 'The class of the entities to find.'
[[.returns]]
type = 'table'

[FindByClassAndParent]
description = 'Finds all entities that are of given class and are children of given entity. This works internally by iterating over <page>ents.GetAll</page>.\r\n\r\n**Returns:** A table of found entities or nil if none are found\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'class'
type = 'string'
description = 'The class of entities to search for'
``````````
name = 'parent'
type = 'Entity'
description = 'Parent of entities that are being searched for'
[[.returns]]
type = 'table'

[FindByModel]
description = 'Gets all entities with the given model, supports wildcards. This works internally by iterating over <page>ents.GetAll</page>.\r\n\r\n<bug issue="2872">This currently only supports trailing asterisks (*) for wildcards.</bug>\r\n\r\n**Returns:** A table of all found entities.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'model'
type = 'string'
description = 'The model of the entities to find.'
[[.returns]]
type = 'table'

[FindByName]
description = 'Gets all entities with the given hammer targetname. This works internally by iterating over <page>ents.GetAll</page>.\r\n\r\n<note>A player\'s Name is his nickname, see <page>Player:GetName</page></note>\r\n\r\nDoesn\'t do anything on client.\r\n\r\n**Returns:** A table of all found entities\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'name'
type = 'string'
description = 'The targetname to look for'
[[.returns]]
type = 'table'

[FindInBox]
description = 'Returns all entities within the specified box.\r\n\r\n<note>Clientside entities will not be returned by this function.</note>\r\n\r\n<warning>There is a limit of 512 entities for the output!</warning>\r\n\r\n**Returns:** A table of all found entities.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'boxMins'
type = 'Vector'
description = 'The box minimum coordinates.'
``````````
name = 'boxMaxs'
type = 'Vector'
description = 'The box maximum coordinates.'
[[.returns]]
type = 'table'

[FindInCone]
description = '<img src="ents.FindInCone.png" alt="2D_visualization_of_the_actual_shape_of_the_cone,_click_to_enlarge">\r\nFinds and returns all entities within the specified cone. Only entities whose <page>Entity:WorldSpaceCenter</page> is within the cone are considered to be in it.\r\n\r\nThe "cone" is actually a conical "slice" of an axis-aligned box (see: <page>ents.FindInBox</page>). The image to the right shows approximately how this function would look in 2D. Due to this, the entity may be farther than the specified range!\r\n\r\n<note>Clientside entities will not be returned by this function.</note>\r\n\r\n<warning>If there are more than 512 entities in the axis-aligned box around the origin, then the result may be incomplete!</warning>\r\n\r\n**Returns:** A table of all found <page>Entity</page>s.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'origin'
type = 'Vector'
description = 'The tip of the cone.'
``````````
name = 'normal'
type = 'Vector'
description = 'Direction of the cone.'
``````````
name = 'range'
type = 'number'
description = 'The range of the cone/box around the origin.\r\n<note> The function internally adds 1 to this argument before using it. </note>'
``````````
name = 'angle_cos'
type = 'number'
description = 'The <page text="cosine">math.cos</page> of the angle between the center of the cone to its edges, which is half the overall angle of the cone.\r\n\r\n1 makes a 0° cone, 0.707 makes approximately 90°, 0 makes 180°, and so on.'
[[.returns]]
type = 'table'

[FindInPVS]
description = 'Finds all entities that lie within a [PVS](https://developer.valvesoftware.com/wiki/PVS).\r\n\r\n<note>The function won\'t take in to account <page>Global.AddOriginToPVS</page> and the like.</note>\r\n\r\n**Returns:** The found <page>Entity</page>s.\r\n\r\n**Scope:** Server'
[[.args]]
name = 'viewPoint'
type = 'any'
description = '<page>Entity</page> or <page>Vector</page> to find entities within the PVS of. If a player is given, this function will use the player\'s view entity.'
[[.returns]]
type = 'table'

[FindInSphere]
description = 'Gets all entities within the specified sphere.\r\n\r\n<note>Clientside entities will not be returned by this function.</note>\r\n\r\n**Returns:** A table of all found <page>Entity</page>s. Has a limit of 1024 entities.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'origin'
type = 'Vector'
description = 'Center of the sphere.'
``````````
name = 'radius'
type = 'number'
description = 'Radius of the sphere.'
[[.returns]]
type = 'table'

[FireTargets]
description = 'Fires a use event.\r\n\r\n**Scope:** Server'
[[.args]]
name = 'target'
type = 'string'
description = 'Name of the target entity.'
``````````
name = 'activator'
type = 'Entity'
description = 'Activator of the event.'
``````````
name = 'caller'
type = 'Entity'
description = 'Caller of the event.'
``````````
name = 'usetype'
type = 'number'
description = 'Use type. See the <page>Enums/USE</page>.'
``````````
name = 'value'
type = 'number'
description = 'This value is passed to <page>ENTITY:Use</page>, but isn\'t used by any default entities in the engine.'

[GetAll]
description = 'Returns a table of all existing entities. The table is sequential\r\n\r\n**Returns:** Table of all existing <page>Entity</page>s.\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'table'

[GetByIndex]
description = 'Returns an entity by its index. Same as <page>Global.Entity</page>.\r\n\r\n**Returns:** The entity if it exists.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'entIdx'
type = 'number'
description = 'The index of the entity.'
[[.returns]]
type = 'Entity'

[GetCount]
description = 'Gives you the amount of currently existing entities.\r\nSimilar to #<page>ents.GetAll</page> but with much better performance.\r\n\r\n**Returns:** Number of entities\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'IncludeKillMe'
type = 'boolean'
description = 'Include entities with the FL_KILLME flag. This will skip an internal loop, and the function will be more efficient as a byproduct.'
[[.returns]]
type = 'number'

[GetEdictCount]
description = 'Returns the amount of networked entities, which is limited to 8192. <page>ents.Create</page> will fail somewhere between 8064 and 8176 - this can vary based on the amount of existing temp ents.\r\n\r\n**Returns:** Number of networked entities\r\n\r\n**Scope:** Server'
[[.returns]]
type = 'number'

[GetMapCreatedEntity]
description = 'Returns entity that has given <page>Entity:MapCreationID</page>.\r\n\r\n**Returns:** Found entity\r\n\r\n**Scope:** Server'
[[.args]]
name = 'id'
type = 'number'
description = 'Entity\'s creation id'
[[.returns]]
type = 'Entity'

