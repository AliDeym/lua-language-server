<default>
type = 'function'

[arg]
type = 'table'

[AccessorFunc]
description = 'Adds simple Get/Set accessor functions on the specified table.\r\nCan also force the value to be set to a number, bool or string.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'tab'
type = 'table'
description = 'The table to add the accessor functions too.'
``````````
name = 'key'
type = 'any'
description = 'The key of the table to be get/set.'
``````````
name = 'name'
type = 'string'
description = 'The name of the functions (will be prefixed with Get and Set).'
``````````
name = 'force'
type = 'number'
description = 'The type the setter should force to (uses <page>Enums/FORCE</page>).'

[Add_NPC_Class]
description = 'Defines a global entity class variable with an automatic value in order to prevent collisions with other <page>Enums/CLASS</page>. You should prefix your variable with CLASS_ for consistency.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'name'
type = 'string'
description = 'The name of the new enum/global variable.'

[AddBackgroundImage]
description = 'Adds the specified image path to the main menu background pool. Image can be png or jpeg.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'path'
type = 'string'
description = 'Path to the image.'

[AddConsoleCommand]
description = '<internal>Use <page>concommand.Add</page> instead.</internal>Tells the engine to register a console command. If the command was ran, the engine calls <page>concommand.Run</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'name'
type = 'string'
description = 'The name of the console command to add.'
``````````
name = 'helpText'
type = 'string'
description = 'The help text.'
``````````
name = 'flags'
type = 'number'
description = 'Concommand flags using <page>Enums/FCVAR</page>'

[AddCSLuaFile]
description = 'Marks a Lua file to be sent to clients when they join the server. Doesn\'t do anything on the client - this means you can use it in a shared file without problems.\r\n\r\n<warning>If the file trying to be added is empty, an error will occur, and the file will not be sent to the client.</warning>\r\n<warning>The string cannot have whitespace.</warning>\r\n\r\n\r\n<note>This function is not needed for scripts located in **lua/autorun/** and **lua/autorun/client/**: they are automatically sent to clients.</note>\r\n<note>You can add up to 8192 files.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'file'
type = 'string'
description = 'The name/path to the Lua file that should be sent, relative to the garrysmod/lua folder. If no parameter is specified, it sends the current file.\r\n\r\nThe file path can be relative to the script it is ran from. For example, if your script is in lua/myfolder/stuff.lua, calling <page>Global.AddCSLuaFile</page>("otherstuff.lua") and <page>Global.AddCSLuaFile</page>("myfolder/otherstuff.lua") is the same thing.'

[AddonMaterial]
description = 'Loads the specified image from the /cache folder, used in combination <page>steamworks.Download</page>.\r\nMost addons will provide a 512x512 png image.\r\n\r\n**Returns:** The material, returns nil if the cached file is not an image.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'name'
type = 'string'
description = 'The name of the file.'
[[.returns]]
type = 'IMaterial'

[AddOriginToPVS]
description = 'Adds the specified vector to the PVS which is currently building. This allows all objects in visleafs visible from that vector to be drawn.\r\n\r\n**Scope:** Server'
[[.args]]
name = 'position'
type = 'Vector'
description = 'The origin to add.'

[AddWorldTip]
description = 'This function creates a World Tip, similar to the one shown when aiming at a Thruster where it shows you its force.\r\n\r\nThis function will make a World Tip that will only last 50 milliseconds (1/20th of a second), so you must call it continuously as long as you want the World Tip to be shown. It is common to call it inside a Think hook.\r\n\r\nContrary to what the function\'s name implies, it is impossible to create more than one World Tip at the same time. A new World Tip will overwrite the old one, so only use this function when you know nothing else will also be using it.\r\n\r\nSee <page>SANDBOX:PaintWorldTips</page> for more information.\r\n\r\n<note>This function is only available in Sandbox and its derivatives</note>\r\n\r\n**Scope:** Client'
[[.args]]
name = 'entindex'
type = 'number'
description = '**This argument is no longer used**; it has no effect on anything. You can use nil in this argument.'
``````````
name = 'text'
type = 'string'
description = 'The text for the world tip to display.'
``````````
name = 'dieTime'
type = 'number'
description = '**This argument is no longer used**; when you add a World Tip it will always last only 0.05 seconds. You can use nil in this argument.'
``````````
name = 'pos'
type = 'Vector'
description = 'Where in the world you want the World Tip to be drawn. If you add a valid Entity in the next argument, this argument will have no effect on the actual World Tip.'
``````````
name = 'ent'
type = 'Entity'
description = 'Which entity you want to associate with the World Tip. This argument is optional. If set to a valid entity, this will override the position set in `pos` with the Entity\'s position.'

[Angle]
description = 'Creates an <page>Angle</page> object.\r\n\r\n**Returns:** Created angle\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'pitch'
type = 'number'
description = 'The pitch value of the angle.\r\n\r\n\r\nIf this is an <page>Angle</page>, this function will return a copy of the given angle.\r\n\r\n\r\nIf this is a <page>string</page>, this function will try to parse the string as a angle. If it fails, it returns a 0 angle.\r\n(See examples)'
``````````
name = 'yaw'
type = 'number'
description = 'The yaw value of the angle.'
``````````
name = 'roll'
type = 'number'
description = 'The roll value of the angle.'
[[.returns]]
type = 'Angle'

[AngleRand]
description = 'Returns an angle with a randomized pitch, yaw, and roll between min(inclusive), max(exclusive).\r\n\r\n**Returns:** The randomly generated angle.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'min'
type = 'number'
description = 'Min bound inclusive.'
``````````
name = 'max'
type = 'number'
description = 'Max bound exclusive.'
[[.returns]]
type = 'Angle'

[assert]
description = 'If the result of the first argument is false or nil, an error is thrown with the second argument as the message.\r\n\r\n**Returns:** If successful, returns the first argument.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'expression'
type = 'any'
description = 'The expression to assert.'
``````````
name = 'errorMessage'
type = 'string'
description = 'The error message to throw when assertion fails. This is only type-checked if the assertion fails.'
``````````
name = 'returns'
type = 'vararg'
description = 'Any arguments past the error message will be returned by a successful assert.'
[[.returns]]
type = 'any'

[BroadcastLua]
description = 'Sends the specified Lua code to all connected clients and executes it.\r\n<note>If you need to use this function more than once consider using <page>net</page> library. Send net message and make the entire code you want to execute in <page>net.Receive</page> on client.</note>\r\n\r\n**Scope:** Server'
[[.args]]
name = 'code'
type = 'string'
description = 'The code to be executed. Capped at length of 254 characters.'

[BuildNetworkedVarsTable]
description = 'Dumps the networked variables of all entities into one table and returns it.\r\n\r\n**Returns:** Format:\r\n* key = <page>Entity</page> for NWVars or <page>number</page> (always 0) for global vars\r\n* value = <page>table</page> formatted as:\r\n* key = <page>string</page> var name\r\n* value = any type var value\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'table'

[CanAddServerToFavorites]
description = '<internal></internal>\r\n\r\nUsed internally to check if the current server the player is on can be added to favorites or not. Does not check if the server is ALREADY in the favorites.\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'boolean'

[CancelLoading]
description = 'Aborts joining of the server you are currently joining.\r\n\r\n**Scope:** Client'

[ChangeBackground]
description = 'Sets the active main menu background image to a random entry from the background images pool. Images are added with <page>Global.AddBackgroundImage</page>.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'currentgm'
type = 'string'
description = 'Apparently does nothing.'

[ChangeTooltip]
description = 'Automatically called by the engine when a panel is hovered over with the mouse\r\n\r\n**Scope:** Client'
[[.args]]
name = 'panel'
type = 'Panel'
description = 'Panel that has been hovered over'

[ClearBackgroundImages]
description = 'Empties the pool of main menu background images.\r\n\r\n**Scope:** Client'

[ClientsideModel]
description = 'Creates a non physical entity that only exists on the client. See also <page>ents.CreateClientProp</page>.\r\n\r\n<bug issue="861">Parented clientside models will become detached if the parent entity leaves the PVS.</bug>\r\n\r\n<bug issue="1387">Clientside entities are not garbage-collected, thus you must store a reference to the object and call <page>CSEnt:Remove</page> manually.</bug>\r\n\r\n<bug issue="3184">Clientside models will occasionally delete themselves during high server lag.</bug>\r\n\r\n**Returns:** Created client-side model. ( C_BaseFlex )\r\n\r\n**Scope:** Client'
[[.args]]
name = 'model'
type = 'string'
description = 'The file path to the model.\r\n\r\n<warning>Model must be precached with <page>util.PrecacheModel</page> on the server before usage.</warning>'
``````````
name = 'renderGroup'
type = 'number'
description = 'The render group of the entity for the clientside leaf system, see <page>Enums/RENDERGROUP</page>.'
[[.returns]]
type = 'CSEnt'

[ClientsideRagdoll]
description = 'Creates a fully clientside ragdoll.\r\n\r\n<note>The ragdoll initially starts as hidden and with shadows disabled, see the example for how to enable it.\r\n\r\nThere\'s no need to call <page>Entity:Spawn</page> on this entity.\r\n\r\nThe physics won\'t initialize at all if the model hasn\'t been precached serverside first.</note>\r\n\r\n<bug issue="1387">Clientside entities are not garbage-collected, thus you must store a reference to the object and call <page>CSEnt:Remove</page> manually.</bug>\r\n\r\n**Returns:** The newly created client-side ragdoll. ( C_ClientRagdoll )\r\n\r\n**Scope:** Client'
[[.args]]
name = 'model'
type = 'string'
description = 'The file path to the model.\r\n\r\n<warning>Model must be precached with <page>util.PrecacheModel</page> on the server before usage.</warning>'
``````````
name = 'renderGroup'
type = 'number'
description = 'The <page>Enums/RENDERGROUP</page> to assign.'
[[.returns]]
type = 'CSEnt'

[ClientsideScene]
description = 'Creates a scene entity based on the scene name and the entity.\r\n\r\n**Returns:** C_SceneEntity\r\n\r\n**Scope:** Client'
[[.args]]
name = 'name'
type = 'string'
description = 'The name of the scene.'
``````````
name = 'targetEnt'
type = 'Entity'
description = 'The entity to play the scene on.'
[[.returns]]
type = 'CSEnt'

[CloseDermaMenus]
description = 'Closes all Derma menus that have been passed to <page>Global.RegisterDermaMenuForClose</page> and calls <page>GM:CloseDermaMenus</page>\r\n\r\n**Scope:** Client'

[collectgarbage]
description = 'Executes the specified action on the garbage collector.\r\n\r\n**Returns:** If the action is count this is the number of kilobytes of memory used by Lua.\r\nIf the action is step this is true if a garbage collection cycle was finished.\r\n\r\nIf the action is setpause this is the previous value for the GC\'s pause.\r\nIf the action is setstepmul this is the previous value for the GC\'s step.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'action'
type = 'string'
description = 'The action to run.\r\n\r\nValid actions are `collect`, `stop`, `restart`, `count`, `step`, `setpause` and `setstepmul`.'
``````````
name = 'arg'
type = 'number'
description = 'The argument of the specified action, only applicable for `step`, `setpause` and `setstepmul`.'
[[.returns]]
type = 'any'

[Color]
description = 'Creates a <page>Color</page>.\r\n\r\n**Returns:** The created <page>Color</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'r'
type = 'number'
description = 'An integer from 0-255 describing the red value of the color.'
``````````
name = 'g'
type = 'number'
description = 'An integer from 0-255 describing the green value of the color.'
``````````
name = 'b'
type = 'number'
description = 'An integer from 0-255 describing the blue value of the color.'
``````````
name = 'a'
type = 'number'
description = 'An integer from 0-255 describing the alpha (transparency) of the color.'
[[.returns]]
type = 'table'

[ColorAlpha]
description = 'Returns a new <page>Color</page> with the RGB components of the given <page>Color</page> and the alpha value specified.\r\n\r\n**Returns:** The new <page>Color</page> with the modified alpha value\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'color'
type = 'table'
description = 'The <page>Color</page> from which to take RGB values. This color will not be modified.'
``````````
name = 'alpha'
type = 'number'
description = 'The new alpha value, a number between 0 and 255. Values above 255 will be clamped.'
[[.returns]]
type = 'table'

[ColorRand]
description = 'Creates a <page>Color</page> with randomized red, green, and blue components. If the alpha argument is true, alpha will also be randomized.\r\n\r\n**Returns:** The created <page>Color</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'a'
type = 'boolean'
description = 'Should alpha be randomized.'
[[.returns]]
type = 'table'

[ColorToHSL]
description = 'Converts a <page>Color</page> into HSL color space.\r\n\r\n**Returns:** The hue in degrees `[0, 360]`.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'color'
type = 'table'
description = 'The <page>Color</page>.'
[[.returns]]
type = 'number'

[ColorToHSV]
description = 'Converts a <page>Color</page> into HSV color space.\r\n\r\n**Returns:** The hue in degrees `[0, 360]`.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'color'
type = 'table'
description = 'The <page>Color</page>.'
[[.returns]]
type = 'number'

[CompileFile]
description = 'Attempts to compile the given file. If successful, returns a function that can be called to perform the actual execution of the script.\r\n\r\n**Returns:** The function which executes the script.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'path'
type = 'string'
description = 'Path to the file, relative to the garrysmod/lua/ directory.'
[[.returns]]
type = 'function'

[CompileString]
description = 'This function will compile the code argument as lua code and return a function that will execute that code.\r\n\r\nPlease note that this function will not automatically execute the given code after compiling it.\r\n\r\n**Returns:** A function that, when called, will execute the given code.\r\n\r\nReturns the error string if there was a Lua error and third argument is false.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'code'
type = 'string'
description = 'The code to compile.'
``````````
name = 'identifier'
type = 'string'
description = 'An identifier in case an error is thrown. (The same identifier can be used multiple times)'
``````````
name = 'HandleError'
type = 'boolean'
description = 'If false this function will return an error string instead of throwing an error.'
[[.returns]]
type = 'function'

[ConsoleAutoComplete]
description = 'Returns a table of console command names beginning with the given text.\r\n\r\n**Returns:** Table of console command names.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'text'
type = 'string'
description = 'Text that the console commands must begin with.'
[[.returns]]
type = 'table'

[ConVarExists]
description = 'Returns whether a <page>ConVar</page> with the given name exists or not\r\n\r\n**Returns:** True if the <page>ConVar</page> exists, false otherwise.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'name'
type = 'string'
description = 'Name of the <page>ConVar</page>.'
[[.returns]]
type = 'boolean'

[CreateClientConVar]
description = 'Makes a clientside-only console variable\r\n\r\n<note>This function is a wrapper of <page>Global.CreateConVar</page>, with the difference being that FCVAR_ARCHIVE and FCVAR_USERINFO are added automatically when **shouldsave** and **userinfo** are true, respectively.</note>\r\n\r\nAlthough this function is shared, it should only be used clientside.\r\n\r\n**Returns:** Created convar.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'name'
type = 'string'
description = 'Name of the ConVar to be created and able to be accessed.\r\n\r\nThis cannot be a name of existing console command or console variable. It will silently fail if it is.'
``````````
name = 'default'
type = 'string'
description = 'Default value of the ConVar.'
``````````
name = 'shouldsave'
type = 'boolean'
description = 'Should the ConVar be saved across sessions'
``````````
name = 'userinfo'
type = 'boolean'
description = 'Should the ConVar and its containing data be sent to the server when it has changed. This make the convar accessible from server using <page>Player:GetInfoNum</page> and similar functions.'
``````````
name = 'helptext'
type = 'string'
description = 'Help text to display in the console.'
``````````
name = 'min'
type = 'number'
description = 'If set, the convar cannot be changed to a number lower than this value.'
``````````
name = 'max'
type = 'number'
description = 'If set, the convar cannot be changed to a number higher than this value.'
[[.returns]]
type = 'ConVar'

[CreateConVar]
description = 'Creates a console variable (<page>ConVar</page>), in general these are for things like gamemode/server settings.\r\n\r\n**Returns:** The convar created.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'name'
type = 'string'
description = 'Name of the <page>ConVar</page>.\r\n\r\nThis cannot be a name of an engine console command or console variable. It will silently fail if it is. If it is the same name as another lua ConVar, it will return that ConVar object.'
``````````
name = 'value'
type = 'string'
description = 'Default value of the convar. Can also be a number.'
``````````
name = 'flags'
type = 'number'
description = 'Flags of the convar, see <page>Enums/FCVAR</page>, either as bitflag or as table.'
``````````
name = 'helptext'
type = 'string'
description = 'The help text to show in the console.'
``````````
name = 'min'
type = 'number'
description = 'If set, the ConVar cannot be changed to a number lower than this value.'
``````````
name = 'max'
type = 'number'
description = 'If set, the ConVar cannot be changed to a number higher than this value.'
[[.returns]]
type = 'ConVar'

[CreateMaterial]
description = 'Creates a new material with the specified name and shader.\r\n\r\n<note>Materials created with this function can be used in <page>Entity:SetMaterial</page> and <page>Entity:SetSubMaterial</page> by prepending a "!" to their material name argument.</note>\r\n\r\n<bug issue="1531">.pngs must be loaded with <page>Global.Material</page> before being used with this function.</bug>\r\n\r\n<bug issue="2511">This does not work with [patch materials](https://developer.valvesoftware.com/wiki/Patch).</bug>\r\n\r\n<bug issue="3103">This will not create a new material if another material object with the same name already exists.</bug>\r\n\r\n**Returns:** Created material\r\n\r\n**Scope:** Client'
[[.args]]
name = 'name'
type = 'string'
description = 'The material name. Must be unique.'
``````````
name = 'shaderName'
type = 'string'
description = 'The shader name. See <page>Shaders</page>.'
``````````
name = 'materialData'
type = 'table'
description = 'Key-value table that contains shader parameters and proxies.\r\n\r\n* See: [List of Shader Parameters on Valve Developers Wiki](https://developer.valvesoftware.com/wiki/Category:List_of_Shader_Parameters) and each shader\'s page from .\r\n\r\n<note>Unlike <page>IMaterial:SetTexture</page>, this table will not accept <page>ITexture</page> values. Instead, use the texture\'s name (see <page>ITexture:GetName</page>).</note>'
[[.returns]]
type = 'IMaterial'

[CreateParticleSystem]
description = 'Creates a new particle system.\r\n\r\n<note>The particle effect must be precached with <page>Global.PrecacheParticleSystem</page> and the file its from must be added via <page>game.AddParticles</page> before it can be used!</note>\r\n\r\n**Returns:** The created particle system.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'ent'
type = 'Entity'
description = 'The entity to attach the control point to.'
``````````
name = 'effect'
type = 'string'
description = 'The name of the effect to create. It must be precached.'
``````````
name = 'partAttachment'
type = 'number'
description = 'See <page>Enums/PATTACH</page>.'
``````````
name = 'entAttachment'
type = 'number'
description = 'The attachment ID on the entity to attach the particle system to'
``````````
name = 'offset'
type = 'Vector'
description = 'The offset from the <page>Entity:GetPos</page> of the entity we are attaching this CP to.'
[[.returns]]
type = 'CNewParticleEffect'

[CreatePhysCollideBox]
description = 'Creates a new <page>PhysCollide</page> from the given bounds.\r\n\r\n<bug issue="3568">This fails to create planes or points - no components of the mins or maxs can be the same.</bug>\r\n\r\n**Returns:** The new PhysCollide. This will be a NULL PhysCollide (<page>PhysCollide:IsValid</page> returns false) if given bad vectors or no more PhysCollides can be created in the physics engine.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'mins'
type = 'Vector'
description = 'Min corner of the box. This is not automatically ordered with the maxs and must contain the smallest vector components. See <page>Global.OrderVectors</page>.'
``````````
name = 'maxs'
type = 'Vector'
description = 'Max corner of the box. This is not automatically ordered with the mins and must contain the largest vector components.'
[[.returns]]
type = 'PhysCollide'

[CreatePhysCollidesFromModel]
description = 'Creates <page>PhysCollide</page> objects for every physics object the model has. The model must be precached with <page>util.PrecacheModel</page> before being used with this function.\r\n\r\n**Returns:** Table of <page>PhysCollide</page> objects. The number of entries will match the model\'s physics object count. See also <page>Entity:GetPhysicsObjectCount</page>. Returns no value if the model doesn\'t exist, or has not been precached.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'modelName'
type = 'string'
description = 'Model path to get the collision objects of.'
[[.returns]]
type = 'table'

[CreateSound]
description = 'Returns a sound parented to the specified entity.\r\n\r\n<note>You can only create one CSoundPatch per audio file, per entity at the same time.</note>\r\n\r\n**Returns:** The sound object\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'targetEnt'
type = 'Entity'
description = 'The target entity.'
``````````
name = 'soundName'
type = 'string'
description = 'The sound to play.'
``````````
name = 'filter'
type = 'CRecipientFilter'
description = 'A <page>CRecipientFilter</page> of the players that will have this sound networked to them.\r\n\r\n<note>This argument only works serverside.</note>'
[[.returns]]
type = 'CSoundPatch'

[CreateSprite]
description = 'Creates and returns a new <page>DSprite</page> element with the supplied material.\r\n\r\n**Returns:** The new <page>DSprite</page> element.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'material'
type = 'IMaterial'
description = 'Material the sprite should draw.'
[[.returns]]
type = 'Panel'

[CurTime]
description = 'Returns the uptime of the server in seconds (to at least 4 decimal places)\r\n\r\nThis is a synchronised value and affected by various factors such as host_timescale (or <page>game.GetTimeScale</page>) and the server being paused - either by sv_pausable or all players disconnecting.\r\n\r\nYou should use this function for timing in-game events but not for real-world events.\r\n\r\nSee also: <page>Global.RealTime</page>, <page>Global.SysTime</page>\r\n\r\n<note>This is internally defined as a float, and as such it will be affected by precision loss if your server uptime is more than 6 hours, which will cause jittery movement of players and props and inaccuracy of timers, it is highly encouraged to refresh or change the map when that happens (a server restart is not necessary).\r\n\r\n\r\n\r\nThis is **NOT** easy as it sounds to fix in the engine, so please refrain from posting issues about this</note>\r\n\r\n<bug issue="3026">This returns 0 in <page>GM:PlayerAuthed</page>.</bug>\r\n\r\n**Returns:** Time synced with the game server.\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'number'

[DamageInfo]
description = 'Returns an <page>CTakeDamageInfo</page> object.\r\n\r\n<bug issue="2771">This does not create a unique object, but instead returns a shared reference. That means you cannot use two or more of these objects at once.</bug>\r\n\r\n**Returns:** The <page>CTakeDamageInfo</page> object.\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'CTakeDamageInfo'

[DebugInfo]
description = 'Writes text to the right hand side of the screen, like the old error system. Messages disappear after a couple of seconds.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'slot'
type = 'number'
description = 'The location on the right hand screen to write the debug info to. Starts at 0, no upper limit'
``````````
name = 'info'
type = 'string'
description = 'The debugging information to be written to the screen'

[DEFINE_BASECLASS]
description = 'This is not a function. This is a preprocessor keyword that translates to:\r\n```\r\nlocal BaseClass = baseclass.Get("my_weapon")\r\n```\r\nIf you type `DEFINE_BASECLASS("my_weapon")` in your script.\r\n\r\nSee <page>baseclass.Get</page> for more information.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'value'
type = 'string'
description = 'Baseclass name'

[DeriveGamemode]
description = 'Loads and registers the specified gamemode, setting the GM table\'s DerivedFrom field to the value provided, if the table exists. The DerivedFrom field is used post-gamemode-load as the "derived" parameter for <page>gamemode.Register</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'base'
type = 'string'
description = 'Gamemode name to derive from.'

[Derma_Anim]
description = 'Creates a new derma animation.\r\n\r\n**Returns:** A lua metatable containing four methods:\r\n* Run() - Should be called each frame you want the animation to be ran.\r\n* Active() - Returns if the animation is currently active (has not finished and stop has not been called)\r\n* Stop() - Halts the animation at its current progress.\r\n* Start( Length, Data ) - Prepares the animation to be ran for Length seconds. Must be called once before calling Run(). The data parameter will be passed to the func function.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'name'
type = 'string'
description = 'Name of the animation to create'
``````````
name = 'panel'
type = 'Panel'
description = 'Panel to run the animation on'
``````````
name = 'func'
type = 'function'
description = 'Function to call to process the animation\r\n\r\n\r\nArguments:\r\n* <page>Panel</page> pnl - the panel passed to Derma_Anim\r\n* <page>table</page> anim - the anim table\r\n* <page>number</page> delta - the fraction of the progress through the animation\r\n* <page>any</page> data - optional data passed to the run metatable method'
[[.returns]]
type = 'table'

[Derma_DrawBackgroundBlur]
description = 'Draws background blur around the given panel.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'panel'
type = 'Panel'
description = 'Panel to draw the background blur around'
``````````
name = 'startTime'
type = 'number'
description = 'Time that the blur began being painted'

[Derma_Hook]
description = 'Creates panel method that calls the supplied Derma skin hook via <page>derma.SkinHook</page>\r\n\r\n**Scope:** Client'
[[.args]]
name = 'panel'
type = 'Panel'
description = 'Panel to add the hook to'
``````````
name = 'functionName'
type = 'string'
description = 'Name of panel function to create'
``````````
name = 'hookName'
type = 'string'
description = 'Name of Derma skin hook to call within the function'
``````````
name = 'typeName'
type = 'string'
description = 'Type of element to call Derma skin hook for'

[Derma_Install_Convar_Functions]
description = 'Makes the panel (usually an input of sorts) respond to changes in console variables by adding next functions to the panel:\r\n* <page>Panel:SetConVar</page>\r\n* <page>Panel:ConVarChanged</page>\r\n* <page>Panel:ConVarStringThink</page>\r\n* <page>Panel:ConVarNumberThink</page>\r\n\r\nThe console variable value is saved in the `m_strConVar` property of the panel.\r\n\r\nThe panel should call\r\n<page>Panel:ConVarStringThink</page> or\r\n<page>Panel:ConVarNumberThink</page>\r\nin its <page>PANEL:Think</page> hook and should call <page>Panel:ConVarChanged</page> when the panel\'s value has changed.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'target'
type = 'Panel'
description = 'The panel the functions should be added to.'

[Derma_Message]
description = 'Creates a derma window to display information\r\n\r\n**Returns:** The created <page>DFrame</page>\r\n\r\n**Scope:** Client'
[[.args]]
name = 'Text'
type = 'string'
description = 'The text within the created panel.'
``````````
name = 'Title'
type = 'string'
description = 'The title of the created panel.'
``````````
name = 'Button'
type = 'string'
description = 'The text of the button to close the panel.'
[[.returns]]
type = 'Panel'

[Derma_Query]
description = 'Shows a message box in the middle of the screen, with up to 4 buttons they can press.\r\n\r\n**Returns:** The Panel object of the created window.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'text'
type = 'string'
description = 'The message to display.'
``````````
name = 'title'
type = 'string'
description = 'The title to give the message box.'
``````````
name = 'btn1text'
type = 'string'
description = 'The text to display on the first button.'
``````````
name = 'btn1func'
type = 'function'
description = 'The function to run if the user clicks the first button.'
``````````
name = 'btn2text'
type = 'string'
description = 'The text to display on the second button.'
``````````
name = 'btn2func'
type = 'function'
description = 'The function to run if the user clicks the second button.'
``````````
name = 'btn3text'
type = 'string'
description = 'The text to display on the third button'
``````````
name = 'btn3func'
type = 'function'
description = 'The function to run if the user clicks the third button.'
``````````
name = 'btn4text'
type = 'string'
description = 'The text to display on the third button'
``````````
name = 'btn4func'
type = 'function'
description = 'The function to run if the user clicks the fourth button.'
[[.returns]]
type = 'Panel'

[Derma_StringRequest]
description = 'Creates a derma window asking players to input a string.\r\n\r\n**Returns:** The created <page>DFrame</page>\r\n\r\n**Scope:** Client'
[[.args]]
name = 'title'
type = 'string'
description = 'The title of the created panel.'
``````````
name = 'subtitle'
type = 'string'
description = 'The text above the input box'
``````````
name = 'default'
type = 'string'
description = 'The default text for the input box.'
``````````
name = 'confirm'
type = 'function'
description = 'The function to be called once the user has confirmed their input.'
``````````
name = 'cancel'
type = 'function'
description = 'The function to be called once the user has cancelled their input'
``````````
name = 'confirmText'
type = 'string'
description = 'Allows you to override text of the "OK" button'
``````````
name = 'cancelText'
type = 'string'
description = 'Allows you to override text of the "Cancel" button'
[[.returns]]
type = 'Panel'

[DermaMenu]
description = 'Creates a <page>DMenu</page> and closes any current menus.\r\n\r\n**Returns:** The created <page>DMenu</page>\r\n\r\n**Scope:** Client'
[[.args]]
name = 'keepOpen'
type = 'boolean'
description = 'If we should keep other <page>DMenu</page>s open (`true`) or not (`false`).'
``````````
name = 'parent'
type = 'Panel'
description = 'The panel to parent the created menu to.'
[[.returns]]
type = 'Panel'

[DisableClipping]
description = 'Sets whether rendering should be limited to being inside a panel or not.\r\n\r\nSee also <page>Panel:NoClipping</page>.\r\n\r\n**Returns:** Whether the clipping was enabled or not before this function call\r\n\r\n**Scope:** Client'
[[.args]]
name = 'disable'
type = 'boolean'
description = 'Whether or not clipping should be disabled'
[[.returns]]
type = 'boolean'

[DOF_Kill]
description = 'Cancels current DOF post-process effect started with <page>Global.DOF_Start</page>\r\n\r\n**Scope:** Client'

[DOF_Start]
description = 'Cancels any existing DOF post-process effects.\r\nBegins the DOF post-process effect.\r\n\r\n**Scope:** Client'

[DOFModeHack]
description = 'A hacky method used to fix some bugs regarding DoF.\r\n\r\n<internal></internal>\r\n\r\n**Scope:** Client'
[[.args]]
name = 'enable'
type = 'boolean'
description = 'Enables or disables depth-of-field mode'

[DrawBackground]
description = '<internal></internal> Draws the currently active main menu background image and handles transitioning between background images.\r\n\r\nThis is called by default in the menu panel\'s Paint hook.\r\n\r\n**Scope:** Client'

[DrawBloom]
description = 'Draws the bloom shader, which creates a glowing effect from bright objects.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'Darken'
type = 'number'
description = 'Determines how much to darken the effect. A lower number will make the glow come from lower light levels. A value of `1` will make the bloom effect unnoticeable. Negative values will make even pitch black areas glow.'
``````````
name = 'Multiply'
type = 'number'
description = 'Will affect how bright the glowing spots are. A value of `0` will make the bloom effect unnoticeable.'
``````````
name = 'SizeX'
type = 'number'
description = 'The size of the bloom effect along the horizontal axis.'
``````````
name = 'SizeY'
type = 'number'
description = 'The size of the bloom effect along the vertical axis.'
``````````
name = 'Passes'
type = 'number'
description = 'Determines how much to exaggerate the effect.'
``````````
name = 'ColorMultiply'
type = 'number'
description = 'Will multiply the colors of the glowing spots, making them more vivid.'
``````````
name = 'Red'
type = 'number'
description = 'How much red to multiply with the glowing color. Should be between `0` and `1`.'
``````````
name = 'Green'
type = 'number'
description = 'How much green to multiply with the glowing color. Should be between `0` and `1`.'
``````````
name = 'Blue'
type = 'number'
description = 'How much blue to multiply with the glowing color. Should be between `0` and `1`.'

[DrawColorModify]
description = 'Draws the Color Modify shader, which can be used to adjust colors on screen.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'modifyParameters'
type = 'table'
description = 'Color modification parameters. See <page>Shaders/g_colourmodify</page> and the example below. Note that if you leave out a field, it will retain its last value which may have changed if another caller uses this function.'

[DrawMaterialOverlay]
description = 'Draws a material overlay on the screen.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'Material'
type = 'string'
description = 'This will be the material that is drawn onto the screen.'
``````````
name = 'RefractAmount'
type = 'number'
description = 'This will adjust how much the material will refract your screen.'

[DrawMotionBlur]
description = 'Creates a motion blur effect by drawing your screen multiple times.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'AddAlpha'
type = 'number'
description = 'How much alpha to change per frame.'
``````````
name = 'DrawAlpha'
type = 'number'
description = 'How much alpha the frames will have. A value of 0 will not render the motion blur effect.'
``````````
name = 'Delay'
type = 'number'
description = 'Determines the amount of time between frames to capture.'

[DrawSharpen]
description = 'Draws the sharpen shader, which creates more contrast.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'Contrast'
type = 'number'
description = 'How much contrast to create.'
``````````
name = 'Distance'
type = 'number'
description = 'How large the contrast effect will be.'

[DrawSobel]
description = 'Draws the sobel shader, which detects edges and draws a black border.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'Threshold'
type = 'number'
description = 'Determines the threshold of edges. A value of `0` will make your screen completely black.'

[DrawSunbeams]
description = 'Renders the post-processing effect of beams of light originating from the map\'s sun. Utilises the `pp/sunbeams` material.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'darken'
type = 'number'
description = '`$darken` property for sunbeams material.'
``````````
name = 'multiplier'
type = 'number'
description = '`$multiply` property for sunbeams material.'
``````````
name = 'sunSize'
type = 'number'
description = '`$sunsize` property for sunbeams material.'
``````````
name = 'sunX'
type = 'number'
description = '`$sunx` property for sunbeams material.'
``````````
name = 'sunY'
type = 'number'
description = '`$suny` property for sunbeams material.'

[DrawTexturize]
description = 'Draws the texturize shader, which replaces each pixel on your screen with a different part of the texture depending on its brightness. See <page text="g_texturize">Shaders/g_texturize</page> for information on making the texture.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'Scale'
type = 'number'
description = 'Scale of the texture. A smaller number creates a larger texture.'
``````````
name = 'BaseTexture'
type = 'number'
description = 'This will be the texture to use in the effect. Make sure you use <page>Global.Material</page> to get the texture number.'

[DrawToyTown]
description = 'Draws the toy town shader, which blurs the top and bottom of your screen. This can make very large objects look like toys, hence the name.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'Passes'
type = 'number'
description = 'An integer determining how many times to draw the effect. A higher number creates more blur.'
``````````
name = 'Height'
type = 'number'
description = 'The amount of screen which should be blurred on the top and bottom.'

[DropEntityIfHeld]
description = 'Drops the specified entity if it is being held by any player with Gravity Gun or +use pickup.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'ent'
type = 'Entity'
description = 'The entity to drop.'

[DynamicLight]
description = 'Creates or replaces a dynamic light with the given id.\r\n\r\n<note>Only 32 dlights and 64 elights can be active at once.</note>\r\n<warning>It is not safe to hold a reference to this object after creation since its data can be replaced by another dlight at any time.</warning>\r\n<bug issue="3798">The minlight parameter affects the world and entities differently.</bug>\r\n\r\n**Returns:** A DynamicLight structured table. See <page>Structures/DynamicLight</page>\r\n\r\n**Scope:** Client'
[[.args]]
name = 'index'
type = 'number'
description = 'An unsigned Integer. Usually an <page text="entity index">Entity:EntIndex</page> is used here.'
``````````
name = 'elight'
type = 'boolean'
description = 'Allocates an elight instead of a dlight. Elights have a higher light limit and do not light the world (making the "noworld" parameter have no effect).'
[[.returns]]
type = 'table'

[EffectData]
description = 'Returns a <page>CEffectData</page> object to be used with <page>util.Effect</page>.\r\n\r\n<bug issue="2771">This does not create a unique object, but instead returns a shared reference. That means you cannot use two or more of these objects at once.</bug>\r\n\r\n**Returns:** The <page>CEffectData</page> object.\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'CEffectData'

[Either]
description = 'A compact \'if then else\'. This is *almost* equivalent to (`condition` and `truevar` or `falsevar`) in Lua.\r\n\r\nThe difference is that if `truevar` evaluates to false, the plain Lua method stated would return `falsevar` regardless of `condition` whilst this function would take `condition` into account.\r\n\r\n**Returns:** The result.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'condition'
type = 'any'
description = 'The condition to check if true or false.'
``````````
name = 'truevar'
type = 'any'
description = 'If the condition isn\'t nil/false, returns this value.'
``````````
name = 'falsevar'
type = 'any'
description = 'If the condition is nil/false, returns this value.'
[[.returns]]
type = 'any'

[EmitSentence]
description = 'Plays a sentence from `scripts/sentences.txt`\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'soundName'
type = 'string'
description = 'The sound to play'
``````````
name = 'position'
type = 'Vector'
description = 'The position to play at'
``````````
name = 'entity'
type = 'number'
description = 'The entity to emit the sound from. Must be <page>Entity:EntIndex</page>'
``````````
name = 'channel'
type = 'number'
description = 'The sound channel, see <page>Enums/CHAN</page>.'
``````````
name = 'volume'
type = 'number'
description = 'The volume of the sound, from 0 to 1'
``````````
name = 'soundLevel'
type = 'number'
description = 'The sound level of the sound, see <page>Enums/SNDLVL</page>'
``````````
name = 'soundFlags'
type = 'number'
description = 'The flags of the sound, see <page>Enums/SND</page>'
``````````
name = 'pitch'
type = 'number'
description = 'The pitch of the sound, 0-255'

[EmitSound]
description = 'Emits the specified sound at the specified position.\r\n\r\n<bug>Sounds must be precached serverside manually before they can be played. util.PrecacheSound does not work for this purpose, Entity.EmitSound does the trick</bug>\r\n<bug>This does not work with soundscripts. TODO: Is this a bug or intended?</bug>\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'soundName'
type = 'string'
description = 'The sound to play'
``````````
name = 'position'
type = 'Vector'
description = 'The position to play at'
``````````
name = 'entity'
type = 'number'
description = 'The entity to emit the sound from. Can be an <page>Entity:EntIndex</page> or one of the following:\r\n* 0 - Plays sound on the world (Position set to 0,0,0)\r\n* -1 - Plays sound on the local player (on server acts as 0)\r\n* -2 - Plays UI sound (Position set to 0,0,0, no spatial sound,on server acts as 0)'
``````````
name = 'channel'
type = 'number'
description = 'The sound channel, see <page>Enums/CHAN</page>.'
``````````
name = 'volume'
type = 'number'
description = 'The volume of the sound, from 0 to 1'
``````````
name = 'soundLevel'
type = 'number'
description = 'The sound level of the sound, see <page>Enums/SNDLVL</page>'
``````````
name = 'soundFlags'
type = 'number'
description = 'The flags of the sound, see <page>Enums/SND</page>'
``````````
name = 'pitch'
type = 'number'
description = 'The pitch of the sound, 0-255'

[EndTooltip]
description = 'Removes the currently active tool tip from the screen.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'panel'
type = 'Panel'
description = 'This is the panel that has a tool tip.'

[Entity]
description = 'Returns the entity with the matching <page>Entity:EntIndex</page>.\r\n\r\nIndices 1 through <page>game.MaxPlayers</page>() are always reserved for players.\r\n\r\n<note>In examples on this wiki, **Entity( 1 )** is used when a player entity is needed (see ). In singleplayer and listen servers, **Entity( 1 )** will always be the first player. In dedicated servers, however, **Entity( 1 )** won\'t always be a valid player.</note>\r\n\r\n**Returns:** The entity if it exists, or NULL if it doesn\'t.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'entityIndex'
type = 'number'
description = 'The entity index.'
[[.returns]]
type = 'Entity'

[error]
description = 'Throws a Lua error and breaks out of the current call stack.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'message'
type = 'string'
description = 'The error message to throw'
``````````
name = 'errorLevel'
type = 'number'
description = 'The level to throw the error at.'

[Error]
description = 'Throws an error. This is currently an alias of <page>Global.ErrorNoHalt</page> despite it once throwing a halting error like <page text="error">Global.error(lowercase)</page> without the stack trace appended.\r\n\r\n<bug issue="2113">This function throws a non-halting error instead of a halting error.</bug>\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'arguments'
type = 'vararg'
description = 'Converts all arguments to strings and prints them with no spacing or line breaks.'

[ErrorNoHalt]
description = 'Throws a Lua error but does not break out of the current call stack.\r\nThis function will not print a stack trace like a normal error would.\r\nEssentially similar if not equivalent to <page>Global.Msg</page>.\r\n\r\n<bug issue="1810">Using this function in the menu state exits the menu.</bug>\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'arguments'
type = 'vararg'
description = 'Converts all arguments to strings and prints them with no spacing.'

[EyeAngles]
description = 'Returns the angles of the current render context as calculated by <page>GM:CalcView</page>.\r\n\r\n<bug issue="2516">This function is only reliable inside rendering hooks.</bug>\r\n\r\n**Returns:** The angle of the currently rendered scene.\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'Angle'

[EyePos]
description = 'Returns the origin of the current render context as calculated by <page>GM:CalcView</page>.\r\n\r\n<bug issue="2516">This function is only reliable inside rendering hooks.</bug>\r\n\r\n**Returns:** Camera position.\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'Vector'

[EyeVector]
description = 'Returns the normal vector of the current render context as calculated by <page>GM:CalcView</page>, similar to <page>Global.EyeAngles</page>.\r\n\r\n<bug issue="2516">This function is only reliable inside rendering hooks.</bug>\r\n\r\n**Returns:** View direction of the currently rendered scene.\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'Vector'

[FindMetaTable]
description = 'Returns the meta table for the class with the matching name.\r\n\r\nInternally returns <page>debug.getregistry</page>()[metaName]\r\n\r\nYou can learn more about meta tables on the <page>Meta Tables</page> page.\r\n\r\nYou can find a list of meta tables that can be retrieved with this function on <page>Enums/TYPE</page>. The name in the description is the string to use with this function.\r\n\r\n**Returns:** The corresponding meta table.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'metaName'
type = 'string'
description = 'The object type to retrieve the meta table of.'
[[.returns]]
type = 'table'

[FindTooltip]
description = 'Returns the tool-tip text and tool-tip-panel (if any) of the given panel as well as itself\r\n\r\n**Returns:** tool-tip text\r\n\r\n**Scope:** Client'
[[.args]]
name = 'panel'
type = 'Panel'
description = 'Panel to find tool-tip of'
[[.returns]]
type = 'string'

[Format]
description = 'Formats the specified values into the string given. Same as <page>string.format</page>.\r\n\r\n**Returns:** The formatted string\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'format'
type = 'string'
description = 'The string to be formatted.\r\nFollows this format: http://www.cplusplus.com/reference/cstdio/printf/'
``````````
name = 'formatParameters'
type = 'vararg'
description = 'Values to be formatted into the string.'
[[.returns]]
type = 'string'

[FrameNumber]
description = 'Returns the number of frames rendered since the game was launched.\r\n\r\n**Scope:** Client'

[FrameTime]
description = 'Returns the <page>Global.CurTime</page>-based time in seconds it took to render the last frame.\r\n\r\nThis should be used for frame/tick based timing, such as movement prediction or animations.\r\n\r\nFor real-time-based frame time that isn\'t affected by host_timescale, use <page>Global.RealFrameTime</page>. RealFrameTime is more suited for things like GUIs or HUDs.\r\n\r\n**Returns:** time (in seconds)\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'number'

[GameDetails]
description = 'Callback function for when the client has joined a server. This function shows the server\'s loading URL by default.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'servername'
type = 'string'
description = 'Server\'s name.'
``````````
name = 'serverurl'
type = 'string'
description = 'Server\'s loading screen URL, or "" if the URL is not set.'
``````````
name = 'mapname'
type = 'string'
description = 'Server\'s current map\'s name.'
``````````
name = 'maxplayers'
type = 'number'
description = 'Max player count of server.'
``````````
name = 'steamid'
type = 'string'
description = 'The local player\'s <page>Player:SteamID64</page>.'
``````````
name = 'gamemode'
type = 'string'
description = 'Server\'s current gamemode\'s folder name.'

[gcinfo]
description = '<deprecated>This function was deprecated in Lua 5.1 and is removed in Lua 5.2. Use <page>Global.collectgarbage</page>( "count" ) instead.</deprecated> Returns the current floored dynamic memory usage of Lua in kilobytes.\r\n\r\n**Returns:** The current floored dynamic memory usage of Lua, in kilobytes.\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'number'

[GetConVar]
description = 'Gets the <page>ConVar</page> with the specified name.\r\n\r\n<note>This function uses <page>Global.GetConVar_Internal</page> internally, but caches the result in Lua for quicker lookups.</note>\r\n\r\n**Returns:** The <page>ConVar</page> object, or nil if no such <page>ConVar</page> was found.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'name'
type = 'string'
description = 'Name of the ConVar to get'
[[.returns]]
type = 'ConVar'

[GetConVar_Internal]
description = '<internal></internal>Gets the ConVar with the specified name. This function doesn\'t cache the convar.\r\n\r\n**Returns:** The ConVar object\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'name'
type = 'string'
description = 'Name of the ConVar to get'
[[.returns]]
type = 'ConVar'

[GetConVarNumber]
description = '<deprecated>Store the <page>ConVar</page> object retrieved with <page>Global.GetConVar</page> and call <page>ConVar:GetInt</page> or <page>ConVar:GetFloat</page> on it.</deprecated>Gets the numeric value ConVar with the specified name.\r\n\r\n**Returns:** The ConVar\'s value.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'name'
type = 'string'
description = 'Name of the ConVar to get.'
[[.returns]]
type = 'number'

[GetConVarString]
description = '<deprecated>Store the <page>ConVar</page> object retrieved with <page>Global.GetConVar</page> and call <page>ConVar:GetString</page> on it.</deprecated>Gets the string value ConVar with the specified name.\r\n\r\n**Returns:** The ConVar\'s value.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'name'
type = 'string'
description = 'Name of the ConVar to get.'
[[.returns]]
type = 'string'

[GetDefaultLoadingHTML]
description = 'Returns the default loading screen URL (asset://garrysmod/html/loading.html)\r\n\r\n**Returns:** Default loading url (asset://garrysmod/html/loading.html)\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'string'

[GetDemoFileDetails]
description = 'Retrieves data about the demo with the specified filename. Similar to <page>Global.GetSaveFileDetails</page>.\r\n\r\n**Returns:** Demo data.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'filename'
type = 'string'
description = 'The file name of the demo.'
[[.returns]]
type = 'table'

[GetDownloadables]
description = 'Returns a table with the names of files needed from the server you are currently joining.\r\n\r\n**Returns:** table of file names\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'table'

[getfenv]
description = 'Returns the environment table of either the stack level or the function specified.\r\n\r\n**Returns:** The environment.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'location'
type = 'function'
description = 'The object to get the enviroment from. Can also be a number that specifies the function at that stack level: Level 1 is the function calling getfenv.'
[[.returns]]
type = 'table'

[GetGlobalAngle]
description = 'Returns an angle that is shared between the server and all clients.\r\n\r\n**Returns:** The global value, or default if the global is not set.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'index'
type = 'string'
description = 'The unique index to identify the global value with.'
``````````
name = 'default'
type = 'Angle'
description = 'The value to return if the global value is not set.'
[[.returns]]
type = 'Angle'

[GetGlobalBool]
description = 'Returns a boolean that is shared between the server and all clients.\r\n\r\n**Returns:** The global value, or the default if the global value is not set.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'index'
type = 'string'
description = 'The unique index to identify the global value with.'
``````````
name = 'default'
type = 'boolean'
description = 'The value to return if the global value is not set.'
[[.returns]]
type = 'boolean'

[GetGlobalEntity]
description = 'Returns an entity that is shared between the server and all clients.\r\n\r\n**Returns:** The global value, or the default if the global value is not set.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'index'
type = 'string'
description = 'The unique index to identify the global value with.'
``````````
name = 'default'
type = 'Entity'
description = 'The value to return if the global value is not set.'
[[.returns]]
type = 'Entity'

[GetGlobalFloat]
description = 'Returns a float that is shared between the server and all clients.\r\n\r\n**Returns:** The global value, or the default if the global value is not set.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'index'
type = 'string'
description = 'The unique index to identify the global value with.'
``````````
name = 'default'
type = 'number'
description = 'The value to return if the global value is not set.'
[[.returns]]
type = 'number'

[GetGlobalInt]
description = 'Returns an integer that is shared between the server and all clients.\r\n\r\n<bug issue="3374">This function will not round decimal values as it actually networks a float internally.</bug>\r\n\r\n**Returns:** The global value, or the default if the global value is not set.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'index'
type = 'string'
description = 'The unique index to identify the global value with.'
``````````
name = 'default'
type = 'number'
description = 'The value to return if the global value is not set.'
[[.returns]]
type = 'number'

[GetGlobalString]
description = 'Returns a string that is shared between the server and all clients.\r\n\r\n**Returns:** The global value, or the default if the global value is not set.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'index'
type = 'string'
description = 'The unique index to identify the global value with.'
``````````
name = 'default'
type = 'string'
description = 'The value to return if the global value is not set.'
[[.returns]]
type = 'string'

[GetGlobalVector]
description = 'Returns a vector that is shared between the server and all clients.\r\n\r\n**Returns:** The global value, or the default if the global value is not set.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'Index'
type = 'string'
description = 'The unique index to identify the global value with.'
``````````
name = 'Default'
type = 'Vector'
description = 'The value to return if the global value is not set.'
[[.returns]]
type = 'Vector'

[GetHostName]
description = 'Returns the name of the current server.\r\n\r\n**Returns:** The name of the server.\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'string'

[GetHUDPanel]
description = 'Returns the panel that is used as a wrapper for the HUD. If you want your panel to be hidden when the main menu is opened, parent it to this. Child panels will also have their controls disabled.\r\n\r\nSee also <page>vgui.GetWorldPanel</page>\r\n\r\n**Returns:** The HUD panel\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'Panel'

[GetLoadPanel]
description = 'Returns the loading screen panel and creates it if it doesn\'t exist.\r\n\r\n**Returns:** The loading screen panel\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'Panel'

[GetLoadStatus]
description = 'Returns the current status of the server join progress.\r\n\r\n**Returns:** The current status\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'string'

[GetMapList]
description = 'Returns a table with the names of all maps and categories that you have on your client.\r\n\r\n**Returns:** table of map names and categories\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'table'

[getmetatable]
description = 'Returns the metatable of an object. This function obeys the metatable\'s __metatable field, and will return that field if the metatable has it set.\r\n\r\nUse <page>debug.getmetatable</page> if you want the true metatable of the object.\r\n\r\n**Returns:** The metatable of the value. This is not always a table.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'object'
type = 'any'
description = 'The value to return the metatable of.'
[[.returns]]
type = 'any'

[GetOverlayPanel]
description = 'Returns the menu overlay panel, a container for panels like the error panel created in <page>GM:OnLuaError</page>.\r\n\r\n**Returns:** The overlay panel\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'Panel'

[GetPredictionPlayer]
description = 'Returns the player whose movement commands are currently being processed. The player this returns can safely have <page>Player:GetCurrentCommand</page>() called on them. See <page>Prediction</page>.\r\n\r\n**Returns:** The player currently being predicted, or NULL if no command processing is currently being done.\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'Player'

[GetRenderTarget]
description = 'Creates or gets the rendertarget with the given name.\r\n\r\nSee <page>Global.GetRenderTargetEx</page> for an advanced version of this function with more options.\r\n\r\n<bug issue="2885">This crashes when used on a cubemap texture.</bug>\r\n\r\n**Returns:** The render target\r\n\r\n**Scope:** Client'
[[.args]]
name = 'name'
type = 'string'
description = 'The internal name of the render target.'
``````````
name = 'width'
type = 'number'
description = 'The width of the render target, must be power of 2. If not set to PO2, the size will be automatically converted to the nearest PO2 size.'
``````````
name = 'height'
type = 'number'
description = 'The height of the render target, must be power of 2. If not set to PO2, the size will be automatically converted to the nearest PO2 size.'
``````````
name = 'additive'
type = 'boolean'
description = 'Sets whenever the rt should be additive.'
[[.returns]]
type = 'ITexture'

[GetRenderTargetEx]
description = 'Gets (or creates if it does not exist) the rendertarget with the given name, this function allows to adjust the creation of a rendertarget more than <page>Global.GetRenderTarget</page>.\r\n\r\nSee also <page>render.PushRenderTarget</page> and <page>render.SetRenderTarget</page>.\r\n\r\n**Returns:** The new render target.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'name'
type = 'string'
description = 'The internal name of the render target.\r\n\r\n<warning>The name is treated like a path and gets its extension discarded.<br>"name.1" and "name.2" are considered the same name and will result in the same render target being reused.</warning>'
``````````
name = 'width'
type = 'number'
description = 'The width of the render target, must be power of 2.'
``````````
name = 'height'
type = 'number'
description = 'The height of the render target, must be power of 2.'
``````````
name = 'sizeMode'
type = 'number'
description = 'Bitflag that influences the sizing of the render target, see <page>Enums/RT_SIZE</page>.'
``````````
name = 'depthMode'
type = 'number'
description = 'Bitflag that determines the depth buffer usage of the render target <page>Enums/MATERIAL_RT_DEPTH</page>.'
``````````
name = 'textureFlags'
type = 'number'
description = 'Bitflag that configurates the texture, see <page>Enums/TEXTUREFLAGS</page>.\r\n\r\nList of flags can also be found on the Valve\'s Developer Wiki:\r\nhttps://developer.valvesoftware.com/wiki/Valve_Texture_Format'
``````````
name = 'rtFlags'
type = 'number'
description = 'Flags that controll the HDR behaviour of the render target, see <page>Enums/CREATERENDERTARGETFLAGS</page>.'
``````````
name = 'imageFormat'
type = 'number'
description = 'Image format, see <page>Enums/IMAGE_FORMAT</page>.'
[[.returns]]
type = 'ITexture'

[GetSaveFileDetails]
description = 'Retrieves data about the save with the specified filename. Similar to <page>Global.GetDemoFileDetails</page>.\r\n\r\n**Returns:** Save data.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'filename'
type = 'string'
description = 'The file name of the save.'
[[.returns]]
type = 'table'

[GetViewEntity]
description = 'Returns the entity the client is using to see from (such as the player itself, the camera, or another entity).\r\n\r\n**Returns:** The view entity.\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'Entity'

[HSLToColor]
description = 'Converts a color from [HSL color space](https://en.wikipedia.org/wiki/HSL_and_HSV) into RGB color space and returns a <page>Color</page>.\r\n\r\n<bug issue="2407">The returned color will not have the color metatable.</bug>\r\n\r\n**Returns:** The <page>Color</page> created from the HSL color space.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'hue'
type = 'number'
description = 'The hue in degrees from 0-360.'
``````````
name = 'saturation'
type = 'number'
description = 'The saturation from 0-1.'
``````````
name = 'value'
type = 'number'
description = 'The lightness from 0-1.'
[[.returns]]
type = 'table'

[HSVToColor]
description = 'Converts a color from [HSV color space](https://en.wikipedia.org/wiki/HSL_and_HSV) into RGB color space and returns a <page>Color</page>.\r\n\r\n<bug issue="2407">The returned color will not have the color metatable.</bug>\r\n\r\n**Returns:** The <page>Color</page> created from the HSV color space.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'hue'
type = 'number'
description = 'The hue in degrees from 0-360.'
``````````
name = 'saturation'
type = 'number'
description = 'The saturation from 0-1.'
``````````
name = 'value'
type = 'number'
description = 'The value from 0-1.'
[[.returns]]
type = 'table'

[HTTP]
description = 'Launches an asynchronous http request with the given parameters.\r\n\r\n<bug issue="2232">This cannot send or receive multiple headers with the same name.</bug>\r\n<note>HTTP-requests on private networks don\'t work. To enable HTTP-requests on private networks use <page>Command Line Parameters</page> `-allowlocalhttp`</note>\r\n\r\n**Returns:** true if we made a request, nil if we failed.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'parameters'
type = 'table'
description = 'The request parameters. See <page>Structures/HTTPRequest</page>.'
[[.returns]]
type = 'boolean'

[include]
description = 'Executes a Lua script.\r\n\r\n<note>Addon files (.gma files) do not support relative parent folders (`..` notation).</note>\r\n\r\n<warning>The file you are attempting to include MUST NOT be empty or the include will fail. Files over a certain size may fail as well.</warning>\r\n\r\n<warning>If the file you are including is clientside or shared, it **must** be <page>Global.AddCSLuaFile</page>\'d or this function will error saying the file doesn\'t exist.</warning>\r\n\r\n<note>This function will try to load local client file if `sv_allowcslua` is **1**</note>\r\n\r\n<bug issue="1976"><page>Global.pcall</page>ing this function will break autorefresh.</bug>\r\n\r\n**Returns:** Anything that the executed Lua script returns.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'fileName'
type = 'string'
description = 'The name of the script to be executed. The path must be either relative to the current file, or be an absolute path (relative to and excluding the lua/ folder).\r\n\r\n<note>Please make sure your file names are unique, the filesystem is shared across all addons, so a file named "lua/config.lua" in your addon may be overwritten by the same file in another addon.</note>'
[[.returns]]
type = 'vararg'

[IncludeCS]
description = '<deprecated>To send the target file to the client simply call AddCSLuaFile() in the target file itself.</deprecated>\r\n\r\nThis function works exactly the same as <page>Global.include</page> both clientside and serverside.\r\n\r\nThe only difference is that on the serverside it also calls <page>Global.AddCSLuaFile</page> on the filename, so that it gets sent to the client.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'filename'
type = 'string'
description = 'The filename of the Lua file you want to include.'

[ipairs]
description = 'Returns an iterator function for a for loop, to return ordered key-value pairs from a table.\r\n\r\nThis will only iterate though **numerical** keys, and these must also be **sequential**; starting at 1 with no gaps.\r\n\r\nFor unordered pairs, see <page>Global.pairs</page>.\r\n\r\nFor pairs sorted by key in alphabetical order, see <page>Global.SortedPairs</page>.\r\n\r\n**Returns:** The iterator function.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'tab'
type = 'table'
description = 'The table to iterate over.'
[[.returns]]
type = 'function'

[isangle]
description = 'Returns if the passed object is an <page>Angle</page>.\r\n\r\n**Returns:** True if the variable is an <page>Angle</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'variable'
type = 'any'
description = 'The variable to perform the type check for.'
[[.returns]]
type = 'boolean'

[isbool]
description = 'Returns if the passed object is a <page>boolean</page>.\r\n\r\n**Returns:** True if the variable is a <page>boolean</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'variable'
type = 'any'
description = 'The variable to perform the type check for.'
[[.returns]]
type = 'boolean'

[IsColor]
description = 'Returns whether the given object does or doesn\'t have a `metatable` of a color.\r\n\r\n<bug issue="2407">Engine functions (i.e. those not written in plain Lua) that return color objects do not currently set the color metatable and this function will return false if you use it on them.</bug>\r\n\r\n**Returns:** Whether the given object is a color or not\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'Object'
type = 'any'
description = 'The object to be tested'
[[.returns]]
type = 'boolean'

[IsEnemyEntityName]
description = 'Returns if the given NPC class name is an enemy.\r\n\r\nReturns true if the entity name is one of the following:\r\n* "npc_antlion"\r\n* "npc_antlionguard"\r\n* "npc_antlionguardian"\r\n* "npc_barnacle"\r\n* "npc_breen"\r\n* "npc_clawscanner"\r\n* "npc_combine_s"\r\n* "npc_cscanner"\r\n* "npc_fastzombie"\r\n* "npc_fastzombie_torso"\r\n* "npc_headcrab"\r\n* "npc_headcrab_fast"\r\n* "npc_headcrab_poison"\r\n* "npc_hunter"\r\n* "npc_metropolice"\r\n* "npc_manhack"\r\n* "npc_poisonzombie"\r\n* "npc_strider"\r\n* "npc_stalker"\r\n* "npc_zombie"\r\n* "npc_zombie_torso"\r\n* "npc_zombine"\r\n\r\n**Returns:** Is an enemy\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'className'
type = 'string'
description = 'Class name of the entity to check'
[[.returns]]
type = 'boolean'

[IsEntity]
description = 'Returns if the passed object is an <page>Entity</page>. Alias of <page>Global.isentity</page>.\r\n\r\n**Returns:** True if the variable is an <page>Entity</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'variable'
type = 'any'
description = 'The variable to check.'
[[.returns]]
type = 'boolean'

[IsFirstTimePredicted]
description = 'Returns if this is the first time this hook was predicted.\r\n\r\nThis is useful for one-time logic in your SWEPs PrimaryAttack, SecondaryAttack and Reload and other  (to prevent those hooks from being called rapidly in succession). It\'s also useful in a Move hook for when the client predicts movement.\r\n\r\nVisit <page>Prediction</page> for more information about this behavior.\r\n\r\n<note>This is already used internally for <page>Entity:EmitSound</page>, <page>Weapon:SendWeaponAnim</page> and <page>Entity:FireBullets</page>, but NOT in  <page>util.Effect</page>.</note>\r\n\r\n**Returns:** Whether or not this is the first time being predicted.\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'boolean'

[IsFriendEntityName]
description = 'Returns if the given NPC class name is a friend.\r\n\r\nReturns true if the entity name is one of the following:\r\n* "npc_alyx"\r\n* "npc_barney"\r\n* "npc_citizen"\r\n* "npc_dog"\r\n* "npc_eli"\r\n* "npc_fisherman"\r\n* "npc_gman"\r\n* "npc_kleiner"\r\n* "npc_magnusson"\r\n* "npc_monk"\r\n* "npc_mossman"\r\n* "npc_odessa"\r\n* "npc_vortigaunt"\r\n\r\n**Returns:** Is a friend\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'className'
type = 'string'
description = 'Class name of the entity to check'
[[.returns]]
type = 'boolean'

[isfunction]
description = 'Returns if the passed object is a <page>function</page>.\r\n\r\n**Returns:** True if the variable is a <page>function</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'variable'
type = 'any'
description = 'The variable to perform the type check for.'
[[.returns]]
type = 'boolean'

[IsInGame]
description = 'Returns true if the client is currently playing either a singleplayer or multiplayer game.\r\n\r\n**Returns:** True if we are in a game.\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'boolean'

[ismatrix]
description = 'Returns whether the passed object is a <page>VMatrix</page>.\r\n\r\n**Returns:** True if the variable is a <page>VMatrix</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'variable'
type = 'any'
description = 'The variable to perform the type check for.'
[[.returns]]
type = 'boolean'

[IsMounted]
description = 'Checks whether or not a game is currently mounted. Uses data given by <page>engine.GetGames</page>.\r\n\r\n**Returns:** True if the game is mounted.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'game'
type = 'string'
description = 'The game string/app ID to check.'
[[.returns]]
type = 'boolean'

[isnumber]
description = 'Returns if the passed object is a <page>number</page>.\r\n\r\n**Returns:** True if the variable is a <page>number</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'variable'
type = 'any'
description = 'The variable to perform the type check for.'
[[.returns]]
type = 'boolean'

[ispanel]
description = 'Returns if the passed object is a <page>Panel</page>.\r\n\r\n**Returns:** True if the variable is a <page>Panel</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'variable'
type = 'any'
description = 'The variable to perform the type check for.'
[[.returns]]
type = 'boolean'

[isstring]
description = 'Returns if the passed object is a <page>string</page>.\r\n\r\n**Returns:** True if the variable is a <page>string</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'variable'
type = 'any'
description = 'The variable to perform the type check for.'
[[.returns]]
type = 'boolean'

[istable]
description = 'Returns if the passed object is a <page>table</page>.\r\n\r\n**Returns:** True if the variable is a <page>table</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'variable'
type = 'any'
description = 'The variable to perform the type check for.'
[[.returns]]
type = 'boolean'

[IsTableOfEntitiesValid]
description = 'Returns whether or not every element within a table is a valid entity\r\n\r\n**Returns:** All entities valid\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'table'
type = 'table'
description = 'Table containing entities to check'
[[.returns]]
type = 'boolean'

[IsUselessModel]
description = 'Returns whether or not a model is useless by checking that the file path is that of a proper model.\r\n\r\nIf the string ".mdl" is not found in the model name, the function will return true.\r\n\r\nThe function will also return true if any of the following strings are found in the given model name:\r\n* "_gesture"\r\n* "_anim"\r\n* "_gst"\r\n* "_pst"\r\n* "_shd"\r\n* "_ss"\r\n* "_posture"\r\n* "_anm"\r\n* "ghostanim"\r\n* "_paths"\r\n* "_shared"\r\n* "anim_"\r\n* "gestures_"\r\n* "shared_ragdoll_"\r\n\r\n**Returns:** Whether or not the model is useless\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'modelName'
type = 'string'
description = 'The model name to be checked'
[[.returns]]
type = 'boolean'

[IsValid]
description = 'Returns whether an object is valid or not. (Such as <page>Entity</page>s, <page>Panel</page>s, custom <page>table</page> objects and more).\r\nChecks that an object is not nil, has an IsValid method and if this method returns true.\r\n\r\n<note>Due to vehicles being technically valid the moment they\'re spawned, also use <page>Vehicle:IsValidVehicle</page> to make sure they\'re fully initialized</note>\r\n\r\n**Returns:** True if the object is valid.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'toBeValidated'
type = 'any'
description = 'The table or object to be validated.'
[[.returns]]
type = 'boolean'

[isvector]
description = 'Returns if the passed object is a <page>Vector</page>.\r\n\r\n**Returns:** True if the variable is a <page>Vector</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'variable'
type = 'any'
description = 'The variable to perform the type check for.'
[[.returns]]
type = 'boolean'

[JoinServer]
description = 'Joins the server with the specified IP.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'IP'
type = 'string'
description = 'The IP of the server to join'

[JS_Language]
description = 'Adds javascript function \'language.Update\' to an HTML panel as a method to call Lua\'s <page>language.GetPhrase</page> function.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'htmlPanel'
type = 'Panel'
description = 'Panel to add javascript function \'language.Update\' to.'

[JS_Utility]
description = 'Adds javascript function \'util.MotionSensorAvailable\' to an HTML panel as a method to call Lua\'s <page>motionsensor.IsAvailable</page> function.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'htmlPanel'
type = 'Panel'
description = 'Panel to add javascript function \'util.MotionSensorAvailable\' to.'

[JS_Workshop]
description = 'Adds workshop related javascript functions to an HTML panel, used by the "Dupes" and "Saves" tabs in the spawnmenu.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'htmlPanel'
type = 'Panel'
description = 'Panel to add javascript functions to.'

[Label]
description = 'Convenience function that creates a DLabel, sets the text, and returns it\r\n\r\n**Returns:** The created DLabel\r\n\r\n**Scope:** Client'
[[.args]]
name = 'text'
type = 'string'
description = 'The string to set the label\'s text to'
``````````
name = 'parent'
type = 'Panel'
description = 'Optional. The panel to parent the DLabel to'
[[.returns]]
type = 'Panel'

[LanguageChanged]
description = 'Callback function for when the client\'s language changes. Called by the engine.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'lang'
type = 'string'
description = 'The new language code.'

[Lerp]
description = 'Performs a linear interpolation from the start number to the end number.\r\n\r\nThis function provides a very efficient and easy way to smooth out movements.\r\n<note>This function is not meant to be used with constant value in the first argument, if you\'re dealing with animation! Use a value that changes over time. See example for **proper** usage of Lerp for animations</note>\r\n\r\n**Returns:** The result of the linear interpolation, `(1 - t) * from + t * to`.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 't'
type = 'number'
description = 'The fraction for finding the result. This number is clamped between 0 and 1. Shouldn\'t be a constant.'
``````````
name = 'from'
type = 'number'
description = 'The starting number. The result will be equal to this if delta is 0.'
``````````
name = 'to'
type = 'number'
description = 'The ending number. The result will be equal to this if delta is 1.'
[[.returns]]
type = 'number'

[LerpAngle]
description = 'Returns point between first and second angle using given fraction and linear interpolation\r\n<note>This function is not meant to be used with constant value in the first argument, if you\'re dealing with animation! Use a value that changes over time</note>\r\n\r\n**Returns:** angle\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'ratio'
type = 'number'
description = 'Ratio of progress through values'
``````````
name = 'angleStart'
type = 'Angle'
description = 'Angle to begin from'
``````````
name = 'angleEnd'
type = 'Angle'
description = 'Angle to end at'
[[.returns]]
type = 'Angle'

[LerpVector]
description = 'Linear interpolation between two vectors. It is commonly used to smooth movement between two vectors\r\n<note>This function is not meant to be used with constant value in the first argument, if you\'re dealing with animation! Use a value that changes over time</note>\r\n\r\n**Returns:** The lerped vector.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'fraction'
type = 'number'
description = 'Fraction ranging from 0 to 1'
``````````
name = 'from'
type = 'Vector'
description = 'The initial Vector'
``````````
name = 'to'
type = 'Vector'
description = 'The desired Vector'
[[.returns]]
type = 'Vector'

[LoadLastMap]
description = '<internal></internal>This function is used to get the last map and category to which the map belongs from the cookie saved with <page>Global.SaveLastMap</page>.\r\n\r\n**Scope:** Client'

[LoadPresets]
description = 'Loads all preset settings for the <page>presets</page> and returns them in a table\r\n\r\n**Returns:** Preset data\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'table'

[Localize]
description = 'Returns a localisation for the given token, if none is found it will return the default (second) parameter.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'localisationToken'
type = 'string'
description = 'The token to find a translation for.'
``````````
name = 'default'
type = 'string'
description = 'The default value to be returned if no translation was found.'

[LocalPlayer]
description = 'Returns the player object of the current client.\r\n\r\n<note>LocalPlayer() will return NULL until all entities have been initialized. See <page>GM:InitPostEntity</page>.</note>\r\n\r\n**Returns:** The player object representing the client.\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'Player'

[LocalToWorld]
description = 'Translates the specified position and angle from the specified local coordinate system into worldspace coordinates.\r\n\r\nIf you\'re working with an entity\'s local vectors, use <page>Entity:LocalToWorld</page> and/or <page>Entity:LocalToWorldAngles</page> instead.\r\n\r\nSee also: <page>Global.WorldToLocal</page>, the reverse of this function.\r\n\r\n**Returns:** The world position of the supplied local position.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'localPos'
type = 'Vector'
description = 'The position vector in the source coordinate system, that should be translated to world coordinates'
``````````
name = 'localAng'
type = 'Angle'
description = 'The angle in the source coordinate system, that should be converted to a world angle. If you don\'t need to convert an angle, you can supply an arbitrary valid angle (e.g. <page>Global.Angle</page>()).'
``````````
name = 'originPos'
type = 'Vector'
description = 'The origin point of the source coordinate system, in world coordinates'
``````````
name = 'originAngle'
type = 'Angle'
description = 'The angles of the source coordinate system, as a world angle'
[[.returns]]
type = 'Vector'

[Material]
description = 'Either returns the material with the given name, or loads the material interpreting the first argument as the path.\r\n\r\n<note>When using .png or .jpg textures, try to make their sizes Power Of 2 (1, 2, 4, 8, 16, 32, 64, etc). While images are no longer scaled to Power of 2 sizes since February 2019, it is a good practice for things like icons, etc.</note>\r\n\r\n**Returns:** Generated material\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'materialName'
type = 'string'
description = 'The material name or path. The path is relative to the **materials/** folder. You do not need to add **materials/** to your path.\r\n\r\nTo retrieve a Lua material created with <page>Global.CreateMaterial</page>, just prepend a "!" to the material name.\r\n\r\n<note>Since paths are relative to the materials folder, resource paths like ../data/MyImage.jpg will work since ".." translates to moving up a parent directory in the file tree.</note>'
``````````
name = 'pngParameters'
type = 'string'
description = 'A string containing space separated keywords which will be used to add material parameters.\r\n\r\nSee <page>Material Parameters</page> for more information.\r\n\r\n<note>This feature only works when importing .png or .jpeg image files</note>'
[[.returns]]
type = 'IMaterial'

[Matrix]
description = 'Returns a <page>VMatrix</page> object.\r\n\r\n**Returns:** New matrix.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'data'
type = 'table'
description = 'Initial data to initialize the matrix with. Leave empty to initialize an identity matrix. See examples for usage.\r\n\r\nCan be a <page>VMatrix</page> to copy its data.'
[[.returns]]
type = 'VMatrix'

[Mesh]
description = 'Returns a new mesh object.\r\n\r\n**Returns:** The created object.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'mat'
type = 'IMaterial'
description = 'The material the mesh is intended to be rendered with. It\'s merely a hint that tells that mesh what vertex format it should use.'
[[.returns]]
type = 'IMesh'

[Model]
description = 'Runs <page>util.PrecacheModel</page> and returns the string\r\n\r\n**Returns:** The same string entered as an argument\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'model'
type = 'string'
description = 'The model to precache'
[[.returns]]
type = 'string'

[module]
description = 'Creates a table with the specified module name and sets the function environment for said table.\r\n\r\nAny passed loaders are called with the table as an argument. An example of this is <page>package.seeall</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'name'
type = 'string'
description = 'The name of the module. This will be used to access the module table in the runtime environment.'
``````````
name = 'loaders'
type = 'vararg'
description = 'Calls each function passed with the new table as an argument.'

[Msg]
description = 'Writes every given argument to the console.\r\n\r\nAutomatically attempts to convert each argument to a string. (See <page>Global.tostring</page>)\r\n\r\nUnlike <page>Global.print</page>, arguments are not separated by anything. They are simply concatenated.\r\n\r\nAdditionally, a newline isn\'t added automatically to the end, so subsequent Msg or print operations will continue the same line of text in the console. See <page>Global.MsgN</page> for a version that does add a newline.\r\n\r\nThe text is blue on the server, orange on the client, and green on the menu: <img src="msg_server_client_colors.png">\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'args'
type = 'vararg'
description = 'List of values to print.'

[MsgAll]
description = 'Works exactly like <page>Global.Msg</page> except that, if called on the server, will print to all players consoles plus the server console.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'args'
type = 'vararg'
description = 'List of values to print.'

[MsgC]
description = 'Just like <page>Global.Msg</page>, except it can also print colored text, just like <page>chat.AddText</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'args'
type = 'vararg'
description = 'Values to print. If you put in a color, all text after that color will be printed in that color.'

[MsgN]
description = 'Same as <page>Global.print</page>, except it concatinates the arguments without inserting any whitespace in between them.\r\n\r\nSee also <page>Global.Msg</page>, which doesn\'t add a newline (`"\n"`) at the end.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'args'
type = 'vararg'
description = 'List of values to print. They can be of any type and will be converted to strings with <page>Global.tostring</page>.'

[NamedColor]
description = 'Returns named color defined in resource/ClientScheme.res.\r\n\r\n**Returns:** A <page>Color</page> or nil\r\n\r\n**Scope:** Client'
[[.args]]
name = 'name'
type = 'string'
description = 'Name of color'
[[.returns]]
type = 'table'

[newproxy]
description = 'Returns a new userdata object.\r\n\r\n**Returns:** The newly created userdata.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'addMetatable'
type = 'boolean'
description = 'If true, the userdata will get its own metatable automatically.'
[[.returns]]
type = 'userdata'

[next]
description = 'Returns the next key and value pair in a table.\r\n\r\n<note>Table keys in Lua have no specific order, and will be returned in whatever order they exist in memory. This may not always be in ascending order or alphabetical order. If you need to iterate over an array in order, use <page>Global.ipairs</page>.</note>\r\n\r\n**Returns:** The next key for the table. If the previous key was nil, this will be the first key in the table. If the previous key was the last key in the table, this will be nil.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'tab'
type = 'table'
description = 'The table'
``````````
name = 'prevKey'
type = 'any'
description = 'The previous key in the table.'
[[.returns]]
type = 'any'

[NumDownloadables]
description = 'Returns the number of files needed from the server you are currently joining.\r\n\r\n**Returns:** The number of downloadables\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'number'

[NumModelSkins]
description = 'Returns the amount of skins the specified model has.\r\n\r\nSee also <page>Entity:SkinCount</page> if you have an entity.\r\n\r\n**Returns:** Amount of skins\r\n\r\n**Scope:** Client'
[[.args]]
name = 'modelName'
type = 'string'
description = 'Model to return amount of skins of'
[[.returns]]
type = 'number'

[OnModelLoaded]
description = '<internal></internal> Called by the engine when a model has been loaded. Caches model information with the <page>sql</page>.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'modelName'
type = 'string'
description = 'Name of the model.'
``````````
name = 'numPostParams'
type = 'number'
description = 'Number of pose parameters the model has.'
``````````
name = 'numSeq'
type = 'number'
description = 'Number of sequences the model has.'
``````````
name = 'numAttachments'
type = 'number'
description = 'Number of attachments the model has.'
``````````
name = 'numBoneControllers'
type = 'number'
description = 'Number of bone controllers the model has.'
``````````
name = 'numSkins'
type = 'number'
description = 'Number of skins that the model has.'
``````````
name = 'size'
type = 'number'
description = 'Size of the model.'

[OpenFolder]
description = 'Opens a folder with the given name in the garrysmod folder using the operating system\'s file browser.\r\n\r\n<bug issue="1532">This does not work on OSX or Linux.</bug>\r\n\r\n**Scope:** Client'
[[.args]]
name = 'folder'
type = 'string'
description = 'The subdirectory to open in the garrysmod folder.'

[OrderVectors]
description = 'Modifies the given vectors so that all of vector2\'s axis are larger than vector1\'s by switching them around. Also known as ordering vectors.\r\n\r\n<note>This function will irreversibly modify the given vectors</note>\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'vector1'
type = 'Vector'
description = 'Bounding box min resultant'
``````````
name = 'vector2'
type = 'Vector'
description = 'Bounding box max resultant'

[pairs]
description = 'Returns an iterator function(<page>Global.next</page>) for a for loop that will return the values of the specified table in an arbitrary order.\r\n\r\nFor alphabetical **key** order use <page>Global.SortedPairs</page>.\r\n\r\n\r\nFor alphabetical **value** order use <page>Global.SortedPairsByValue</page>.\r\n\r\n**Returns:** The iterator (<page>Global.next</page>).\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'tab'
type = 'table'
description = 'The table to iterate over.'
[[.returns]]
type = 'function'

[Particle]
description = 'Calls <page>game.AddParticles</page> and returns given string.\r\n\r\n**Returns:** The particle file.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'file'
type = 'string'
description = 'The particle file.'
[[.returns]]
type = 'string'

[ParticleEffect]
description = 'Creates a particle effect.\r\n\r\n<note>The particle effect must be precached with <page>Global.PrecacheParticleSystem</page> and the file its from must be added via <page>game.AddParticles</page> before it can be used!</note>\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'particleName'
type = 'string'
description = 'The name of the particle effect.'
``````````
name = 'position'
type = 'Vector'
description = 'The start position of the effect.'
``````````
name = 'angles'
type = 'Angle'
description = 'The orientation of the effect.'
``````````
name = 'parent'
type = 'Entity'
description = 'If set, the particle will be parented to the entity.'

[ParticleEffectAttach]
description = 'Creates a particle effect with specialized parameters.\r\n\r\n<note>The particle effect must be precached with <page>Global.PrecacheParticleSystem</page> and the file its from must be added via <page>game.AddParticles</page> before it can be used!</note>\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'particleName'
type = 'string'
description = 'The name of the particle effect.'
``````````
name = 'attachType'
type = 'number'
description = 'Attachment type using <page>Enums/PATTACH</page>.'
``````````
name = 'entity'
type = 'Entity'
description = 'The entity to be used in the way specified by the attachType.'
``````````
name = 'attachmentID'
type = 'number'
description = 'The id of the attachment to be used in the way specified by the attachType.'

[ParticleEmitter]
description = 'Creates a new <page>CLuaEmitter</page>.\r\n\r\n<note>Do not forget to delete the emitter with <page>CLuaEmitter:Finish</page> once you are done with it</note>\r\n\r\n**Returns:** The new particle emitter.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'position'
type = 'Vector'
description = 'The start position of the emitter.\r\n\r\nThis is only used to determine particle drawing order for translucent particles.'
``````````
name = 'use3D'
type = 'boolean'
description = 'Whenever to render the particles in 2D or 3D mode.'
[[.returns]]
type = 'CLuaEmitter'

[Path]
description = 'Creates a path for the bot to follow\r\n\r\n**Returns:** The path\r\n\r\n**Scope:** Server'
[[.args]]
name = 'type'
type = 'string'
description = 'The name of the path to create.\r\nThis is going to be "Follow" or "Chase" right now.'
[[.returns]]
type = 'PathFollower'

[pcall]
description = 'Calls a function and catches an error that can be thrown while the execution of the call.\r\n\r\n<bug issue="1976">Using this function with <page>Global.include</page> will break autorefresh.</bug>\r\n\r\n<bug issue="2036">This cannot stop errors from hooks called from the engine.</bug>\r\n\r\n<bug issue="2498">This does not stop <page>Global.Error</page> and <page>Global.ErrorNoHalt</page> from sending error messages to the server (if called clientside) or calling the <page>GM:OnLuaError</page> hook. The success boolean returned will always return true and thus you will not get the error message returned. <page>Global.error</page> does not exhibit these behaviours.</bug>\r\n\r\n<bug issue="3112">This does not stop errors incurred by <page>Global.include</page>.</bug>\r\n\r\n**Returns:** If the function had no errors occur within it.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'func'
type = 'function'
description = 'Function to be executed and of which the errors should be caught of'
``````````
name = 'arguments'
type = 'vararg'
description = 'Arguments to call the function with.'
[[.returns]]
type = 'boolean'

[Player]
description = 'Returns the player with the matching <page>Player:UserID</page>.\r\n\r\nFor a function that returns a player based on their <page>Entity:EntIndex</page>, see <page>Global.Entity</page>.\r\n\r\n\r\nFor a function that returns a player based on their connection ID, see <page>player.GetByID</page>.\r\n\r\n**Returns:** The retrieved player.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'playerIndex'
type = 'number'
description = 'The player index.'
[[.returns]]
type = 'Player'

[PositionSpawnIcon]
description = 'Moves the given model to the given position and calculates appropriate camera parameters for rendering the model to an icon.\r\n\r\nThe output table interacts nicely with <page>Panel:RebuildSpawnIconEx</page> with a few key renames.\r\n\r\n**Returns:** Table of information of the view which can be used for rendering\r\n\r\n**Scope:** Client'
[[.args]]
name = 'model'
type = 'Entity'
description = 'Model that is being rendered to the spawn icon'
``````````
name = 'position'
type = 'Vector'
description = 'Position that the model is being rendered at'
``````````
name = 'noAngles'
type = 'boolean'
description = 'If true the function won\'t reset the angles to 0 for the model.'
[[.returns]]
type = 'table'

[PrecacheParticleSystem]
description = 'Precaches the particle with the specified name.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'particleSystemName'
type = 'string'
description = 'The name of the particle system.'

[PrecacheScene]
description = 'Precaches a scene file.\r\n\r\n**Scope:** Server'
[[.args]]
name = 'scene'
type = 'string'
description = 'Path to the scene file to precache.'

[PrecacheSentenceFile]
description = 'Load and precache a custom sentence file.\r\n\r\n**Scope:** Server'
[[.args]]
name = 'filename'
type = 'string'
description = 'The path to the custom sentences.txt.'

[PrecacheSentenceGroup]
description = 'Precache a sentence group in a sentences.txt definition file.\r\n\r\n**Scope:** Server'
[[.args]]
name = 'group'
type = 'string'
description = 'The group to precache.'

[print]
description = 'Writes every given argument to the console.\r\nAutomatically attempts to convert each argument to a string. (See <page>Global.tostring</page>)\r\n\r\nSeperates lines with a line break (`"\n"`)\r\n\r\nSeparates arguments with a tab character (`"\t"`).\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'args'
type = 'vararg'
description = 'List of values to print.'

[PrintMessage]
description = 'Displays a message in the chat, console, or center of screen of every player.\r\n\r\nThis uses the archaic user message system (<page>umsg</page>) and hence is limited to ≈250 characters.\r\n\r\n**Scope:** Server'
[[.args]]
name = 'type'
type = 'number'
description = 'Which type of message should be sent to the players (see <page>Enums/HUD</page>)'
``````````
name = 'message'
type = 'string'
description = 'Message to be sent to the players'

[PrintTable]
description = 'Recursively prints the contents of a table to the console.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'tableToPrint'
type = 'table'
description = 'The table to be printed'
``````````
name = 'indent'
type = 'number'
description = 'Number of tabs to start indenting at. Increases by 2 when entering another table.'
``````````
name = 'done'
type = 'table'
description = 'Internal argument, you shouldn\'t normally change this. Used to check if a nested table has already been printed so it doesn\'t get caught in a loop.'

[ProjectedTexture]
description = 'Creates a new <page>ProjectedTexture</page>.\r\n\r\n**Returns:** Newly created projected texture.\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'ProjectedTexture'

[ProtectedCall]
description = 'Runs a function without stopping the whole script on error.\r\n\r\nThis function is similar to <page>Global.pcall</page> and <page>Global.xpcall</page> except the errors are still printed and sent to the error handler (i.e. sent to server console if clientside and <page>GM:OnLuaError</page> called).\r\n\r\n**Returns:** Whether the function executed successfully or not\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'func'
type = 'function'
description = 'Function to run'
[[.returns]]
type = 'boolean'

[RandomPairs]
description = 'Returns an iterator function that can be used to loop through a table in random order\r\n\r\n**Returns:** Iterator function\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'table'
type = 'table'
description = 'Table to create iterator for'
``````````
name = 'descending'
type = 'boolean'
description = 'Whether the iterator should iterate descending or not'
[[.returns]]
type = 'function'

[rawequal]
description = 'Compares the two values without calling their __eq operator.\r\n\r\n**Returns:** Whether or not the two values are equal.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'value1'
type = 'any'
description = 'The first value to compare.'
``````````
name = 'value2'
type = 'any'
description = 'The second value to compare.'
[[.returns]]
type = 'boolean'

[rawget]
description = 'Gets the value with the specified key from the table without calling the __index method.\r\n\r\n**Returns:** The value.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'table'
type = 'table'
description = 'Table to get the value from.'
``````````
name = 'index'
type = 'any'
description = 'The index to get the value from.'
[[.returns]]
type = 'any'

[rawset]
description = 'Sets the value with the specified key from the table without calling the __newindex method.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'table'
type = 'table'
description = 'Table to get the value from.'
``````````
name = 'index'
type = 'any'
description = 'The index to get the value from.'
``````````
name = 'value'
type = 'any'
description = 'The value to set for the specified key.'

[RealFrameTime]
description = 'Returns the real frame-time which is unaffected by host_timescale. To be used for GUI effects (for example)\r\n\r\n**Returns:** Real frame time\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'number'

[RealTime]
description = 'Returns the uptime of the game/server in seconds (to at least 4 decimal places)\r\n\r\n<note>This is **not** synchronised or affected by the game.</note>\r\n\r\n<note>This will be affected by precision loss if the uptime is more than 30+(?) days, and effectively cease to be functional after 50+(?) days.\r\n\r\nChanging the map will **not** fix it like it does with CurTime. A server restart is necessary.</note>\r\n\r\nYou should use this function (or SysTime) for timing real-world events such as user interaction, but not for timing game events such as animations.\r\n\r\nSee also: <page>Global.CurTime</page>, <page>Global.SysTime</page>\r\n\r\n**Returns:** Uptime of the game/server.\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'number'

[RecipientFilter]
description = 'Creates a new <page>CRecipientFilter</page>.\r\n\r\n**Returns:** The new created recipient filter.\r\n\r\n**Scope:** Server'
[[.args]]
name = 'unreliable'
type = 'boolean'
description = 'If set to true, makes the filter unreliable.\r\n\r\nThis means, when sending over the network in cases like <page>Global.CreateSound</page> (and its subsequent updates), the message is not guaranteed to reach all clients.'
[[.returns]]
type = 'CRecipientFilter'

[RecordDemoFrame]
description = '<internal></internal>\r\nAdds a frame to the currently recording demo.\r\n\r\n**Scope:** Client'

[RegisterDermaMenuForClose]
description = 'Registers a Derma element to be closed the next time <page>Global.CloseDermaMenus</page> is called\r\n\r\n**Scope:** Client'
[[.args]]
name = 'menu'
type = 'Panel'
description = 'Menu to be registered for closure'

[RememberCursorPosition]
description = 'Saves position of your cursor on screen. You can restore it by using\r\n<page>Global.RestoreCursorPosition</page>.\r\n\r\n**Scope:** Client'

[RemoveTooltip]
description = 'Does the removing of the tooltip panel. Called by <page>Global.EndTooltip</page>.\r\n\r\n**Scope:** Client'

[RenderAngles]
description = 'Returns the angle that the clients view is being rendered at\r\n\r\n**Returns:** Render Angles\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'Angle'

[RenderDoF]
description = 'Renders a Depth of Field effect\r\n\r\n**Scope:** Client'
[[.args]]
name = 'origin'
type = 'Vector'
description = 'Origin to render the effect at'
``````````
name = 'angle'
type = 'Angle'
description = 'Angle to render the effect at'
``````````
name = 'usableFocusPoint'
type = 'Vector'
description = 'Point to focus the effect at'
``````````
name = 'angleSize'
type = 'number'
description = 'Angle size of the effect'
``````````
name = 'radialSteps'
type = 'number'
description = 'Amount of radial steps to render the effect with'
``````````
name = 'passes'
type = 'number'
description = 'Amount of render passes'
``````````
name = 'spin'
type = 'boolean'
description = 'Whether to cycle the frame or not'
``````````
name = 'inView'
type = 'table'
description = 'Table of view data'
``````````
name = 'fov'
type = 'number'
description = 'FOV to render the effect with'

[RenderStereoscopy]
description = 'Renders the stereoscopic post-process effect\r\n\r\n**Scope:** Client'
[[.args]]
name = 'viewOrigin'
type = 'Vector'
description = 'Origin to render the effect at'
``````````
name = 'viewAngles'
type = 'Angle'
description = 'Angles to render the effect at'

[RenderSuperDoF]
description = 'Renders the Super Depth of Field post-process effect\r\n\r\n**Scope:** Client'
[[.args]]
name = 'viewOrigin'
type = 'Vector'
description = 'Origin to render the effect at'
``````````
name = 'viewAngles'
type = 'Angle'
description = 'Angles to render the effect at'
``````````
name = 'viewFOV'
type = 'number'
description = 'Field of View to render the effect at'

[require]
description = 'First tries to load a binary module with the given name, if unsuccessful, it tries to load a Lua module with the given name.\r\n\r\n<bug issue="1041" request="813">Running this function with <page>Global.pcall</page> or <page>Global.xpcall</page> will still print an error that counts towards sv_kickerrornum.</bug>\r\n<note>This function will try to load local client file if `sv_allowcslua` is **1**</note>\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'name'
type = 'string'
description = 'The name of the module to be loaded.'

[RestoreCursorPosition]
description = 'Restores position of your cursor on screen. You can save it by using <page>Global.RememberCursorPosition</page>.\r\n\r\n**Scope:** Client'

[RunConsoleCommand]
description = 'Executes the given console command with the parameters.\r\n\r\n<note>Some commands/convars are blocked from being ran/changed using this function, usually to prevent harm/annoyance to clients. For a list of blocked commands, see <page>Blocked ConCommands</page>.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'command'
type = 'string'
description = 'The command to be executed.'
``````````
name = 'arguments'
type = 'vararg'
description = 'The arguments. Note, that unlike <page>Player:ConCommand</page>, you must pass each argument as a new string, not separating them with a space.'

[RunGameUICommand]
description = 'Runs a menu command. Equivalent to <page>Global.RunConsoleCommand</page>( "gamemenucommand", command ) unless the command starts with the "engine" keyword in which case it is equivalent to <page>Global.RunConsoleCommand</page>( command ).\r\n\r\n**Scope:** Client'
[[.args]]
name = 'command'
type = 'string'
description = 'The menu command to run\r\n\r\nShould be one of the following:\r\n* Disconnect - Disconnects from the current server.\r\n* OpenBenchmarkDialog - Opens the "Video Hardware Stress Test" dialog.\r\n* OpenChangeGameDialog - Does not work in GMod.\r\n* OpenCreateMultiplayerGameDialog - Opens the Source dialog for creating a listen server.\r\n* OpenCustomMapsDialog - Does nothing.\r\n* OpenFriendsDialog - Does nothing.\r\n* OpenGameMenu - Does not work in GMod.\r\n* OpenLoadCommentaryDialog - Opens the "Developer Commentary" selection dialog. Useless in GMod.\r\n* OpenLoadDemoDialog - Does nothing.\r\n* OpenLoadGameDialog - Opens the Source "Load Game" dialog.\r\n* OpenNewGameDialog - Opens the "New Game" dialog. Useless in GMod.\r\n* OpenOptionsDialog - Opens the options dialog.\r\n* OpenPlayerListDialog - Opens the "Mute Players" dialog that shows all players connected to the server and allows to mute them.\r\n* OpenSaveGameDialog - Opens the Source "Save Game" dialog.\r\n* OpenServerBrowser - Opens the legacy server browser.\r\n* Quit - Quits the game `without` confirmation (unlike other Source games).\r\n* QuitNoConfirm - Quits the game without confirmation (like other Source games).\r\n* ResumeGame - Closes the menu and returns to the game.\r\n* engine <concommand> - Runs a console command. Equivalent to <page>Global.RunConsoleCommand</page>( <concommand> ).</concommand></concommand>'

[RunString]
description = 'Evaluates and executes the given code, will throw an error on failure.\r\n<note>Local variables are not passed to the given code.</note>\r\n\r\n**Returns:** If handleError is false, the error message (if any).\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'code'
type = 'string'
description = 'The code to execute.'
``````````
name = 'identifier'
type = 'string'
description = 'The name that should appear in any error messages caused by this code.'
``````````
name = 'handleError'
type = 'boolean'
description = 'If false, this function will return a string containing any error messages instead of throwing an error.'
[[.returns]]
type = 'string'

[RunStringEx]
description = 'Alias of <page>Global.RunString</page>.\r\n\r\n<deprecated>Use <page>Global.RunString</page> instead.</deprecated>\r\n\r\n**Scope:** Shared'

[SafeRemoveEntity]
description = 'Removes the given entity unless it is a player or the world entity\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'ent'
type = 'Entity'
description = 'Entity to safely remove.'

[SafeRemoveEntityDelayed]
description = 'Removes entity after delay using <page>Global.SafeRemoveEntity</page>\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'entity'
type = 'Entity'
description = 'Entity to be removed'
``````````
name = 'delay'
type = 'number'
description = 'Delay for entity removal in seconds'

[SaveLastMap]
description = '<internal></internal>\r\nThis function is used to save the last map and category to which the map belongs as a .\r\n\r\n**Scope:** Client'
[[.args]]
name = 'map'
type = 'string'
description = 'The name of the map.'
``````````
name = 'category'
type = 'string'
description = 'The name of the category to which this map belongs.'

[SavePresets]
description = 'Overwrites all presets with the supplied table. Used by the <page>presets</page> for preset saving\r\n\r\n**Scope:** Client'
[[.args]]
name = 'presets'
type = 'table'
description = 'Presets to be saved'

[ScreenScale]
description = 'Returns a number based on the Size argument and your screen\'s width. The screen\'s width is always equal to size 640. This function is primarily used for scaling font sizes.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'Size'
type = 'number'
description = 'The number you want to scale.'

[ScrH]
description = 'Gets the height of the game\'s window (in pixels).\r\n\r\n**Returns:** The height of the game\'s window in pixels\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'number'

[ScrW]
description = 'Gets the width of the game\'s window (in pixels).\r\n\r\n**Returns:** The width of the game\'s window in pixels\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'number'

[select]
description = 'Used to select single values from a vararg or get the count of values in it.\r\n\r\n**Returns:** Returns a <page>number</page> or <page>vararg</page>, depending on the select method.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'parameter'
type = 'any'
description = 'Can be a <page>number</page> or <page>string</page>.\r\n* If it\'s a string and starts with "#", the function will return the amount of values in the vararg (ignoring the rest of the string).\r\n* If it\'s a positive number, the function will return all values starting from the given index.\r\n* If the number is negative, it will return the amount specified from the end instead of the beginning. This mode will not be compiled by LuaJIT.'
``````````
name = 'vararg'
type = 'vararg'
description = 'The vararg. These are the values from which you want to select.'
[[.returns]]
type = 'any'

[SendUserMessage]
description = '<deprecated>This uses the <page>umsg</page> internally, which has been deprecated. Use the <page>net</page> instead.</deprecated>\r\nSend a usermessage\r\n<note>Useless on client, only server can send info to client.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'name'
type = 'string'
description = 'The name of the usermessage'
``````````
name = 'recipients'
type = 'any'
description = 'Can be a <page>CRecipientFilter</page>, <page>table</page> or <page>Player</page> object.'
``````````
name = 'args'
type = 'vararg'
description = 'Data to send in the usermessage'

[SentenceDuration]
description = 'Returns approximate duration of a sentence by name. See <page>Global.EmitSentence</page>.\r\n\r\n**Returns:** The approximate duration.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'name'
type = 'string'
description = 'The sentence name.'
[[.returns]]
type = 'number'

[ServerLog]
description = 'Prints "ServerLog: PARAM" without a newline, to the server log and console.\r\n\r\n**Scope:** Server'
[[.args]]
name = 'parameter'
type = 'string'
description = 'The value to be printed to console.'

[SetClipboardText]
description = 'Adds the given string to the computers clipboard, which can then be pasted in or outside of GMod with Ctrl + V.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'text'
type = 'string'
description = 'The text to add to the clipboard.'

[setfenv]
description = 'Sets the enviroment for a function or a stack level, if a function is passed, the return value will be the function, otherwise nil.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'location'
type = 'function'
description = 'The function to set the enviroment for or a number representing stack level.'
``````````
name = 'enviroment'
type = 'table'
description = 'Table to be used as enviroment.'

[SetGlobalAngle]
description = 'Defines an angle to be automatically networked to clients\r\n\r\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'index'
type = 'any'
description = 'Index to identify the global angle with'
``````````
name = 'angle'
type = 'Angle'
description = 'Angle to be networked'

[SetGlobalBool]
description = 'Defined a boolean to be automatically networked to clients\r\n\r\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'index'
type = 'any'
description = 'Index to identify the global boolean with'
``````````
name = 'bool'
type = 'boolean'
description = 'Boolean to be networked'

[SetGlobalEntity]
description = 'Defines an entity to be automatically networked to clients\r\n\r\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'index'
type = 'any'
description = 'Index to identify the global entity with'
``````````
name = 'ent'
type = 'Entity'
description = 'Entity to be networked'

[SetGlobalFloat]
description = 'Defines a floating point number to be automatically networked to clients\r\n\r\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'index'
type = 'any'
description = 'Index to identify the global float with'
``````````
name = 'float'
type = 'number'
description = 'Float to be networked'

[SetGlobalInt]
description = 'Sets an integer that is shared between the server and all clients.\r\n\r\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>\r\n<bug issue="3374">This function will not round decimal values as it actually networks a float internally.</bug>\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'index'
type = 'string'
description = 'The unique index to identify the global value with.'
``````````
name = 'value'
type = 'number'
description = 'The value to set the global value to'

[SetGlobalString]
description = 'Defines a string with a maximum of 199 characters to be automatically networked to clients\r\n\r\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'index'
type = 'any'
description = 'Index to identify the global string with'
``````````
name = 'string'
type = 'string'
description = 'String to be networked'

[SetGlobalVector]
description = 'Defines a vector to be automatically networked to clients\r\n\r\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'index'
type = 'any'
description = 'Index to identify the global vector with'
``````````
name = 'vec'
type = 'Vector'
description = 'Vector to be networked'

[setmetatable]
description = 'Sets, changes or removes a table\'s metatable. Returns Tab (the first argument).\r\n\r\n**Returns:** The first argument.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'Tab'
type = 'table'
description = 'The table who\'s metatable to change.'
``````````
name = 'Metatable'
type = 'table'
description = 'The metatable to assign. <br> If it\'s nil, the metatable will be removed.'
[[.returns]]
type = 'table'

[SetPhysConstraintSystem]
description = 'Called by the engine to set which [constraint system](https://developer.valvesoftware.com/wiki/Phys_constraintsystem) the next created constraints should use.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'constraintSystem'
type = 'Entity'
description = 'Constraint system to use'

[SortedPairs]
description = 'This function can be used in a for loop instead of <page>Global.pairs</page>. It sorts all **keys** alphabetically.\r\n\r\nFor sorting by specific **value member**, use <page>Global.SortedPairsByMemberValue</page>.\r\n\r\n\r\nFor sorting by **value**, use <page>Global.SortedPairsByValue</page>.\r\n\r\n**Returns:** Iterator function\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'table'
type = 'table'
description = 'The table to sort'
``````````
name = 'desc'
type = 'boolean'
description = 'Reverse the sorting order'
[[.returns]]
type = 'function'

[SortedPairsByMemberValue]
description = 'Returns an iterator function that can be used to loop through a table in order of member values, when the values of the table are also tables and contain that member.\r\n\r\nTo sort by **value**, use <page>Global.SortedPairsByValue</page>.\r\n\r\n\r\nTo sort by **keys**, use <page>Global.SortedPairs</page>.\r\n\r\n**Returns:** Iterator function\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'table'
type = 'table'
description = 'Table to create iterator for.'
``````````
name = 'memberKey'
type = 'any'
description = 'Key of the value member to sort by.'
``````````
name = 'descending'
type = 'boolean'
description = 'Whether the iterator should iterate in descending order or not.'
[[.returns]]
type = 'function'

[SortedPairsByValue]
description = 'Returns an iterator function that can be used to loop through a table in order of its **values**.\r\n\r\nTo sort by specific **value member**, use <page>Global.SortedPairsByMemberValue</page>.\r\n\r\n\r\nTo sort by **keys**, use <page>Global.SortedPairs</page>.\r\n\r\n**Returns:** Iterator function\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'table'
type = 'table'
description = 'Table to create iterator for'
``````````
name = 'descending'
type = 'boolean'
description = 'Whether the iterator should iterate in descending order or not'
[[.returns]]
type = 'function'

[Sound]
description = 'Runs <page>util.PrecacheSound</page> and returns the string.\r\n\r\n<bug><page>util.PrecacheSound</page> does nothing and therefore so does this function</bug>\r\n\r\n**Returns:** The string passed as the first argument\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'soundPath'
type = 'string'
description = 'The soundpath to precache'
[[.returns]]
type = 'string'

[SoundDuration]
description = 'Returns the duration of the sound specified in seconds.\r\n\r\n<bug issue="936">This only works properly for .wav files.</bug>\r\n\r\n**Returns:** Sound duration in seconds.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'soundName'
type = 'string'
description = 'The sound file path.'
[[.returns]]
type = 'number'

[SQLStr]
description = 'Returns the input value in an escaped form so that it can safely be used inside of queries. The returned value is surrounded by quotes unless noQuotes is true. Alias of <page>sql.SQLStr</page>\r\n\r\n**Returns:** Escaped input\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'input'
type = 'string'
description = 'String to be escaped'
``````````
name = 'noQuotes'
type = 'boolean'
description = 'Whether the returned value should be surrounded in quotes or not'
[[.returns]]
type = 'string'

[SScale]
description = '<deprecated>You should be using <page>Global.ScreenScale</page> instead.</deprecated>\r\n\r\nReturns a number based on the Size argument and your screen\'s width. Alias of <page>Global.ScreenScale</page>.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'Size'
type = 'number'
description = 'The number you want to scale.'

[STNDRD]
description = 'Returns the ordinal suffix of a given number.\r\n\r\n**Returns:** suffix\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'number'
type = 'number'
description = 'The number to find the ordinal suffix of.'
[[.returns]]
type = 'string'

[SuppressHostEvents]
description = 'Suppress any networking from the server to the specified player. This is automatically called by the engine before/after a player fires their weapon, reloads, or causes any other similar shared-predicted event to occur.\r\n\r\n**Scope:** Server'
[[.args]]
name = 'suppressPlayer'
type = 'Player'
description = 'The player to suppress any networking to.'

[SysTime]
description = 'Returns a highly accurate time in seconds since the start up, ideal for benchmarking.\r\n\r\n**Returns:** Uptime of the server.\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'number'

[TauntCamera]
description = 'Returns a TauntCamera object\r\n\r\n**Returns:** TauntCamera\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'table'

[TextEntryLoseFocus]
description = 'Clears focus from any text entries player may have focused.\r\n\r\n**Scope:** Client'

[TimedCos]
description = 'Returns a cosine value that fluctuates based on the current time\r\n\r\n**Returns:** Cosine value\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'frequency'
type = 'number'
description = 'The frequency of fluctuation'
``````````
name = 'min'
type = 'number'
description = 'Minimum value'
``````````
name = 'max'
type = 'number'
description = 'Maxmimum value'
``````````
name = 'offset'
type = 'number'
description = 'Offset variable that doesn\'t affect the rate of change, but causes the returned value to be offset by time'
[[.returns]]
type = 'number'

[TimedSin]
description = 'Returns a sine value that fluctuates based on <page>Global.CurTime</page>. The value returned will be between the start value plus/minus the range value.\r\n\r\n<bug>The range arguments don\'t work as intended. The existing (bugged) behavior is documented below.</bug>\r\n\r\n**Returns:** Sine value\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'frequency'
type = 'number'
description = 'The frequency of fluctuation, in'
``````````
name = 'origin'
type = 'number'
description = 'The center value of the sine wave.'
``````````
name = 'max'
type = 'number'
description = 'This argument\'s distance from origin defines the size of the full range of the sine wave. For example, if origin is 3 and max is 5, then the full range of the sine wave is 5-3 = 2. 3 is the center point of the sine wave, so the sine wave will range between 2 and 4.'
``````````
name = 'offset'
type = 'number'
description = 'Offset variable that doesn\'t affect the rate of change, but causes the returned value to be offset by time'
[[.returns]]
type = 'number'

[tobool]
description = 'Attempts to return an appropriate boolean for the given value\r\n\r\n**Returns:** **false** for the boolean false.\r\n**false** for "false".\r\n**false** for "0".\r\n**false** for numeric 0.\r\n**false** for nil.\r\n**true** otherwise.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'val'
type = 'any'
description = 'The object to be converted to a boolean'
[[.returns]]
type = 'boolean'

[ToggleFavourite]
description = 'Toggles whether or not the named map is favorited in the new game list.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'map'
type = 'string'
description = 'Map to toggle favorite.'

[tonumber]
description = 'Attempts to convert the value to a number.\r\n\r\nReturns nil on failure.\r\n\r\n**Returns:** The numeric representation of the value with the given base, or nil if the conversion failed.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'value'
type = 'any'
description = 'The value to convert. Can be a number or string.'
``````````
name = 'base'
type = 'number'
description = 'The  used in the string. Can be any integer between 2 and 36, inclusive.'
[[.returns]]
type = 'number'

[tostring]
description = 'Attempts to convert the value to a string. If the value is an object and its metatable has defined the __tostring metamethod, this will call that function.\r\n\r\n<page>Global.print</page> also uses this functionality.\r\n\r\n**Returns:** The string representation of the value.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'value'
type = 'any'
description = 'The object to be converted to a string.'
[[.returns]]
type = 'string'

[TranslateDownloadableName]
description = '<deprecated></deprecated>\r\n<internal></internal>\r\nReturns "Lua Cache File" if the given file name is in a certain string table, nothing otherwise.\r\n\r\n**Returns:** "Lua Cache File" if the given file name is in a certain string table, nothing otherwise.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'filename'
type = 'string'
description = 'File name to test'
[[.returns]]
type = 'string'

[type]
description = 'Returns a string representing the name of the type of the passed object.\r\n\r\n**Returns:** The name of the object\'s type.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'var'
type = 'any'
description = 'The object to get the type of.'
[[.returns]]
type = 'string'

[TypeID]
description = 'Gets the associated type ID of the variable. Unlike <page>Global.type</page>, this does not work with <page>no value</page> - an argument must be provided.\r\n\r\n<bug request="1120">This returns garbage for _LOADLIB objects.</bug>\r\n<bug request="1459">This returns TYPE_NIL for <page>proto</page>s.</bug>\r\n\r\n**Returns:** The type ID of the variable. See the <page>Enums/TYPE</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'variable'
type = 'any'
description = 'The variable to get the type ID of.'
[[.returns]]
type = 'number'

[unpack]
description = 'This function takes a numeric indexed table and return all the members as a vararg. If specified, it will start at the given index and end at end index.\r\n\r\n**Returns:** Output values\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'tbl'
type = 'table'
description = 'The table to generate the vararg from.'
``````````
name = 'startIndex'
type = 'number'
description = 'Which index to start from. Optional.'
``````````
name = 'endIndex'
type = 'number'
description = 'Which index to end at. Optional, even if you set StartIndex.'
[[.returns]]
type = 'vararg'

[UnPredictedCurTime]
description = 'Returns the current asynchronous in-game time.\r\n\r\n**Returns:** The asynchronous in-game time.\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'number'

[UpdateLoadPanel]
description = 'Runs JavaScript on the loading screen panel (<page>Global.GetLoadPanel</page>).\r\n\r\n**Scope:** Client'
[[.args]]
name = 'javascript'
type = 'string'
description = 'JavaScript to run on the loading panel.'

[UTIL_IsUselessModel]
description = '<deprecated>You should use <page>Global.IsUselessModel</page> instead.</deprecated>\r\n\r\nReturns whether or not a model is useless by checking that the file path is that of a proper model.\r\n\r\nIf the string ".mdl" is not found in the model name, the function will return true.\r\n\r\nThe function will also return true if any of the following strings are found in the given model name:\r\n* "_gesture"\r\n* "_anim"\r\n* "_gst"\r\n* "_pst"\r\n* "_shd"\r\n* "_ss"\r\n* "_posture"\r\n* "_anm"\r\n* "ghostanim"\r\n* "_paths"\r\n* "_shared"\r\n* "anim_"\r\n* "gestures_"\r\n* "shared_ragdoll_"\r\n\r\n**Returns:** Whether or not the model is useless\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'modelName'
type = 'string'
description = 'The model name to be checked'
[[.returns]]
type = 'boolean'

[ValidPanel]
description = '<deprecated>You should use <page>Global.IsValid</page> instead</deprecated>\r\n\r\nReturns if a panel is safe to use.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'panel'
type = 'Panel'
description = 'The panel to validate.'

[Vector]
description = 'Creates a <page>Vector</page> object.\r\n\r\n**Returns:** The created vector object.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'x'
type = 'number'
description = 'The x component of the vector.\r\n\r\n\r\nIf this is a <page>Vector</page>, this function will return a copy of the given vector.\r\n\r\n\r\nIf this is a <page>string</page>, this function will try to parse the string as a vector. If it fails, it returns a 0 vector.\r\n(See examples)'
``````````
name = 'y'
type = 'number'
description = 'The y component of the vector.'
``````````
name = 'z'
type = 'number'
description = 'The z component of the vector.'
[[.returns]]
type = 'Vector'

[VectorRand]
description = 'Returns a random vector whose components are each between min(inclusive), max(exclusive).\r\n\r\n**Returns:** The random direction vector.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'min'
type = 'number'
description = 'Min bound inclusive.'
``````````
name = 'max'
type = 'number'
description = 'Max bound exclusive.'
[[.returns]]
type = 'Vector'

[VGUIFrameTime]
description = 'Returns the time in seconds it took to render the VGUI.\r\n\r\n**Scope:** Client'

[VGUIRect]
description = 'Creates and returns a <page>DShape</page> rectangle GUI element with the given dimensions.\r\n\r\n**Returns:** <page>DShape</page> element\r\n\r\n**Scope:** Client'
[[.args]]
name = 'x'
type = 'number'
description = 'X position of the created element'
``````````
name = 'y'
type = 'number'
description = 'Y position of the created element'
``````````
name = 'w'
type = 'number'
description = 'Width of the created element'
``````````
name = 'h'
type = 'number'
description = 'Height of the created element'
[[.returns]]
type = 'Panel'

[VisualizeLayout]
description = '<internal>Used by the **vgui_visualizelayout** convar</internal>\r\nBriefly displays layout details of the given panel on-screen\r\n\r\n**Scope:** Client'
[[.args]]
name = 'panel'
type = 'Panel'
description = 'Panel to display layout details of'

[WorkshopFileBase]
description = '<internal></internal>Returns a new WorkshopFileBase element\r\n\r\n**Returns:** WorkshopFileBase element\r\n\r\n**Scope:** Client'
[[.args]]
name = 'namespace'
type = 'string'
description = 'Namespace for the file base'
``````````
name = 'requiredTags'
type = 'table'
description = 'Tags required for a Workshop submission to be interacted with by the filebase'
[[.returns]]
type = 'table'

[WorldToLocal]
description = 'Translates the specified position and angle into the specified coordinate system.\r\n\r\n**Returns:** Local position\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'position'
type = 'Vector'
description = 'The position that should be translated from the current to the new system.'
``````````
name = 'angle'
type = 'Angle'
description = 'The angles that should be translated from the current to the new system.'
``````````
name = 'newSystemOrigin'
type = 'Vector'
description = 'The origin of the system to translate to.'
``````````
name = 'newSystemAngles'
type = 'Angle'
description = 'The angles of the system to translate to.'
[[.returns]]
type = 'Vector'

[xpcall]
description = 'Attempts to call the first function. If the execution succeeds, this returns `true` followed by the returns of the function. If execution fails, this returns `false` and the second function is called with the error message.\r\n\r\nUnlike in <page>Global.pcall</page>, the stack is not unwound and can therefore be used for stack analyses with the <page>debug</page>.\r\n\r\n<bug issue="1976">Using this function with <page>Global.include</page> will break autorefresh.</bug>\r\n\r\n<bug issue="2036">This cannot stop errors from hooks called from the engine.</bug>\r\n\r\n<bug issue="2498">This does not stop <page>Global.Error</page> and <page>Global.ErrorNoHalt</page> from sending error messages to the server (if called clientside) or calling the <page>GM:OnLuaError</page> hook. The success boolean returned will always return true and thus you will not get the error message returned. <page>Global.error</page> does not exhibit these behaviours.</bug>\r\n\r\n<bug issue="3112">This does not stop errors incurred by <page>Global.include</page>.</bug>\r\n\r\n**Returns:** Status of the execution; `true` for success, `false` for failure.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'func'
type = 'function'
description = 'The function to call initially.'
``````````
name = 'errorCallback'
type = 'function'
description = 'The function to be called if execution of the first fails; the error message is passed as a string.\r\n\r\nYou cannot throw an <page>Global.error</page>() from this callback: it will have no effect (not even stopping the callback).'
``````````
name = 'arguments'
type = 'vararg'
description = 'Arguments to pass to the initial function.'
[[.returns]]
type = 'boolean'

