[string]
type = 'table'
[[.source]]
type = 'global'
``````````
type = 'library'
name = 'string'

<default>
type = 'function'
parent = {
	1 = {
		type = 'global',
		name = 'string'
	},
	2 = {
		type = 'library',
		name = 'string'
	}
}

[byte]
description = 'Returns the given string\'s characters in their numeric ASCII representation.\r\n\r\n**Returns:** Numerical bytes\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'string'
type = 'string'
description = 'The string to get the chars from.'
``````````
name = 'startPos'
type = 'number'
description = 'The first character of the string to get the byte of.'
``````````
name = 'endPos'
type = 'number'
description = 'The last character of the string to get the byte of.'
[[.returns]]
type = 'vararg'

[char]
description = 'Takes the given numerical bytes and converts them to a string.\r\n\r\n**Returns:** String built from given bytes\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'bytes'
type = 'vararg'
description = 'The bytes to create the string from.'
[[.returns]]
type = 'string'

[Comma]
description = 'Inserts commas for every third digit.\r\n\r\n**Returns:** Prettystring\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'InputNumber'
type = 'number'
description = 'The input number to commafy'
[[.returns]]
type = 'string'

[dump]
description = 'Returns the binary bytecode of the given function.\r\n\r\n<note>This does not work with functions created in C/C++. An error will be thrown if it is</note>\r\n\r\n**Returns:** Bytecode\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'func'
type = 'function'
description = 'The function to get the bytecode of'
``````````
name = 'stripDebugInfo'
type = 'boolean'
description = 'True to strip the debug data, false to keep it'
[[.returns]]
type = 'string'

[EndsWith]
description = 'Returns whether or not the second passed string matches the end of the first.\r\n\r\n**Returns:** `true` if the first string ends with the second, or the second is empty, otherwise `false`.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'str'
type = 'string'
description = 'The string whose end is to be checked.'
``````````
name = 'end'
type = 'string'
description = 'The string to be matched with the end of the first.'
[[.returns]]
type = 'boolean'

[Explode]
description = 'Splits a string up wherever it finds the given separator.\r\n\r\nThis is the reverse of <page>string.Implode</page>.\r\n\r\n**Returns:** Exploded string as a numerical sequential table.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'separator'
type = 'string'
description = 'The string will be separated wherever this sequence is found.'
``````````
name = 'str'
type = 'string'
description = 'The string to split up.'
``````````
name = 'use_patterns'
type = 'boolean'
description = 'Set this to true if your separator is a <page text="pattern">Patterns</page>.'
[[.returns]]
type = 'table'

[find]
description = 'Attempts to find the specified substring in a string, uses <page>Patterns</page> by default.\r\n\r\n**Returns:** Starting position of the found text, or nil if the text wasn\'t found\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'haystack'
type = 'string'
description = 'The string to search in.'
``````````
name = 'needle'
type = 'string'
description = 'The string to find, can contain patterns if enabled.'
``````````
name = 'startPos'
type = 'number'
description = 'The position to start the search from, can be negative start position will be relative to the end position.'
``````````
name = 'noPatterns'
type = 'boolean'
description = 'Disable patterns.'
[[.returns]]
type = 'number'

[format]
description = 'Formats the specified values into the string given.\r\n\r\n**Returns:** The formatted string\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'format'
type = 'string'
description = 'The string to be formatted.<br>\r\nFollows this format: http://www.cplusplus.com/reference/cstdio/printf/\r\n\r\nLuaJIT supports all specifiers and doesn\'t support `*` width and `.*` presision.\r\n\r\nLuaJIT exclusives:\r\n\r\n| Format | Description | Example of the output |\r\n|:------:|:-----------:|:---------------------:|\r\n| %p | Returns pointer to supplied structure (table/function) | `0xf20a8968` |\r\n| %q |  Formats a string between double quotes, using escape sequences when necessary to ensure that it can safely be read back by the Lua interpreter (last statement could be wrong) | `"test\1\2test"` |'
``````````
name = 'formatParameters'
type = 'vararg'
description = 'Values to be formatted into the string.'
[[.returns]]
type = 'string'

[FormattedTime]
description = 'Returns the time as a formatted string or as a table if no format is given.\r\n\r\n**Returns:** Returns the time as a formatted string only if a format was specified.\r\n\r\nReturns a table only if no format was specified. The table will contain these fields:\r\n* <page>number</page> ms - milliseconds\r\n* <page>number</page> s - seconds\r\n* <page>number</page> m - minutes\r\n* <page>number</page> h - hours\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'float'
type = 'number'
description = 'The time in seconds to format.'
``````````
name = 'format'
type = 'string'
description = 'An optional formatting to use. If no format it specified, a table will be returned instead.'
[[.returns]]
type = 'string'

[FromColor]
description = 'Creates a string from a Color variable.\r\n\r\n**Returns:** Output\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'color'
type = 'table'
description = 'The color to put in the string.'
[[.returns]]
type = 'string'

[GetChar]
description = '<deprecated>Use either string.sub(str, index, index) or str[index].</deprecated> Returns char value from the specified index in the supplied string.\r\n\r\n**Returns:** str\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'str'
type = 'string'
description = 'The string that you will be searching with the supplied index.'
``````````
name = 'index'
type = 'number'
description = 'The index\'s value of the string to be returned.'
[[.returns]]
type = 'string'

[GetExtensionFromFilename]
description = 'Returns extension of the file.\r\n\r\n**Returns:** fileExtension\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'file'
type = 'string'
description = 'String eg. file-path to get the file extensions from.'
[[.returns]]
type = 'string'

[GetFileFromFilename]
description = 'Returns file name and extension.\r\n\r\n**Returns:** The file name\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'pathString'
type = 'string'
description = 'The string eg. file-path to get the file-name from.'
[[.returns]]
type = 'string'

[GetPathFromFilename]
description = 'Returns the path only from a file\'s path.\r\n\r\n**Returns:** Path\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'Inputstring'
type = 'string'
description = 'String to get path from.'
[[.returns]]
type = 'string'

[gfind]
description = '<deprecated>This function is removed in Lua versions later than what GMod is currently using. Use <page>string.gmatch</page> instead.</deprecated>Returns an iterator function that is called for every complete match of the pattern, all sub matches will be passed as to the loop.\r\n\r\n**Returns:** The iterator function that can be used in a for-in loop\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'data'
type = 'string'
description = 'The string to search in'
``````````
name = 'pattern'
type = 'string'
description = 'The pattern to search for'
[[.returns]]
type = 'function'

[gmatch]
description = 'Using <page>Patterns</page>, returns an iterator which will return either one value if no capture groups are defined, or any capture group matches.\r\n\r\n**Returns:** The iterator function that can be used in a for-in loop\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'data'
type = 'string'
description = 'The string to search in'
``````````
name = 'pattern'
type = 'string'
description = 'The pattern to search for'
[[.returns]]
type = 'function'

[gsub]
description = 'This functions main purpose is to replace certain character sequences in a string using <page>Patterns</page>.\r\n\r\n**Returns:** replaceResult\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'string'
type = 'string'
description = 'String which should be modified.'
``````````
name = 'pattern'
type = 'string'
description = 'The pattern that defines what should be matched and eventually be replaced.'
``````````
name = 'replacement'
type = 'string'
description = 'In case of a string the matched sequence will be replaced with it.\r\n\r\nIn case of a table, the matched sequence will be used as key and the table will tested for the key, if a value exists it will be used as replacement.\r\n\r\nIn case of a function all matches will be passed as parameters to the function, the return value(s) of the function will then be used as replacement.'
``````````
name = 'maxReplaces'
type = 'number'
description = 'Maximum number of replacements to be made.'
[[.returns]]
type = 'string'

[Implode]
description = '<deprecated>You really should just use <page>table.concat</page>.</deprecated>\r\n\r\nJoins the values of a table together to form a string.\r\n\r\nThis is the reverse of <page>string.Explode</page> and is functionally identical to <page>table.concat</page>, but with less features.\r\n\r\n**Returns:** Imploded pieces\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'separator'
type = 'string'
description = 'The separator to insert between each piece.'
``````````
name = 'pieces'
type = 'table'
description = 'The table of pieces to concatenate. The keys for these must be numeric and sequential.'
[[.returns]]
type = 'string'

[JavascriptSafe]
description = 'Escapes special characters for JavaScript in a string, making the string safe for inclusion in to JavaScript strings.\r\n\r\n**Returns:** The escaped string.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'str'
type = 'string'
description = 'The string that should be escaped.'
[[.returns]]
type = 'string'

[Left]
description = 'Returns everything left of supplied place of that string.\r\n\r\n**Returns:** Returns a string containing a specified number of characters from the left side of a string.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'str'
type = 'string'
description = 'The string to extract from.'
``````````
name = 'num'
type = 'number'
description = 'Amount of chars relative to the beginning (starting from 1).'
[[.returns]]
type = 'string'

[len]
description = 'Counts the number of characters in the string (length). This is equivalent to using the length operator (#).\r\n\r\n**Returns:** Length of the string\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'str'
type = 'string'
description = 'The string to find the length of.'
[[.returns]]
type = 'number'

[lower]
description = 'Changes any upper-case letters in a string to lower-case letters.\r\n\r\n**Returns:** The original string, with all uppercase letters replaced with their lowercase variants.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'str'
type = 'string'
description = 'The string to convert.'
[[.returns]]
type = 'string'

[match]
description = 'Finds a <page text="Pattern">Patterns</page> in a string.\r\n\r\n**Returns:** Matched text(s)\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'string'
type = 'string'
description = 'String which should be searched in for matches.'
``````````
name = 'pattern'
type = 'string'
description = 'The pattern that defines what should be matched.'
``````````
name = 'startPosition'
type = 'number'
description = 'The start index to start the matching from, can be negative to start the match from a position relative to the end.'
[[.returns]]
type = 'vararg'

[NiceSize]
description = 'Converts a digital filesize to human-readable text.\r\n\r\n**Returns:** The human-readable filesize, in Bytes/KB/MB/GB (whichever is appropriate).\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'bytes'
type = 'number'
description = 'The filesize in bytes.'
[[.returns]]
type = 'string'

[NiceTime]
description = 'Formats the supplied number (in seconds) to the highest possible time unit.\r\n\r\n**Returns:** A nicely formatted time string.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'num'
type = 'number'
description = 'The number to format, in seconds.'
[[.returns]]
type = 'string'

[PatternSafe]
description = 'Escapes all special characters within a string, making the string safe for inclusion in a Lua pattern.\r\n\r\n**Returns:** The string that has been sanitized for inclusion in Lua patterns\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'str'
type = 'string'
description = 'The string to be sanitized'
[[.returns]]
type = 'string'

[rep]
description = 'Repeats a string by the provided number, with an optional separator.\r\n\r\n**Returns:** Repeated string.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'str'
type = 'string'
description = 'The string to convert.'
``````````
name = 'repetitions'
type = 'number'
description = 'Timer to repeat, this values gets rounded internally.'
``````````
name = 'separator'
type = 'string'
description = 'String that will separate the repeated piece. Notice that it doesn\'t add this string to the start or the end of the result, only between the repeated parts.'
[[.returns]]
type = 'string'

[Replace]
description = 'Replaces all occurrences of the supplied second string.\r\n\r\n**Returns:** string\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'str'
type = 'string'
description = 'The string we are seeking to replace an occurrence(s).'
``````````
name = 'find'
type = 'string'
description = 'What we are seeking to replace.'
``````````
name = 'replace'
type = 'string'
description = 'What to replace find with.'
[[.returns]]
type = 'string'

[reverse]
description = 'Reverses a string.\r\n\r\n**Returns:** reversed string\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'str'
type = 'string'
description = 'The string to be reversed.'
[[.returns]]
type = 'string'

[Right]
description = 'Returns the last n-th characters of the string.\r\n\r\n**Returns:** Returns a string containing a specified number of characters from the right side of a string.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'str'
type = 'string'
description = 'The string to extract from.'
``````````
name = 'num'
type = 'number'
description = 'Amount of chars relative to the end (starting from 1).'
[[.returns]]
type = 'string'

[SetChar]
description = 'Sets the character at the specific index of the string.\r\n\r\n**Returns:** ModifiedString\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'InputString'
type = 'string'
description = 'The input string'
``````````
name = 'Index'
type = 'number'
description = 'The character index, 1 is the first from left.'
``````````
name = 'ReplacementChar'
type = 'string'
description = 'String to replace with.'
[[.returns]]
type = 'string'

[Split]
description = 'Splits the string into a table of strings, separated by the second argument.\r\n\r\n**Returns:** Split table\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'Inputstring'
type = 'string'
description = 'String to split'
``````````
name = 'Separator'
type = 'string'
description = 'Character(s) to split with.'
[[.returns]]
type = 'table'

[StartWith]
description = 'Returns whether or not the first string starts with the second.\r\n\r\n**Returns:** Whether the first string starts with the second.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'inputStr'
type = 'string'
description = 'String to check.'
``````````
name = 'start'
type = 'string'
description = 'String to check with.'
[[.returns]]
type = 'boolean'

[StripExtension]
description = 'Removes the extension of a path.\r\n\r\n**Returns:** Modifiedstring\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'Inputstring'
type = 'string'
description = 'The path to change.'
[[.returns]]
type = 'string'

[sub]
description = 'Returns a sub-string, starting from the character at position `StartPos` of the string (inclusive), and optionally ending at the character at position `EndPos` of the string (also inclusive). If EndPos is not given, the rest of the string is returned.\r\n\r\n**Returns:** The substring.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'string'
type = 'string'
description = 'The string you\'ll take a sub-string out of.'
``````````
name = 'StartPos'
type = 'number'
description = 'The position of the first character that will be included in the sub-string.'
``````````
name = 'EndPos'
type = 'number'
description = 'The position of the last character to be included in the sub-string. It can be negative to count from the end.'
[[.returns]]
type = 'string'

[ToColor]
description = 'Fetches a Color type from a string.\r\n\r\n**Returns:** The output <page>Color</page>\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'Inputstring'
type = 'string'
description = 'The string to convert from.'
[[.returns]]
type = 'table'

[ToMinutesSeconds]
description = 'Returns given time in "MM:SS" format.\r\n\r\n**Returns:** Formatted time\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'time'
type = 'number'
description = 'Time in seconds'
[[.returns]]
type = 'string'

[ToMinutesSecondsMilliseconds]
description = 'Returns given time in "MM:SS:MS" format.\r\n\r\n**Returns:** Formatted time\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'time'
type = 'number'
description = 'Time in seconds'
[[.returns]]
type = 'string'

[ToTable]
description = 'Splits the string into characters and creates a sequential table of characters.\r\n\r\n<warning>As a result of the  encoding, non-ASCII characters will be split into more than one character in the output table. Each character value in the output table will always be 1 byte.</warning>\r\n\r\n**Returns:** A sequential table where each value is a character from the given string\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'str'
type = 'string'
description = 'The string you\'ll turn into a table.'
[[.returns]]
type = 'table'

[Trim]
description = 'Removes leading and trailing matches of a string.\r\n\r\n**Returns:** Modified string\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'Inputstring'
type = 'string'
description = 'The string to trim.'
``````````
name = 'Char'
type = 'string'
description = 'String to match.'
[[.returns]]
type = 'string'

[TrimLeft]
description = 'Removes leading spaces/characters from a string.\r\n\r\n**Returns:** Trimmed string\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'str'
type = 'string'
description = 'String to trim'
``````````
name = 'char'
type = 'string'
description = 'Custom character to remove'
[[.returns]]
type = 'string'

[TrimRight]
description = 'Removes trailing spaces/passed character from a string.\r\n\r\n**Returns:** Trimmed string\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'str'
type = 'string'
description = 'String to remove from'
``````````
name = 'char'
type = 'string'
description = 'Custom character to remove, default is a space'
[[.returns]]
type = 'string'

[upper]
description = 'Changes any lower-case letters in a string to upper-case letters.\r\n\r\n**Returns:** A string representing the value of a string converted to upper-case.\r\n\r\n**Scope:** Shared'
[[.args]]
name = 'str'
type = 'string'
description = 'The string to convert.'
[[.returns]]
type = 'string'

