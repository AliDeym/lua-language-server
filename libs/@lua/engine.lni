[engine]
type = 'table'
[[.source]]
type = 'global'
``````````
type = 'library'
name = 'engine'

<default>
type = 'function'
parent = {
	1 = {
		type = 'global',
		name = 'engine'
	},
	2 = {
		type = 'library',
		name = 'engine'
	}
}

[ActiveGamemode]
description = 'Returns the name of the currently running gamemode.\r\n\r\n**Returns:** The active gamemode\'s name. This is the name of the gamemode\'s folder.\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'string'

[CloseServer]
description = 'Closes the server and completely exits.\r\n\r\nThis is only functional when running in server test mode (launch option -systemtest). Server test mode is used internally at Facepunch as part of the build process to make sure that the dedicated servers aren\'t crashing on startup.\r\n\r\n**Scope:** Server'

[GetAddons]
description = 'Returns a list of addons the player have subscribed to on the workshop.\r\n\r\nThis list will also include "Floating" .gma addons that are mounted by the game, but not the folder addons.\r\n\r\n**Returns:** A table with 6 keys (downloaded, models, title, file, mounted, wsid)\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'table'

[GetDemoPlaybackStartTick]
description = 'When starting playing a demo, <page>engine.GetDemoPlaybackTick</page> will be reset and its old value will be added to this functions return value.\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'number'

[GetDemoPlaybackTick]
description = 'Current tick of currently loaded demo.\r\n\r\nIf not playing a demo, it will return amount of ticks since last demo playback.\r\n\r\n**Returns:** The amount of ticks of currently loaded demo.\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'number'

[GetDemoPlaybackTimeScale]
description = 'Returns time scale of demo playback.\r\n\r\nIf not during demo playback, returns 1.\r\n\r\n**Returns:** The time scale of demo playback, value of demo_timescale console variable.\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'number'

[GetDemoPlaybackTotalTicks]
description = 'Returns total amount of ticks of currently loaded demo.\r\n\r\nIf not playing a demo, returns 0 or the value of last played demo.\r\n\r\n**Returns:** Total amount of ticks of currently loaded demo.\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'number'

[GetGamemodes]
description = 'Returns a table containing info for all installed gamemodes\r\n\r\n**Returns:** gamemodes\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'table'

[GetGames]
description = 'Returns an array of tables corresponding to all games from which Garry\'s Mod supports mounting content.\r\n\r\n**Returns:** A table of tables containing all mountable games\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'table'

[GetUserContent]
description = '<deprecated>Used internally for in-game menus, may be merged in the future into <page>engine.GetAddons</page>.</deprecated>\r\n\r\nReturns the UGC (demos, saves and dupes) the player have subscribed to on the workshop.\r\n\r\n**Returns:** Returns a table with 6 keys (title, type, tags, wsid, timeadded)\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'table'

[IsPlayingDemo]
description = 'Returns true if we\'re currently playing a demo.\r\n\r\nYou will notice that there\'s no server-side version of this. That\'s because there is no server when playing a demo. Demos are both recorded and played back purely clientside.\r\n\r\n**Returns:** Whether the game is currently playing a demo or not.\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'boolean'

[IsRecordingDemo]
description = 'Returns true if the game is currently recording a demo file (.dem) using gm_demo\r\n\r\n**Returns:** Whether the game is currently recording a demo or not.\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'boolean'

[LightStyle]
description = 'This is a direct binding to the function `engine->LightStyle`. This function allows you to change the default light style of the map - so you can make lighting lighter or darker. Youâ€™ll need to call <page>render.RedownloadAllLightmaps</page> clientside to refresh the lightmaps to this new color.\r\n\r\n<bug issue="3626">Calling this function with arguments 0 and "a" will cause dynamic lights such as those produced by the Light tool to stop working.</bug>\r\n\r\n**Scope:** Server'
[[.args]]
name = 'lightstyle'
type = 'number'
description = 'The lightstyle to edit. 0 to 63. If you want to edit map lighting, you want to set this to 0.'
``````````
name = 'pattern'
type = 'string'
description = 'The pattern to change the lightstyle to. `a` is the darkest, `z` is the brightest. You can use stuff like "abcxyz" to make flashing patterns. The normal brightness for a map is `m`. Values over `z` are allowed, `~` for instance.'

[OpenDupe]
description = 'Loads a duplication from the local filesystem.\r\n\r\n**Returns:** Compressed dupeData. Use util.JSONToTable to make it into a format useable by the duplicator tool.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'dupeName'
type = 'string'
description = 'Name of the file. e.g, engine.OpenDupe("dupes/8b809dd7a1a9a375e75be01cdc12e61f.dupe")'
[[.returns]]
type = 'string'

[ServerFrameTime]
description = 'Returns an estimate of the server\'s performance. Equivalent to calling <page>Global.FrameTime</page> from the server, according to source code.\r\n\r\n**Returns:** Frame time\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'number'

[SetMounted]
description = 'Sets the mounting options for mountable content.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'depotID'
type = 'string'
description = 'The depot id of the game to mount.'
``````````
name = 'doMount'
type = 'boolean'
description = 'The mount state, true to mount, false to unmount'

[TickCount]
description = 'Returns the number of ticks since the game server started.\r\n\r\n**Returns:** Number of ticks since the game server started.\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'number'

[TickInterval]
description = 'Returns the number of seconds between each gametick.\r\n\r\n**Returns:** Number of seconds between each gametick.\r\n\r\n**Scope:** Shared'
[[.returns]]
type = 'number'

[VideoSettings]
description = 'Returns video recording settings set by <page>video.Record</page>. Used by Demo-To-Video feature.\r\n\r\n**Returns:** The video recording settings, see <page>Structures/VideoData</page>.\r\n\r\n**Scope:** Client'
[[.returns]]
type = 'table'

[WriteDupe]
description = 'Saves a duplication as a file.\r\n\r\n**Scope:** Client'
[[.args]]
name = 'dupe'
type = 'string'
description = 'Dupe table, encoded by <page>util.TableToJSON</page> and compressed by <page>util.Compress</page>'
``````````
name = 'jpeg'
type = 'string'
description = 'The dupe icon, created by <page>render.Capture</page>'

[WriteSave]
description = 'Stores savedata into the game (can be loaded using the LoadGame menu)\r\n\r\n**Scope:** Client'
[[.args]]
name = 'saveData'
type = 'string'
description = 'Data generated by gmsave.SaveMap'
``````````
name = 'name'
type = 'string'
description = 'Name the save will have.'
``````````
name = 'time'
type = 'number'
description = 'When the save was saved during the game (Put CurTime here)'
``````````
name = 'map'
type = 'string'
description = 'The map the save is used for.'

