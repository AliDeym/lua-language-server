<default>
type = 'function'

parent = {
	1 = {
		type = 'object',
		name = 'Entity'
	},
	2 = {
		type = 'object',
		name = 'Player'
	}
}

[Activate]
description = 'Activates the entity. This needs to be used on some entities (like constraints) after being spawned.\r\n\r\n<note>For some entity types when this function is used after <page>Entity:SetModelScale</page>, the physics object will be recreated with the new scale. [Source-sdk-2013](https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/baseanimating.cpp#L321-L327)</note>\r\n<note>Calling this method after <page>Entity:SetModelScale</page> will recreate a new scaled `SOLID_VPHYSICS` <page>PhysObj</page> on scripted entities. This can be a problem if you made a properly scaled <page>PhysObj</page> of another kind (using <page>Entity:PhysicsInitSphere</page> for instance) or if you edited the <page>PhysObj</page>\'s properties. This is especially the behavior of the Sandbox spawn menu.</note>\r\n<bug issue="3372">This crashes the game with scaled vehicles.</bug>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'

[AddCallback]
description = 'Add a callback function to a specific event. This is used instead of hooks to avoid calling empty functions unnecessarily.\r\n\r\nThis also allows you to use certain hooks in engine entities (non-scripted entities).\r\n\r\n<warning>This method does not check if the function has already been added to this object before, so if you add the same callback twice, it will be run twice! Make sure to add your callback only once.</warning>\r\n\r\n**Returns:** The callback ID that was just added, which can later be used in <page>Entity:RemoveCallback</page>.\r\n\r\nReturns nothing if the passed callback function was invalid or when asking for a non-existent hook.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'hook'
type = 'string'
description = 'The hook name to hook onto. See <page>Entity Callbacks</page>'
``````````
name = 'func'
type = 'function'
description = 'The function to call'
[[.returns]]
type = 'number'

[AddEffects]
description = 'Applies an engine effect to an entity.\r\n\r\nSee also <page>Entity:IsEffectActive</page> and  <page>Entity:RemoveEffects</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'effect'
type = 'number'
description = 'The effect to apply, see <page>Enums/EF</page>.'

[AddEFlags]
description = 'Adds engine flags.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'flag'
type = 'number'
description = 'Engine flag to add, see <page>Enums/EFL</page>'

[AddFlags]
description = 'Adds flags to the entity.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'flag'
type = 'number'
description = 'Flag to add, see <page>Enums/FL</page>'

[AddGesture]
description = 'Adds a gesture animation to the entity and plays it.\r\n\r\n\r\nSee <page>Entity:AddGestureSequence</page> and <page>Entity:AddLayeredSequence</page> for functions that takes sequences instead of <page>Enums/ACT</page>.\r\n\r\n<note>This function only works on <page>BaseAnimatingOverlay</page> entites!</note>\r\n\r\n**Returns:** Layer ID of the started gesture, used to manipulate the played gesture by other functions.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'activity'
type = 'number'
description = 'The activity to play as the gesture. See <page>Enums/ACT</page>.'
``````````
name = 'autokill'
type = 'boolean'
description = ''
[[.returns]]
type = 'number'

[AddGestureSequence]
description = 'Adds a gesture animation to the entity and plays it.\r\n\r\n\r\nSee <page>Entity:AddGesture</page> for a function that takes <page>Enums/ACT</page>.\r\n\r\n\r\nSee also <page>Entity:AddLayeredSequence</page>.\r\n\r\n<note>This function only works on <page>BaseAnimatingOverlay</page> entites!</note>\r\n\r\n**Returns:** Layer ID of the started gesture, used to manipulate the played gesture by other functions.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'sequence'
type = 'number'
description = 'The sequence ID to play as the gesture. See <page>Entity:LookupSequence</page>.'
``````````
name = 'autokill'
type = 'boolean'
description = ''
[[.returns]]
type = 'number'

[AddLayeredSequence]
description = 'Adds a gesture animation to the entity and plays it.\r\n\r\n\r\nSee <page>Entity:AddGestureSequence</page> for a function that doesn\'t take priority.\r\n\r\n\r\nSee <page>Entity:AddGesture</page> for a function that takes <page>Enums/ACT</page>.\r\n\r\n<note>This function only works on <page>BaseAnimatingOverlay</page> entites!</note>\r\n\r\n**Returns:** Layer ID of created layer\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'sequence'
type = 'number'
description = 'The sequence ID to play as the gesture. See <page>Entity:LookupSequence</page>.'
``````````
name = 'priority'
type = 'number'
description = ''
[[.returns]]
type = 'number'

[AddSolidFlags]
description = 'Adds solid flag(s) to the entity.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'flags'
type = 'number'
description = 'The flag(s) to apply, see <page>Enums/FSOLID</page>.'

[AddToMotionController]
description = 'Adds a <page>PhysObj</page>ect to the entity\'s motion controller so that <page>ENTITY:PhysicsSimulate</page> will be called for given <page>PhysObj</page>ect as well.\r\n\r\nYou must first create a motion controller with <page>Entity:StartMotionController</page>.\r\n\r\nYou can remove added <page>PhysObj</page>ects by using <page>Entity:RemoveFromMotionController</page>.\r\n\r\n<note>Only works on a scripted <page>Entity</page> of anim type</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'physObj'
type = 'PhysObj'
description = 'The <page>PhysObj</page> to add to the motion controller.'

[AlignAngles]
description = 'Returns an angle based on the ones inputted that you can use to align an object.\r\n\r\n<note>This function doesn\'t change the angle of the entity on its own (see example).</note>\r\n\r\n**Returns:** The resulting aligned angle\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'from'
type = 'Angle'
description = 'The angle you want to align from'
``````````
name = 'to'
type = 'Angle'
description = 'The angle you want to align to'
[[.returns]]
type = 'Angle'

[BecomeRagdollOnClient]
description = 'Spawns a clientside ragdoll for the entity, positioning it in place of the original entity, and makes the entity invisible. It doesn\'t preserve flex values (face posing) as CSRagdolls don\'t support flex.\r\n\r\nIt does not work on players. Use <page>Player:CreateRagdoll</page> instead.\r\n\r\nThe original entity is not removed, and neither are any ragdolls previously generated with this function.\r\n\r\nTo make the entity re-appear, run <page>Entity:SetNoDraw</page>( false )\r\n\r\n**Returns:** The created ragdoll.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'CSEnt'

[BeingLookedAtByLocalPlayer]
description = 'Returns true if the entity is being looked at by the local player and is within 256 units of distance.\r\n\r\n<note>This function is only available in entities that are based off of sandbox\'s base_gmodentity</note>\r\n<note>This function uses Distance instead of DistToSqr so it may not be suitable in situations where it\'s called often</note>\r\n\r\n**Returns:** Is the entity being looked at by the local player and within 256 units.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[Blocked]
description = '<internal></internal> Dispatches blocked events to this entity\'s blocked handler. This function is only useful when interacting with entities like func_movelinear.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'entity'
type = 'Entity'
description = 'The entity that is blocking us'

[BodyTarget]
description = 'Returns a centered vector of this entity, NPCs use this internally to aim at their targets.\r\n\r\n<note>This only works on players and NPCs.</note>\r\n\r\n**Returns:** The centered vector.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'origin'
type = 'Vector'
description = 'The vector of where the the attack comes from.'
``````````
name = 'noisy'
type = 'boolean'
description = 'Decides if it should return the centered vector with a random offset to it.'
[[.returns]]
type = 'Vector'

[BoneHasFlag]
description = 'Returns whether the entity\'s bone has the flag or not.\r\n\r\n**Returns:** Whether the bone has that flag or not\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'boneID'
type = 'number'
description = 'Bone ID to test flag of.'
``````````
name = 'flag'
type = 'number'
description = 'The flag to test, see <page>Enums/BONE</page>'
[[.returns]]
type = 'boolean'

[BoneLength]
description = 'Returns the length between given bone\'s position and the position of given bone\'s parent.\r\n\r\n**Returns:** The length of the bone\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'boneID'
type = 'number'
description = 'The ID of the bone you want the length of. You may want to get the length of the next bone ( boneID + 1 ) for decent results'
[[.returns]]
type = 'number'

[BoundingRadius]
description = 'Returns the distance between the center of the bounding box and the furthest bounding box corner.\r\n\r\n**Returns:** The radius of the bounding box.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[CallOnRemove]
description = 'Causes a specified function to be run if the entity is removed by any means. This can later be undone by <page>Entity:RemoveCallOnRemove</page> if you need it to not run.\r\n\r\n<bug pull="1275">Using players with this function will provide a gimped entity to the callback.</bug>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'identifier'
type = 'string'
description = 'Identifier of the function within CallOnRemove'
``````````
name = 'removeFunc'
type = 'function'
description = 'Function to be called on remove'
``````````
name = 'argn...'
type = 'vararg'
description = 'Optional arguments to pass to removeFunc. Do note that the first argument passed to the function will always be the entity being removed, and the arguments passed on here start after that.'

[ClearPoseParameters]
description = 'Resets all pose parameters such as aim_yaw, aim_pitch and rotation.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'

[CollisionRulesChanged]
description = 'Declares that the collision rules of the entity have changed, and subsequent calls for <page>GM:ShouldCollide</page> with this entity may return a different value than they did previously.\r\n\r\n<warning>This function must **not** be called inside of <page>GM:ShouldCollide</page>. Instead, it must be called in advance when the condition is known to change.</warning>\r\n\r\n<warning>Failure to use this function correctly will result in a crash of the physics engine.</warning>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'

[CreatedByMap]
description = 'Returns whether the entity was created by map or not.\r\n\r\n**Returns:** Is created by map?\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[CreateParticleEffect]
description = 'Creates a clientside particle system attached to the entity. See also <page>Global.CreateParticleSystem</page>\r\n\r\n<note>The particle effect must be precached with <page>Global.PrecacheParticleSystem</page> and the file its from must be added via <page>game.AddParticles</page> before it can be used!</note>\r\n\r\n**Returns:** The created particle system.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
``````````
name = 'particle'
type = 'string'
description = 'The particle name to create'
``````````
name = 'attachment'
type = 'number'
description = 'Attachment ID to attach the particle to'
``````````
name = 'options'
type = 'table'
description = 'A table of tables ( IDs 1 to 64 ) having the following structure:\r\n* <page>number</page> attachtype - The particle attach type. See <page text="PATTACH">Enums/PATTACH</page>. **Default:** PATTACH_ABSORIGIN\r\n* <page>Entity</page> entity - The parent entity? **Default:** NULL\r\n* <page>Vector</page> position - The offset position for given control point. **Default:**  nil\r\n\r\nThis only affects the control points of the particle effects and will do nothing if the effect doesn\'t use control points.'
[[.returns]]
type = 'CNewParticleEffect'

[CreateShadow]
description = 'Draws the shadow of an entity.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'

[DeleteOnRemove]
description = 'Whenever the entity is removed, entityToRemove will be removed also.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'entityToRemove'
type = 'Entity'
description = 'The entity to be removed'

[DestroyShadow]
description = 'Removes the shadow for the entity.\r\n\r\nThe shadow will be recreated as soon as the entity wakes.\r\n\r\nDoesn\'t affect shadows from flashlight/lamps/env_projectedtexture.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'

[DisableMatrix]
description = 'Disables an active matrix.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
``````````
name = 'matrixType'
type = 'string'
description = 'The name of the matrix type to disable.\r\n\r\n\r\n\r\n\r\nThe only known matrix type is "RenderMultiply".'

[DispatchTraceAttack]
description = 'Performs a trace attack.\r\n\r\n<warning>Calling this function on the victim entity in <page>ENTITY:OnTakeDamage</page> can cause infinite loops.</warning>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'damageInfo'
type = 'CTakeDamageInfo'
description = 'The damage to apply.'
``````````
name = 'traceRes'
type = 'table'
description = 'Trace result to use to deal damage. See <page>Structures/TraceResult</page>'
``````````
name = 'dir'
type = 'Vector'
description = 'Direction of the attack.'

[DontDeleteOnRemove]
description = 'This removes the argument entity from an ent\'s list of entities to \'delete on remove\'\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'entityToUnremove'
type = 'Entity'
description = 'The entity to be removed from the list of entities to delete'

[DrawModel]
description = 'Draws the entity or model.\r\n\r\nIf called inside <page>ENTITY:Draw</page> or <page>ENTITY:DrawTranslucent</page>, it only draws the entity\'s model itself.\r\n\r\n\r\nIf called outside of those hooks, it will call both of said hooks depending on <page>Entity:GetRenderGroup</page>, drawing the entire entity again.\r\n\r\n<note>When drawing an entity more than once per frame in different positions, you should call <page>Entity:SetupBones</page> before each draw; Otherwise, the entity will retain its first drawn position.</note>\r\n\r\n<rendercontext hook="false" type="3D"></rendercontext>\r\n\r\n<bug issue="1558">Calling this on entities with <page text="EF_BONEMERGE">Enums/EF</page> and <page text="EF_NODRAW">Enums/EF</page> applied causes a crash.</bug>\r\n\r\n<bug issue="2688">Using this with a map model (<page>game.GetWorld</page>():<page text="GetModel">Entity:GetModel</page>()) crashes the game.</bug>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'

[DrawShadow]
description = 'Sets whether an entity\'s shadow should be drawn.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'shouldDraw'
type = 'boolean'
description = 'True to enable, false to disable shadow drawing.'

[DropToFloor]
description = 'Move an entity down until it collides with something.\r\n<warning>The entity needs to already have something below it within 256 units.</warning>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'

[DTVar]
description = '<internal><br><br>You should use <page>Entity:NetworkVar</page> instead</internal>\r\n\r\nSets up a self.dt.NAME alias for a Data Table variable.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'Type'
type = 'string'
description = 'The type of the DTVar being set up. It can be one of the following: \'Int\', \'Float\', \'Vector\', \'Angle\', \'Bool\', \'Entity\' or \'String\''
``````````
name = 'ID'
type = 'number'
description = 'The ID of the DTVar. Can be between 0 and 3 for strings, 0 and 31 for everything else.'
``````````
name = 'Name'
type = 'string'
description = 'Name by which you will refer to DTVar. It must be a valid variable name. (No spaces!)'

[EmitSound]
description = 'Plays a sound on an entity. If run clientside, the sound will only be heard locally.\r\n\r\nIf used on a player or NPC character with the mouth rigged, the character will "lip-sync". This does not work with all sound files.\r\n\r\n<note>When using this function with weapons, use the <page>Weapon</page> itself as the entity, not its owner!</note>\r\n\r\n<bug issue="2651">This does not respond to <page>Global.SuppressHostEvents</page>.</bug>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'soundName'
type = 'string'
description = 'The name of the sound to be played.\r\n<warning>The string cannot have whitespace at the start or end. You can remove this with <page>string.Trim</page>.</warning>'
``````````
name = 'soundLevel'
type = 'number'
description = 'A modifier for the distance this sound will reach, acceptable range is 0 to 511. 100 means no adjustment to the level. See <page>Enums/SNDLVL</page>\r\n\r\nWill not work if a [sound script](https://developer.valvesoftware.com/wiki/Soundscripts) is used.'
``````````
name = 'pitchPercent'
type = 'number'
description = 'The pitch applied to the sound. The acceptable range is from 0 to 255. 100 means the pitch is not changed.'
``````````
name = 'volume'
type = 'number'
description = 'The volume, from 0 to 1.'
``````````
name = 'channel'
type = 'number'
description = 'The sound channel, see <page>Enums/CHAN</page>.\r\n\r\nWill not work if a [sound script](https://developer.valvesoftware.com/wiki/Soundscripts) is used.'

[EnableConstraints]
description = 'Toggles the constraints of this ragdoll entity on and off.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'toggleConstraints'
type = 'boolean'
description = 'Set to true to enable the constraints and false to disable them.\r\n\r\nDisabling constraints will delete the constraint entities.'

[EnableCustomCollisions]
description = 'Flags an entity as using custom lua defined collisions. Fixes entities having spongy player collisions or not hitting traces, such as after <page>Entity:PhysicsFromMesh</page>\r\n\r\nInternally identical to `Entity:AddSolidFlags( bit.bor( FSOLID_CUSTOMRAYTEST, FSOLID_CUSTOMBOXTEST ) )`\r\n\r\nDo not confuse this function with <page>Entity:SetCustomCollisionCheck</page>, they are not the same.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'useCustom'
type = 'boolean'
description = 'True to flag this entity'

[EnableMatrix]
description = 'Can be used to apply a custom <page>VMatrix</page> to the entity, mostly used for scaling the model by a <page>Vector</page>.\r\n\r\nTo disable it, use <page>Entity:DisableMatrix</page>.\r\n\r\nIf your old scales are wrong due to a recent update, use <page>Entity:SetLegacyTransform</page> as a quick fix.\r\n\r\n<note>The matrix can also be modified to apply a custom rotation and offset via the <page>VMatrix:SetAngles</page> and <page>VMatrix:SetTranslation</page> functions.</note>\r\n<bug issue="3502">This does not scale procedural bones.</bug>\r\n<bug issue="3502">This disables inverse kinematics of an entity.</bug>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
``````````
name = 'matrixType'
type = 'string'
description = 'The name of the matrix type. <br>\r\nThe only implemented matrix type is "RenderMultiply".'
``````````
name = 'matrix'
type = 'VMatrix'
description = 'The matrix to apply before drawing the entity.'

[EntIndex]
description = 'Gets the unique entity index of an entity.\r\n\r\n<note>Entity indices are marked as unused after deletion, and can be reused by newly-created entities</note>\r\n\r\n**Returns:** The index of the entity.\r\n\r\n-1 for clientside-only or serverside-only entities.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[Extinguish]
description = 'Extinguishes the entity if it is on fire.\r\n\r\nHas no effect if called inside <page>GM:EntityTakeDamage</page> (and the attacker is the flame that\'s hurting the entity)\r\n\r\nSee also <page>Entity:Ignite</page>.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'

[EyeAngles]
description = 'Returns the direction a player/npc/ragdoll is looking as a world-oriented angle.\r\n\r\n<bug issue="1150">This can return an incorrect value in pods.</bug>\r\n\r\n<bug issue="2620">This can return an incorrect value in jeeps when used with <page>Player:EnterVehicle</page>.</bug>\r\n\r\n**Returns:** eyeAng\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Angle'

[EyePos]
description = 'Returns the position of an Player/NPC\'s view.\r\n\r\n**Returns:** View position of the entity.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Vector'

[FindBodygroupByName]
description = 'Searches for bodygroup with given name.\r\n\r\n**Returns:** Bodygroup ID, -1 if not found\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'name'
type = 'string'
description = 'The bodygroup name to search for.'
[[.returns]]
type = 'number'

[FindTransitionSequence]
description = 'Returns a transition from the given start and end sequence.\r\n\r\nThis function was only used by HL1 entities and NPCs, before the advent of sequence blending and gestures.\r\n\r\n**Returns:** The transition sequence, -1 if not available.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'currentSequence'
type = 'number'
description = 'The currently playing sequence'
``````````
name = 'goalSequence'
type = 'number'
description = 'The goal sequence.'
[[.returns]]
type = 'number'

[Fire]
description = 'Fires an entity\'s input. You can find inputs for most entities on the [Valve Developer Wiki](https://developer.valvesoftware.com/wiki/Output)\r\n\r\nSee also <page>Entity:Input</page> and <page>GM:AcceptInput</page>.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'input'
type = 'string'
description = 'The name of the input to fire'
``````````
name = 'param'
type = 'string'
description = 'The value to give to the input, can also be a <page>number</page> or a <page>boolean</page>.'
``````````
name = 'delay'
type = 'number'
description = 'Delay in seconds before firing'

[FireBullets]
description = 'Fires a bullet.\r\n\r\nWhen used in a  hook such as <page>WEAPON:Think</page> or <page>WEAPON:PrimaryAttack</page>, it will use <page>Player:LagCompensation</page> internally.\r\n\r\n<note>Lag compensation will not work if this function is called in a timer, regardless if the timer was made in a  hook.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'bulletInfo'
type = 'table'
description = 'The bullet data to be used. See the <page>Structures/Bullet</page>.'
``````````
name = 'suppressHostEvents'
type = 'boolean'
description = 'Has the effect of encasing the FireBullets call in <page>Global.SuppressHostEvents</page>, only works in multiplayer.'

[FollowBone]
description = 'Makes an entity follow another entity\'s bone.\r\n\r\nInternally this function calls <page>Entity:SetParent</page>( parent, boneid ), <page>Entity:AddEffects</page>( EF_FOLLOWBONE\r\n) and sets an internal flag to always rebuild all bones.\r\n<note>If the entity vibrates or stops following the parent, you probably need to run <page>Entity:SetPredictable</page>( true ) clientside.</note>\r\n<warning>This function will not work if the target bone\'s parent bone is invalid or if the bone is not used by VERTEX LOD0</warning>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'parent'
type = 'Entity'
description = 'The entity to follow the bone of. If unset, removes the FollowBone effect.'
``````````
name = 'boneid'
type = 'number'
description = 'The bone to follow'

[ForcePlayerDrop]
description = 'Forces the Entity to be dropped, when it is being held by a player\'s gravitygun or physgun.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'

[FrameAdvance]
description = 'Advances the cycle of an animated entity.\r\n\r\nAnimations that loop will automatically reset the cycle so you don\'t have to - ones that do not will stop animating once you reach the end of their sequence.\r\n\r\n<warning>Do not call this function multiple times a frame, as it can cause unexpected results, such as animations playing at increased rate, etc.\r\n\r\n<page>NextBot:BodyMoveXY</page> calls this internally, so do not call this function before or after <page>NextBot:BodyMoveXY</page>.</warning>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'interval'
type = 'number'
description = 'How many seconds to advance the cycle. Set to 0 to let the engine calculate this for you based on <page>Global.CurTime</page>.'

[GetAbsVelocity]
description = 'Returns the entity\'s velocity.\r\n\r\n<note>Actually binds to CBaseEntity::GetLocalVelocity() which retrieves the velocity of the entity due to its movement in the world from forces such as gravity. Does not include velocity from entity-on-entity collision.</note>\r\n\r\n**Returns:** The velocity of the entity.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Vector'

[GetAngles]
description = 'Gets the angles of given entity.\r\n\r\n<bug issue="2764">This returns incorrect results for the local player clientside.</bug>\r\n\r\n<bug issue="3106">This will return the local player\'s <page>Global.EyeAngles</page> in <page text="rendering hooks">Category:3D_Rendering_Hooks</page>.</bug>\r\n\r\n<bug issue="3107">This will return <page>Global.Angle</page>(0,0,0) in <page text="rendering hooks">Category:3D_Rendering_Hooks</page> while paused in single-player.</bug>\r\n\r\n**Returns:** The angles of the entity.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Angle'

[GetAnimInfo]
description = 'Returns a table containing the number of frames, flags, name, and FPS of an entity\'s animation ID.\r\n\r\n<note>Animation ID is not the same as sequence ID.</note>\r\n\r\n**Returns:** Information about the animation, or nil if the index is out of bounds\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'animIndex'
type = 'number'
description = 'The animation ID to look up'
[[.returns]]
type = 'table'

[GetAnimTime]
description = 'Returns the last time the entity had an animation update. Returns 0 if the entity doesn\'t animate.\r\n\r\n**Returns:** The last time the entity had an animation update.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetAttachment]
description = 'Gets the orientation and position of the attachment by its ID, returns nothing if the attachment does not exist.\r\n\r\n<note>The update rate of this function is limited by the setting of ENT.AutomaticFrameAdvance for <page>Scripted Entities</page>!</note>\r\n\r\n<bug issue="1255">This will return improper values for viewmodels if used in <page>GM:CalcView</page>.</bug>\r\n\r\n**Returns:** The angle and position of the attachment. See the <page>Structures/AngPos</page>. Most notably, the table contains the keys "Ang" and "Pos".\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'attachmentId'
type = 'number'
description = 'The internal ID of the attachment.'
[[.returns]]
type = 'table'

[GetAttachments]
description = 'Returns a table containing all attachments of the given entitys model.\r\n\r\nReturns an empty table or **nil** in case it\'s model has no attachments.\r\n\r\n<bug issue="3167">This can have inconsistent results in single-player.</bug>\r\n\r\n**Returns:** Attachment data. See <page>Structures/AttachmentData</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'table'

[GetBaseVelocity]
description = 'Returns the entity\'s base velocity which is their velocity due to forces applied by other entities. This includes entity-on-entity collision or riding a treadmill.\r\n\r\n**Returns:** The base velocity of the entity.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Vector'

[GetBloodColor]
description = 'Returns the blood color of this entity. This can be set with <page>Entity:SetBloodColor</page>.\r\n\r\n**Returns:** Color from <page>Enums/BLOOD_COLOR</page>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetBodygroup]
description = 'Gets the exact value for specific bodygroup of given entity.\r\n\r\n**Returns:** Current bodygroup. Starts from 0.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'id'
type = 'number'
description = 'The id of bodygroup to get value of. Starts from 0.'
[[.returns]]
type = 'number'

[GetBodygroupCount]
description = 'Returns the count of possible values for this bodygroup.\r\n\r\nThis is **not** the maximum value, since the bodygroups start with 0, not 1.\r\n\r\n**Returns:** Count of values of passed bodygroup.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'bodygroup'
type = 'number'
description = 'The ID of bodygroup to retrieve count of.'
[[.returns]]
type = 'number'

[GetBodygroupName]
description = 'Gets the name of specific bodygroup for given entity.\r\n\r\n**Returns:** The name of the bodygroup\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'id'
type = 'number'
description = 'The id of bodygroup to get the name of.'
[[.returns]]
type = 'string'

[GetBodyGroups]
description = 'Returns a list of all bodygroups of the entity.\r\n\r\n**Returns:** Bodygroups as a table of <page>Structures/BodyGroupData</page>s if the entity can have bodygroups.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'table'

[GetBoneContents]
description = 'Returns the contents of the specified bone.\r\n\r\n**Returns:** The contents as a <page>Enums/CONTENTS</page> or 0 on failure.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'bone'
type = 'number'
description = 'The bone id. See <page>Entity:LookupBone</page>.'
[[.returns]]
type = 'number'

[GetBoneController]
description = 'Returns the value of the bone controller with the specified ID.\r\n\r\n<note>This is the precursor of pose parameters, and only works for Half Life 1: Source models supporting it.</note>\r\n\r\n**Returns:** The value set on the bone controller.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'boneID'
type = 'number'
description = 'ID of the bone controller. Goes from 0 to 3.'
[[.returns]]
type = 'number'

[GetBoneCount]
description = 'Returns the amount of bones in the entity.\r\n\r\n<note>Will return -1 for <page>Global.ClientsideModel</page> or undrawn entities until <page>Entity:SetupBones</page> is called on the entity.</note>\r\n\r\n**Returns:** The amount of bones in given entity; -1 on failure.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetBoneMatrix]
description = 'Returns the transformation matrix of a given bone on the entity\'s model. The matrix contains the transformation used to position the bone in the world. It is not relative to the parent bone.\r\n\r\nThis is equivalent to constructing a <page>VMatrix</page> using <page>Entity:GetBonePosition</page>.\r\n\r\n<bug issue="884">This can return the server\'s matrix during server lag.</bug>\r\n\r\n<bug issue="3285">This can return garbage serverside or a 0,0,0 fourth column (represents position) for v49 models.</bug>\r\n\r\n**Returns:** The matrix\r\n\r\n* Some entities don\'t update animation every frame such as prop_physics and won\'t have accurate bone matrix.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'boneID'
type = 'number'
description = 'The bone to retrieve matrix of.\r\n* Bones clientside and serverside will differ'
[[.returns]]
type = 'VMatrix'

[GetBoneName]
description = 'Returns name of given bone id.\r\n\r\n**Returns:** The name of given bone\r\n\r\n* nil in case we failed or entity doesn\'t have a model\r\n* "__INVALIDBONE__" in case the name cannot be read or the index is out of range.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'index'
type = 'number'
description = 'ID of bone to lookup name of'
[[.returns]]
type = 'string'

[GetBoneParent]
description = 'Returns parent bone of given bone.\r\n\r\n<note>Will return -1 for <page>Global.ClientsideModel</page> until <page>Entity:SetupBones</page> is called on the entity.</note>\r\n\r\n**Returns:** Parent bone ID or -1 if we failed for some reason.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'bone'
type = 'number'
description = 'The bode ID of the bone to get parent of'
[[.returns]]
type = 'number'

[GetBonePosition]
description = 'Returns the position and angle of the given attachment, relative to the world.\r\n\r\n<warning>This function can return entity\'s `GetPos()` instead if the entity doesn\'t have it\'s bone cache set up.\r\n\r\nTo ensure the bone position is correct use this:\r\n```lua\r\nlocal pos = ent:GetBonePosition(0)\r\nif pos == ent:GetPos() then\r\npos = ent:GetBoneMatrix(0):GetTranslation()\r\nend\r\n```\r\n</warning>\r\n<bug issue="884">This can return the server\'s position during server lag.</bug>\r\n\r\n<bug issue="3285">This can return garbage serverside or <page>Global.Vector</page>(0,0,0) for v49 models.</bug>\r\n\r\n<bug issue="3739">This can return garbage if a trace passed through the target bone during bone matrix access.</bug>\r\n\r\n**Returns:** The bone\'s position relative to the world. It can return nothing if the requested bone is out of bounds, or the entity has no model.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'boneIndex'
type = 'number'
description = 'The bone index of the bone to get the position of. See <page>Entity:LookupBone</page>.'
[[.returns]]
type = 'Vector'

[GetBoneSurfaceProp]
description = 'Returns the surface property of the specified bone.\r\n\r\n**Returns:** The surface property of the bone to be used with <page>util.GetSurfaceIndex</page> or an empty string on failure.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'bone'
type = 'number'
description = 'The bone id. See <page>Entity:LookupBone</page>.'
[[.returns]]
type = 'string'

[GetBrushPlane]
description = 'Returns info about given plane of non-nodraw brush model surfaces of the entity\'s model. Works on worldspawn as well.\r\n\r\n<warning>This only works on entities with brush models.</warning>\r\n\r\n**Returns:** The origin of the plane.\r\n\r\nThis will be either the first vertex\'s position (if available) or the plane\'s normal multiplied by the plane\'s distance.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'id'
type = 'number'
description = 'The index of the plane to get info of. Starts from 0.'
[[.returns]]
type = 'Vector'

[GetBrushPlaneCount]
description = 'Returns the amount of planes of non-nodraw brush model surfaces of the entity\'s model.\r\n\r\n**Returns:** The amount of brush model planes of the entity\'s model. This will be 0 for any non-brush model.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetBrushSurfaces]
description = 'Returns a table of brushes surfaces for brush model entities.\r\n\r\n**Returns:** Table of <page>SurfaceInfo</page>s if the entity has a brush model, or <page>no value</page> otherwise.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'table'

[GetCallbacks]
description = 'Returns the specified hook callbacks for this entity added with <page>Entity:AddCallback</page>\r\n\r\nThe callbacks can then be removed with <page>Entity:RemoveCallback</page>.\r\n\r\n**Returns:** A table containing the callbackid and function of all the callbacks for the specified hook\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'hook'
type = 'string'
description = 'The hook to retrieve the callbacks from, see <page>Entity Callbacks</page> for the possible hooks.'
[[.returns]]
type = 'table'

[GetChildBones]
description = 'Returns ids of child bones of given bone.\r\n\r\n**Returns:** A table of bone ids\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'boneid'
type = 'number'
description = 'Bone id to lookup children of'
[[.returns]]
type = 'table'

[GetChildren]
description = 'Gets the children of the entity - that is, every entity whose move parent is this entity.\r\n\r\n<note>This function returns <page>Entity:SetMoveParent</page> children, **NOT** <page>Entity:SetParent</page>!\r\n\r\n<page>Entity:SetParent</page> however also calls <page>Entity:SetMoveParent</page>.\r\n\r\n\r\n\r\nThis means that some entities in the returned list might have a NULL <page>Entity:GetParent</page>.\r\n\r\nThis also means that using this function on players will return their weapons on the client but not the server.</note>\r\n\r\n**Returns:** A list of movement children entities\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'table'

[GetClass]
description = 'Returns the classname of a entity. This is often the name of the Lua file or folder containing the files for the entity\r\n\r\n**Returns:** The entity\'s classname\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'string'

[GetCollisionBounds]
description = 'Returns an entity\'s collision bounding box. In most cases, this will return the same bounding box as <page>Entity:GetModelBounds</page> unless the entity does not have a physics mesh or it has a <page>PhysObj</page> different from the default.\r\n\r\n<bug issue="223">This can be out-of-sync between the client and server for weapons.</bug>\r\n\r\n**Returns:** The minimum vector of the collision bounds\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Vector'

[GetCollisionGroup]
description = 'Returns the entity\'s collision group\r\n\r\n**Returns:** The collision group. See <page>Enums/COLLISION_GROUP</page>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetColor]
description = 'Returns the color the entity is set to.\r\n\r\n<bug issue="2407">The returned color will not have the color metatable.</bug>\r\n\r\n**Returns:** The color of the entity as a <page>Color</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'table'

[GetConstrainedEntities]
description = 'Returns the two entities involved in a constraint ent, or nil if the entity is not a constraint.\r\n\r\n**Returns:** ent1\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Entity'

[GetConstrainedPhysObjects]
description = 'Returns the two entities physobjects involved in a constraint ent, or no value if the entity is not a constraint.\r\n\r\n**Returns:** phys1\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'PhysObj'

[GetCreationID]
description = 'Returns entity\'s creation ID. Unlike <page>Entity:EntIndex</page> or  <page>Entity:MapCreationID</page>, it will always increase and old values won\'t be reused.\r\n\r\n**Returns:** The creation ID\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetCreationTime]
description = 'Returns the time the entity was created on, relative to <page>Global.CurTime</page>.\r\n\r\n**Returns:** The time the entity was created on.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetCreator]
description = 'Gets the creator of the SENT.\r\n\r\n**Returns:** The creator, NULL for no creator.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Player'

[GetCustomCollisionCheck]
description = 'Returns whether this entity uses custom collision check set by <page>Entity:SetCustomCollisionCheck</page>.\r\n\r\n**Returns:** Whether this entity uses custom collision check or not\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[GetCycle]
description = 'Returns the frame of the currently played sequence. This will be a number between 0 and 1 as a representation of sequence progress.\r\n\r\n**Returns:** The frame of the currently played sequence\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetDTAngle]
description = '<internal></internal>\r\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\r\n\r\nGet an angle stored in the datatable of the entity.\r\n\r\n**Returns:** Requested angle.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'number'
description = 'Goes from 0 to 63.\r\nSpecifies what key to grab from datatable.'
[[.returns]]
type = 'Angle'

[GetDTBool]
description = '<internal></internal>\r\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\r\n\r\nGet a boolean stored in the datatable of the entity.\r\n\r\n**Returns:** Requested boolean.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'number'
description = 'Goes from 0 to 63.\r\nSpecifies what key to grab from datatable.'
[[.returns]]
type = 'boolean'

[GetDTEntity]
description = '<internal></internal>\r\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\r\n\r\nReturns an entity stored in the datatable of the entity.\r\n\r\n**Returns:** Requested entity.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'number'
description = 'Goes from 0 to 63.\r\nSpecifies what key to grab from datatable.'
[[.returns]]
type = 'Entity'

[GetDTFloat]
description = '<internal></internal>\r\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\r\n\r\nGet a float stored in the datatable of the entity.\r\n\r\n**Returns:** Requested float.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'number'
description = 'Goes from 0 to 31.\r\nSpecifies what key to grab from datatable.'
[[.returns]]
type = 'number'

[GetDTInt]
description = '<internal></internal>\r\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\r\n\r\nGet an integer stored in the datatable of the entity.\r\n\r\n**Returns:** 32-bit signed integer\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'number'
description = 'Goes from 0 to 63.\r\nSpecifies what key to grab from datatable.'
[[.returns]]
type = 'number'

[GetDTString]
description = '<internal></internal>\r\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\r\n\r\nGet a string stored in the datatable of the entity.\r\n\r\n**Returns:** Requested string.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'number'
description = 'Goes from 0 to 3.\r\nSpecifies what key to grab from datatable.'
[[.returns]]
type = 'string'

[GetDTVector]
description = '<internal></internal>\r\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\r\n\r\nGet a vector stored in the datatable of the entity.\r\n\r\n**Returns:** Requested vector.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'number'
description = 'Goes from 0 to 63.\r\nSpecifies what key to grab from datatable.'
[[.returns]]
type = 'Vector'

[GetEditingData]
description = 'Returns internal data about editable <page>Entity:NetworkVar</page>s.\r\n\r\nThis is used internally by <page>DEntityProperties</page> and <page>Editable Entities</page> system.\r\n\r\n<note>This function will only work on entities which had <page>Entity:InstallDataTable</page> called on them, which is done automatically for players and all <page>Scripted Entities</page>\r\n</note>\r\n\r\n**Returns:** The internal data\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'table'

[GetEffects]
description = 'Returns a bit flag of all engine effect flags of the entity.\r\n\r\n**Returns:** Engine effect flags, see <page>Enums/EF</page>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetEFlags]
description = 'Returns a bit flag of all engine flags of the entity.\r\n\r\n**Returns:** Engine flags, see <page>Enums/EFL</page>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetElasticity]
description = 'Returns the elasticity of this entity, used by some flying entities such as the Helicopter NPC to determine how much it should bounce around when colliding.\r\n\r\n**Returns:** elasticity\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetFlags]
description = 'Returns all flags of given entity.\r\n\r\n**Returns:** Flags of given entity as a bitflag, see <page>Enums/FL</page>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetFlexBounds]
description = 'Returns acceptable value range for the flex.\r\n\r\n**Returns:** The minimum value for this flex\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'flex'
type = 'number'
description = 'The ID of the flex to look up bounds of'
[[.returns]]
type = 'number'

[GetFlexIDByName]
description = 'Returns the ID of the flex based on given name.\r\n\r\n**Returns:** The ID of flex\r\n* nil if no flex with given name was found\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'name'
type = 'string'
description = 'The name of the flex to get the ID of. Case sensitive.'
[[.returns]]
type = 'number'

[GetFlexName]
description = 'Returns flex name.\r\n\r\n**Returns:** The flex name\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'id'
type = 'number'
description = 'The flex id to look up name of'
[[.returns]]
type = 'string'

[GetFlexNum]
description = 'Returns the number of flexes this entity has.\r\n\r\n**Returns:** The number of flexes.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetFlexScale]
description = 'Returns the flex scale of the entity.\r\n\r\n**Returns:** The flex scale\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetFlexWeight]
description = 'Returns current weight ( value ) of the flex.\r\n\r\n**Returns:** The current weight of the flex\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'flex'
type = 'number'
description = 'The ID of the flex to get weight of'
[[.returns]]
type = 'number'

[GetForward]
description = 'Returns the forward vector of the entity, as a normalized direction vector\r\n\r\n**Returns:** forwardDir\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Vector'

[GetFriction]
description = 'Returns how much friction an entity has. Entities default to 1 (100%) and can be higher or even negative.\r\n\r\n**Returns:** friction\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetGravity]
description = 'Gets the gravity multiplier of the entity.\r\n\r\n**Returns:** gravityMultiplier\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetGroundEntity]
description = 'Returns the object the entity is standing on.\r\n\r\n**Returns:** The ground entity.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Entity'

[GetGroundSpeedVelocity]
description = 'Returns the entity\'s ground speed velocity, which is based on the entity\'s walk/run speed and/or the ground speed of their sequence ( <page>Entity:GetSequenceGroundSpeed</page> ). Will return an empty <page>Vector</page> if the entity isn\'t moving on the ground.\r\n\r\n**Returns:** The ground speed velocity.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Vector'

[GetHitBoxBone]
description = 'Gets the bone the hit box is attached to.\r\n\r\n**Returns:** The number of the bone. Will be nil if the hit box index was out of range.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'hitbox'
type = 'number'
description = 'The number of the hit box.'
``````````
name = 'hboxset'
type = 'number'
description = 'The number of the hit box set. This should be 0 in most cases.\r\n\r\nNumbering for these sets start from 0. The total amount of sets can be found with <page>Entity:GetHitBoxSetCount</page>.'
[[.returns]]
type = 'number'

[GetHitBoxBounds]
description = 'Gets the bounds (min and max corners) of a hit box.\r\n\r\n**Returns:** Hit box mins. Will be nil if the hit box index was out of range.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'hitbox'
type = 'number'
description = 'The number of the hit box.'
``````````
name = 'group'
type = 'number'
description = 'The group of the hit box. This should be 0 in most cases.'
[[.returns]]
type = 'Vector'

[GetHitBoxCount]
description = 'Gets how many hit boxes are in a given hit box group\r\n\r\n**Returns:** The number of hit boxes.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'group'
type = 'number'
description = 'The number of the hit box group'
[[.returns]]
type = 'number'

[GetHitBoxGroupCount]
description = '<deprecated>You should use <page>Entity:GetHitboxSetCount</page> instead.</deprecated>\r\n\r\nReturns the number of hit box sets that an entity has. Functionally identical to <page>Entity:GetHitboxSetCount</page>\r\n\r\n**Returns:** number of hit box sets\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetHitBoxHitGroup]
description = 'Gets the hit group of a given hitbox in a given hitbox set.\r\n\r\n**Returns:** The hitbox group of given hitbox. See <page>Enums/HITGROUP</page>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'hitbox'
type = 'number'
description = 'The number of the hit box.'
``````````
name = 'hitboxset'
type = 'number'
description = 'The number of the hit box set. This should be 0 in most cases.\r\n\r\nNumbering for these sets start from 0. The total group count can be found with <page>Entity:GetHitBoxSetCount</page>.'
[[.returns]]
type = 'number'

[GetHitboxSet]
description = 'Returns entity\'s current hit box set\r\n\r\n**Returns:** The current hit box set id, or no value if the entity doesn\'t have hit boxes\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetHitboxSetCount]
description = 'Returns the amount of hitbox sets in the entity.\r\n\r\n**Returns:** The amount of hitbox sets in the entity.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetInternalVariable]
description = 'An interface for accessing internal key values on entities.\r\n\r\nSee <page>Entity:GetSaveTable</page> for a more detailed explanation. See <page>Entity:SetSaveValue</page> for the opposite of this function.\r\n\r\n**Returns:** The internal variable value\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'VariableName'
type = 'string'
description = 'Name of variable corresponding to an entity save value.'
[[.returns]]
type = 'any'

[GetKeyValues]
description = 'Returns a table containing all key values the entity has.\r\n\r\nSingle key values can usually be retrieved with <page>Entity:GetInternalVariable</page>.\r\n\r\n<note>This only includes engine defined key values. "targetname" is not an actual key value in-engine, use <page>Entity:GetName</page> for that instead. For custom key values, use <page>GM:EntityKeyValue</page> or <page>ENTITY:KeyValue</page> to capture and store them.</note>\r\n<note>Not all key values can be retrieved. Some of them are write-only.</note>\r\n\r\n**Returns:** A table of key values.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'table'

[GetLayerCycle]
description = 'Returns the animation cycle/frame for given layer.\r\n\r\n<note>This function only works on <page>BaseAnimatingOverlay</page> entities.</note>\r\n\r\n**Returns:** The animation cycle/frame for given layer.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'layerID'
type = 'number'
description = 'The Layer ID'
[[.returns]]
type = 'number'

[GetLayerDuration]
description = 'Returns the duration of given layer.\r\n\r\n<note>This function only works on <page>BaseAnimatingOverlay</page> entities.</note>\r\n\r\n**Returns:** The duration of the layer\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'layerID'
type = 'number'
description = 'The Layer ID'
[[.returns]]
type = 'number'

[GetLayerPlaybackRate]
description = 'Returns the layer playback rate. See also <page>Entity:GetLayerDuration</page>.\r\n<note>This function only works on <page>BaseAnimatingOverlay</page> entities.</note>\r\n\r\n**Returns:** The current playback rate.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'layerID'
type = 'number'
description = 'The Layer ID'
[[.returns]]
type = 'number'

[GetLayerSequence]
description = 'Returns the sequence id of given layer.\r\n\r\n<note>This function only works on <page>BaseAnimatingOverlay</page> entities.</note>\r\n\r\n**Returns:** The sequenceID of the layer.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'layerID'
type = 'number'
description = 'The Layer ID.'
[[.returns]]
type = 'number'

[GetLayerWeight]
description = 'Returns the current weight of the layer. See <page>Entity:SetLayerWeight</page> for more information.\r\n\r\n<note>This function only works on <page>BaseAnimatingOverlay</page> entities.</note>\r\n\r\n**Returns:** The current weight of the layer\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'layerID'
type = 'number'
description = 'The Layer ID'
[[.returns]]
type = 'number'

[GetLightingOriginEntity]
description = 'Returns the entity that is being used as the light origin position for this entity.\r\n\r\n**Returns:** The lighting entity. This will usually be NULL.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Entity'

[GetLocalAngles]
description = 'Returns the rotation of the entity relative to its parent entity.\r\n\r\n**Returns:** Relative angle\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Angle'

[GetLocalAngularVelocity]
description = 'Returns the non-VPhysics angular velocity of the entity relative to its parent entity.\r\n\r\n**Returns:** The velocity\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Angle'

[GetLocalPos]
description = 'Returns entity\'s position relative to it\'s parent.\r\n\r\n**Returns:** Relative position\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Vector'

[GetManipulateBoneAngles]
description = 'Gets the entity\'s angle manipulation of the given bone. This is relative to the default angle, so the angle is zero when unmodified.\r\n\r\n**Returns:** The entity\'s angle manipulation of the given bone.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'boneID'
type = 'number'
description = 'The bone\'s ID'
[[.returns]]
type = 'Angle'

[GetManipulateBoneJiggle]
description = 'Returns the jiggle amount of the entity\'s bone.\r\n\r\nSee <page>Entity:ManipulateBoneJiggle</page> for more info.\r\n\r\n**Returns:** Returns a value ranging from 0 to 255 depending on the value set with <page>Entity:ManipulateBoneJiggle</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'boneID'
type = 'number'
description = 'The bone ID'
[[.returns]]
type = 'number'

[GetManipulateBonePosition]
description = 'Gets the entity\'s position manipulation of the given bone. This is relative to the default position, so it is zero when unmodified.\r\n\r\n**Returns:** The entity\'s position manipulation of the given bone.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'boneId'
type = 'number'
description = 'The bone\'s ID'
[[.returns]]
type = 'Vector'

[GetManipulateBoneScale]
description = 'Gets the entity\'s scale manipulation of the given bone. Normal scale is Vector( 1, 1, 1 )\r\n\r\n**Returns:** The entity\'s scale manipulation of the given bone\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'boneID'
type = 'number'
description = 'The bone\'s ID'
[[.returns]]
type = 'Vector'

[GetMaterial]
description = 'Returns the material override for this entity.\r\n\r\nReturns an empty string if no material override exists. Use <page>Entity:GetMaterials</page> to list it\'s default materials.\r\n\r\n<bug issue="3362">The server\'s value takes priority on the client.</bug>\r\n\r\n**Returns:** material\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'string'

[GetMaterials]
description = 'Returns all materials of the entity\'s model.\r\n\r\nThis function is unaffected by <page>Entity:SetSubMaterial</page> as it returns the original materials.\r\n\r\n<bug issue="3362">The server\'s values take priority on the client.</bug>\r\n\r\n<bug>The table returned by this function will not contain materials if they are missing from the disk/repository. This means that if you are attempting to find the ID of a material to replace with <page>Entity:SetSubMaterial</page> and there are missing materials on the model, all subsequent materials will be offset in the table, meaning that the ID you are trying to get will be incorrect.</bug>\r\n\r\n**Returns:** A table containing full paths to the materials of the model.\r\n\r\n<bug issue="3216">This table is limited to 127 materials, even if the entity has more.</bug>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'table'

[GetMaterialType]
description = 'Returns the surface material of this entity.\r\n\r\n**Returns:** Surface material. See <page>Enums/MAT</page>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetMaxHealth]
description = 'Returns the max health that the entity was given. It can be set via <page>Entity:SetMaxHealth</page>.\r\n\r\n**Returns:** Max health.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetModel]
description = 'Gets the model of given entity.\r\n\r\n<bug issue="2246">This does not necessarily return the model\'s path, as is the case for brush and virtual models. This is intentional behaviour, however, there is currently no way to retrieve the actual file path.</bug>\r\n\r\n**Returns:** The entity\'s model. Will be a filesystem path for most models.\r\n\r\nThis will be <page>nil</page> for entities which cannot have models, such as point entities.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'string'

[GetModelBounds]
description = 'Returns the entity\'s model bounds. This is different than the collision bounds/hull. This is not scaled with <page>Entity:SetModelScale</page>, and will return the model\'s original, unmodified mins and maxs.\r\n\r\n**Returns:** The minimum vector of the bounds\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Vector'

[GetModelContents]
description = 'Returns the contents of the entity\'s current model.\r\n\r\n**Returns:** The contents of the entity\'s model. See <page>Enums/CONTENTS</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetModelPhysBoneCount]
description = 'Gets the physics bone count of the entity\'s model. This is only applicable to `anim` type <page>Scripted Entities</page> with ragdoll models.\r\n\r\n**Returns:** How many physics bones exist on the model.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetModelRadius]
description = 'Gets the models radius.\r\n\r\n**Returns:** The radius of the model\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetModelRenderBounds]
description = 'Returns the entity\'s model render bounds. By default this will return the same bounds as <page>Entity:GetModelBounds</page>.\r\n\r\n**Returns:** The minimum vector of the bounds\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Vector'

[GetModelScale]
description = 'Gets the selected entity\'s model scale.\r\n\r\n**Returns:** Scale of that entity\'s model.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetMomentaryRotButtonPos]
description = 'Returns the amount a momentary_rot_button entity is turned based on the given angle. 0 meaning completely turned closed, 1 meaning completely turned open.\r\n\r\n<warning>This only works on momentary_rot_button entities.</warning>\r\n\r\n**Returns:** The amount the momentary_rot_button is turned, ranging from 0 to 1, or nil if the entity is not a momentary_rot_button.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'turnAngle'
type = 'Angle'
description = 'The angle of rotation to compare - usually should be <page>Entity:GetAngles</page>.'
[[.returns]]
type = 'number'

[GetMoveCollide]
description = 'Returns the move collide type of the entity. The move collide is the way a physics object reacts to hitting an object - will it bounce, slide?\r\n\r\n**Returns:** The move collide type, see <page>Enums/MOVECOLLIDE</page>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetMoveParent]
description = 'Returns the movement parent of this entity.\r\n\r\nSee <page>Entity:SetMoveParent</page> for more info.\r\n\r\n**Returns:** The movement parent of this entity.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Entity'

[GetMoveType]
description = 'Returns the entity\'s movetype\r\n\r\n**Returns:** Move type. See <page>Enums/MOVETYPE</page>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetName]
description = 'Returns the mapping name of this entity.\r\n\r\n**Returns:** The name of the Entity\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'string'

[GetNetworkAngles]
description = 'Gets networked angles for entity.\r\n\r\n**Returns:** angle\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Angle'

[GetNetworkedAngle]
description = '<deprecated>You should use <page>Entity:GetNWAngle</page> instead.</deprecated>\r\n\r\nRetrieves a networked angle value at specified index on the entity that is set by <page>Entity:SetNetworkedAngle</page>.\r\n\r\n**Returns:** The retrieved value\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key that is associated with the value'
``````````
name = 'fallback'
type = 'Angle'
description = 'The value to return if we failed to retrieve the value. ( If it isn\'t set )'
[[.returns]]
type = 'Angle'

[GetNetworkedBool]
description = '<deprecated>You should use <page>Entity:GetNWBool</page> instead.</deprecated>\r\n\r\nRetrieves a networked boolean value at specified index on the entity that is set by <page>Entity:SetNetworkedBool</page>.\r\n\r\n**Returns:** The retrieved value\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key that is associated with the value'
``````````
name = 'fallback'
type = 'boolean'
description = 'The value to return if we failed to retrieve the value. ( If it isn\'t set )'
[[.returns]]
type = 'boolean'

[GetNetworkedEntity]
description = '<deprecated>You should use <page>Entity:GetNWEntity</page> instead.</deprecated>\r\n\r\nRetrieves a networked float value at specified index on the entity that is set by <page>Entity:SetNetworkedEntity</page>.\r\n\r\n**Returns:** The retrieved value\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key that is associated with the value'
``````````
name = 'fallback'
type = 'Entity'
description = 'The value to return if we failed to retrieve the value. ( If it isn\'t set )'
[[.returns]]
type = 'Entity'

[GetNetworkedFloat]
description = '<deprecated>You should use <page>Entity:GetNWFloat</page> instead.</deprecated>\r\n\r\nRetrieves a networked float value at specified index on the entity that is set by <page>Entity:SetNetworkedFloat</page>.\r\n\r\nSeems to be the same as <page>Entity:GetNetworkedInt</page>.\r\n\r\n**Returns:** The retrieved value\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key that is associated with the value'
``````````
name = 'fallback'
type = 'number'
description = 'The value to return if we failed to retrieve the value. ( If it isn\'t set )'
[[.returns]]
type = 'number'

[GetNetworkedInt]
description = '<deprecated>You should use <page>Entity:GetNWInt</page> instead.</deprecated>\r\n\r\nRetrieves a networked integer value at specified index on the entity that is set by <page>Entity:SetNetworkedInt</page>.\r\n\r\n**Returns:** The retrieved value\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key that is associated with the value'
``````````
name = 'fallback'
type = 'number'
description = 'The value to return if we failed to retrieve the value. ( If it isn\'t set )'
[[.returns]]
type = 'number'

[GetNetworkedString]
description = '<deprecated>You should use <page>Entity:GetNWString</page> instead.</deprecated>\r\n\r\nRetrieves a networked string value at specified index on the entity that is set by <page>Entity:SetNetworkedString</page>.\r\n\r\n**Returns:** The retrieved value\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key that is associated with the value'
``````````
name = 'fallback'
type = 'string'
description = 'The value to return if we failed to retrieve the value. ( If it isn\'t set )'
[[.returns]]
type = 'string'

[GetNetworkedVarProxy]
description = '<deprecated>You should be using <page>Entity:GetNWVarProxy</page> instead.</deprecated>\r\nReturns callback function for given NWVar of this entity.\r\n\r\n**Returns:** The callback of given NWVar, if any.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'name'
type = 'string'
description = 'The name of the NWVar to get callback of.'
[[.returns]]
type = 'function'

[GetNetworkedVarTable]
description = '<deprecated>You should be using <page>Entity:GetNWVarTable</page> instead.</deprecated>\r\n\r\nReturns all the networked variables in an entity.\r\n\r\n**Returns:** Key-Value table of all networked variables.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'table'

[GetNetworkedVector]
description = '<deprecated>You should use <page>Entity:GetNWVector</page> instead.</deprecated>\r\n\r\nRetrieves a networked vector value at specified index on the entity that is set by <page>Entity:SetNetworkedVector</page>.\r\n\r\n**Returns:** The retrieved value\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key that is associated with the value'
``````````
name = 'fallback'
type = 'Vector'
description = 'The value to return if we failed to retrieve the value. ( If it isn\'t set )'
[[.returns]]
type = 'Vector'

[GetNetworkOrigin]
description = 'Gets networked origin for entity.\r\n\r\n**Returns:** origin\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Vector'

[GetNetworkVars]
description = 'Returns all network vars created by <page>Entity:NetworkVar</page> and <page>Entity:NetworkVarElement</page> and their current values.\r\n\r\nThis is used internally by the duplicator.\r\n\r\nFor NWVars see <page>Entity:GetNWVarTable</page>.\r\n\r\n<note>This function will only work on entities which had <page>Entity:InstallDataTable</page> called on them, which is done automatically for players and all <page>Scripted Entities</page></note>\r\n\r\n**Returns:** The Key-Value formatted table of network var names and their current values\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'table'

[GetNoDraw]
description = 'Returns if the entity\'s rendering and transmitting has been disabled.\r\n\r\n<note>This is equivalent to calling <page>Entity:IsEffectActive</page>( EF_NODRAW )</note>\r\n\r\n**Returns:** Whether the entity\'s rendering and transmitting has been disabled.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[GetNumBodyGroups]
description = 'Returns the body group count of the entity.\r\n\r\n**Returns:** Amount of bodygroups the entitys model has\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetNumPoseParameters]
description = 'Returns the number of pose parameters this entity has.\r\n\r\n**Returns:** Amount of pose parameters the entity has\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetNWAngle]
description = 'Retrieves a networked angle value at specified index on the entity that is set by <page>Entity:SetNWAngle</page>.\r\n\r\n**Returns:** The value associated with the key\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key that is associated with the value'
``````````
name = 'fallback'
type = 'any'
description = 'The value to return if we failed to retrieve the value. (If it isn\'t set)'
[[.returns]]
type = 'any'

[GetNWBool]
description = 'Retrieves a networked boolean value at specified index on the entity that is set by <page>Entity:SetNWBool</page>.\r\n\r\n**Returns:** The value associated with the key\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key that is associated with the value'
``````````
name = 'fallback'
type = 'any'
description = 'The value to return if we failed to retrieve the value. (If it isn\'t set)'
[[.returns]]
type = 'any'

[GetNWEntity]
description = 'Retrieves a networked entity value at specified index on the entity that is set by <page>Entity:SetNWEntity</page>.\r\n\r\n**Returns:** The value associated with the key\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key that is associated with the value'
``````````
name = 'fallback'
type = 'any'
description = 'The value to return if we failed to retrieve the value. (If it isn\'t set)'
[[.returns]]
type = 'any'

[GetNWFloat]
description = 'Retrieves a networked float value at specified index on the entity that is set by <page>Entity:SetNWFloat</page>.\r\n\r\n**Returns:** The value associated with the key\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key that is associated with the value'
``````````
name = 'fallback'
type = 'any'
description = 'The value to return if we failed to retrieve the value. (If it isn\'t set)'
[[.returns]]
type = 'any'

[GetNWInt]
description = 'Retrieves a networked integer (whole number) value that was previously set by <page>Entity:SetNWInt</page>.\r\n\r\n<bug issue="3374">This function will not round decimal values as it actually networks a float internally.</bug>\r\n\r\n**Returns:** The value associated with the key\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key that is associated with the value'
``````````
name = 'fallback'
type = 'any'
description = 'The value to return if we failed to retrieve the value (If it isn\'t set).'
[[.returns]]
type = 'any'

[GetNWString]
description = 'Retrieves a networked string value at specified index on the entity that is set by <page>Entity:SetNWString</page>.\r\n\r\n**Returns:** The value associated with the key\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key that is associated with the value'
``````````
name = 'fallback'
type = 'any'
description = 'The value to return if we failed to retrieve the value. (If it isn\'t set)'
[[.returns]]
type = 'any'

[GetNWVarProxy]
description = 'Returns callback function for given NWVar of this entity.\r\n\r\n**Returns:** The callback of given NWVar, or nil if not found.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'any'
description = 'The key of the NWVar to get callback of.'
[[.returns]]
type = 'function'

[GetNWVarTable]
description = 'Returns all the networked variables in an entity.\r\n\r\n**Returns:** Key-Value table of all networked variables.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'table'

[GetNWVector]
description = 'Retrieves a networked vector value at specified index on the entity that is set by <page>Entity:SetNWVector</page>.\r\n\r\n**Returns:** The value associated with the key\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key that is associated with the value'
``````````
name = 'fallback'
type = 'any'
description = 'The value to return if we failed to retrieve the value. (If it isn\'t set)'
[[.returns]]
type = 'any'

[GetOwner]
description = 'Returns the owner entity of this entity. See <page>Entity:SetOwner</page> for more info.\r\n\r\n**Returns:** The owner entity of this entity.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Entity'

[GetParent]
description = 'Returns the parent entity of this entity.\r\n\r\n**Returns:** parentEntity\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Entity'

[GetParentAttachment]
description = 'Returns the attachment index of the entity\'s parent. Returns 0 if the entity is not parented to a specific attachment or if it isn\'t parented at all.\r\n\r\nThis is set by second argument of <page>Entity:SetParent</page> or the **SetParentAttachment** input.\r\n\r\n**Returns:** The parented attachment index\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetParentPhysNum]
description = 'If the entity is parented to an entity that has a model with multiple physics objects (like a ragdoll), this is used to retrieve what physics object number the entity is parented to on it\'s parent.\r\n\r\n**Returns:** The physics object id, or nil if the entity has no parent\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetParentWorldTransformMatrix]
description = 'Returns the position and angle of the entity\'s move parent as a 3x4 matrix (<page>VMatrix</page> is 4x4 so the fourth row goes unused). The first three columns store the angle as a [rotation matrix](https://en.wikipedia.org/wiki/Rotation_matrix), and the fourth column stores the position vector.\r\n\r\n**Returns:** The position and angle matrix.\r\n\r\nIf the entity has no move parent, an identity matrix will be returned.\r\nIf the entity is <page text="parented to attachment">Entity:GetParentAttachment</page> 0 or the parent isn\'t a BaseAnimating entity, the equivalent of <page>Entity</page>:<page text="GetMoveParent()">Entity:GetMoveParent</page>:<page text="GetWorldTransformMatrix()">Entity:GetWorldTransformMatrix</page> will be returned.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'VMatrix'

[GetPersistent]
description = 'Returns whether the entity is persistent or not.\r\n\r\nSee <page>Entity:SetPersistent</page> for more information on persistence.\r\n\r\n**Returns:** True if the entity is set to be persistent.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[GetPhysicsAttacker]
description = 'Returns player who is claiming kills of physics damage the entity deals.\r\n\r\n**Returns:** The player. If entity that was set is not a player, it will return NULL entity.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'timeLimit'
type = 'number'
description = 'The time to check if the entity was still a proper physics attacker.\r\n\r\n<note>Some entities such as the Combine Ball disregard the time limit and always return the physics attacker.</note>'
[[.returns]]
type = 'Player'

[GetPhysicsObject]
description = 'Returns the entity\'s physics object, if the entity has physics.\r\n\r\n<note>Entities don\'t have clientside physics objects by default, so this will return [NULL PHYSOBJ] on the client in most cases.</note>\r\n\r\n**Returns:** The entity\'s physics object.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'PhysObj'

[GetPhysicsObjectCount]
description = 'Returns the number of physics objects an entity has (usually 1 for non-ragdolls)\r\n\r\n**Returns:** numObjects\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetPhysicsObjectNum]
description = 'Returns a specific physics object from an entity with multiple <page>PhysObj</page>ects (like ragdolls)\r\n\r\nSee also <page>Entity:TranslateBoneToPhysBone</page>.\r\n\r\n**Returns:** The physics object\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'physNum'
type = 'number'
description = 'The number corresponding to the <page>PhysObj</page> to grab. Starts at 0.'
[[.returns]]
type = 'PhysObj'

[GetPlaybackRate]
description = 'Returns the playback rate of the main sequence on this entity, with 1.0 being the default speed.\r\n\r\n**Returns:** The playback rate.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetPos]
description = 'Gets the position of entity in world.\r\n\r\n**Returns:** The position of the entity.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Vector'

[GetPoseParameter]
description = 'Returns the pose parameter value\r\n\r\n**Returns:** Value of given pose parameter.\r\n\r\n<warning>This value will be from 0 - 1 on the client and from minimum range to maximum range on the server! You\'ll have to <page text="remap">math.Remap</page> this value clientside to <page>Entity:GetPoseParameterRange</page>\'s returns if you want get the actual pose parameter value. See <page>Entity:SetPoseParameter</page>\'s example.</warning>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'name'
type = 'string'
description = 'Pose parameter name to look up'
[[.returns]]
type = 'number'

[GetPoseParameterName]
description = 'Returns name of given pose parameter\r\n\r\n**Returns:** Name of given pose parameter\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'id'
type = 'number'
description = 'Id of the pose paremeter'
[[.returns]]
type = 'string'

[GetPoseParameterRange]
description = 'Returns pose parameter range\r\n\r\n**Returns:** The minimum value\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'id'
type = 'number'
description = 'Pose parameter ID to look up'
[[.returns]]
type = 'number'

[GetPredictable]
description = 'Returns whether this entity is predictable or not.\r\n\r\nSee <page>Entity:SetPredictable</page> for more information\r\n\r\n**Returns:** Whether this entity is predictable or not.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[GetRagdollOwner]
description = 'Returns the entity which the ragdoll came from. The opposite of <page>Player:GetRagdollEntity</page>.\r\n\r\n**Returns:** The entity who owns the ragdoll.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Entity'

[GetRenderAngles]
description = 'Returns the entity\'s render angles, set by <page>Entity:SetRenderAngles</page> in a drawing hook.\r\n\r\n**Returns:** The entitys render angles\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Angle'

[GetRenderBounds]
description = 'Returns render bounds of the entity. Can be overridden by <page>Entity:SetRenderBounds</page>.\r\n\r\nIf the render bounds are not inside players view, the entity will not be drawn!\r\n\r\n**Returns:** The minimum vector of the bounds\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Vector'

[GetRenderFX]
description = 'Returns current render FX of the entity.\r\n\r\n**Returns:** The current render FX of the entity. See <page>Enums/kRenderFx</page>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetRenderGroup]
description = 'Returns the render group of the entity.\r\n\r\n**Returns:** The render group. See <page>Enums/RENDERGROUP</page>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetRenderMode]
description = 'Returns the render mode of the entity.\r\n\r\n**Returns:** The render Mode. See <page>Enums/RENDERMODE</page>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetRenderOrigin]
description = 'Returns the entity\'s render origin, set by <page>Entity:SetRenderOrigin</page> in a drawing hook.\r\n\r\n**Returns:** The entitys render origin\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Vector'

[GetRight]
description = 'Returns the rightward vector of the entity, as a normalized direction vector\r\n\r\n**Returns:** rightDir\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Vector'

[GetRotatedAABB]
description = 'Returns the min and max of the entity\'s axis-aligned bounding box.\r\n\r\n**Returns:** Minimum extent of the AABB\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'min'
type = 'Vector'
description = 'Minimum extent of the bounding box.'
``````````
name = 'max'
type = 'Vector'
description = 'Maximum extent of the bounding box.'
[[.returns]]
type = 'Vector'

[GetSaveTable]
description = 'Returns a table of save values for an entity.\r\n\r\nThese tables are not the same between the client and the server, and different entities may have different fields.\r\n\r\nYou can get the list different fields an entity has by looking at it\'s source code ( the 2013 SDK can be found online, https://github.com/ValveSoftware/source-sdk-2013 ). Accessible fields are defined by each DEFINE_FIELD and DEFINE_KEYFIELD inside the DATADESC block.\r\n\r\nTake the headcrab, for example:\r\n\r\n```\r\nBEGIN_DATADESC( CBaseHeadcrab )\r\n// m_nGibCount - don\'t save\r\nDEFINE_FIELD( m_bHidden, FIELD_BOOLEAN ),\r\nDEFINE_FIELD( m_flTimeDrown, FIELD_TIME ),\r\nDEFINE_FIELD( m_bCommittedToJump, FIELD_BOOLEAN ),\r\nDEFINE_FIELD( m_vecCommittedJumpPos, FIELD_POSITION_VECTOR ),\r\nDEFINE_FIELD( m_flNextNPCThink, FIELD_TIME ),\r\nDEFINE_FIELD( m_flIgnoreWorldCollisionTime, FIELD_TIME ),\r\n\r\nDEFINE_KEYFIELD( m_bStartBurrowed, FIELD_BOOLEAN, "startburrowed" ),\r\nDEFINE_FIELD( m_bBurrowed, FIELD_BOOLEAN ),\r\nDEFINE_FIELD( m_flBurrowTime, FIELD_TIME ),\r\nDEFINE_FIELD( m_nContext, FIELD_INTEGER ),\r\nDEFINE_FIELD( m_bCrawlFromCanister, FIELD_BOOLEAN ),\r\nDEFINE_FIELD( m_bMidJump, FIELD_BOOLEAN ),\r\nDEFINE_FIELD( m_nJumpFromCanisterDir, FIELD_INTEGER ),\r\nDEFINE_FIELD( m_bHangingFromCeiling, FIELD_BOOLEAN ),\r\nDEFINE_FIELD( m_flIlluminatedTime, FIELD_TIME ),\r\n\r\nDEFINE_INPUTFUNC( FIELD_VOID, "Burrow", InputBurrow ),\r\nDEFINE_INPUTFUNC( FIELD_VOID, "BurrowImmediate", InputBurrowImmediate ),\r\nDEFINE_INPUTFUNC( FIELD_VOID, "Unburrow", InputUnburrow ),\r\nDEFINE_INPUTFUNC( FIELD_VOID, "StartHangingFromCeiling", InputStartHangingFromCeiling ),\r\nDEFINE_INPUTFUNC( FIELD_VOID, "DropFromCeiling", InputDropFromCeiling ),\r\n\r\n// Function Pointers\r\nDEFINE_THINKFUNC( EliminateRollAndPitch ),\r\nDEFINE_THINKFUNC( ThrowThink ),\r\nDEFINE_ENTITYFUNC( LeapTouch ),\r\nEND_DATADESC()\r\n```\r\n\r\n\r\nFor each **DEFINE_FIELD**, the save table will have a key with name of **first** argument.\r\n\r\nFor each **DEFINE_KEYFIELD**, the save table will have a key with name of the **third** argument.\r\n\r\nSee <page>Entity:GetInternalVariable</page> for only retrieving one key of the save table.\r\n\r\n**Returns:** A table containing all save values in key/value format.\r\n\r\nThe value may be a sequential table (starting with 1) if the field in question is an array in engine.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'showAll'
type = 'boolean'
description = 'If set, shows all variables, not just the ones for save.'
[[.returns]]
type = 'table'

[GetSequence]
description = 'Return the index of the model sequence that is currently active for the entity.\r\n\r\n**Returns:** The index of the model sequence.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetSequenceActivity]
description = 'Return activity id out of sequence id. Opposite of <page>Entity:SelectWeightedSequence</page>.\r\n\r\n**Returns:** The activity ID, ie <page>Enums/ACT</page>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'seq'
type = 'number'
description = 'The sequence ID'
[[.returns]]
type = 'number'

[GetSequenceActivityName]
description = 'Returns the activity name for the given sequence id.\r\n\r\n**Returns:** The <page>Enums/ACT</page> as a string, returns "Not Found!" with an invalid sequence and "No model!" when no model is set.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'sequenceId'
type = 'number'
description = 'The sequence id.'
[[.returns]]
type = 'string'

[GetSequenceCount]
description = 'Returns the amount of sequences ( animations ) the entity\'s model has.\r\n\r\n**Returns:** The amount of sequences ( animations ) the entity\'s model has.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetSequenceGroundSpeed]
description = 'Returns the ground speed of the entity\'s sequence.\r\n\r\n**Returns:** The ground speed of this sequence.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'sequenceId'
type = 'number'
description = 'The sequence ID.'
[[.returns]]
type = 'number'

[GetSequenceInfo]
description = 'Returns a table of information about an entity\'s sequence.\r\n\r\n**Returns:** Table of information about the entity\'s sequence, or nil is ID is out of range. See <page>Structures/SequenceInfo</page>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'sequenceId'
type = 'number'
description = 'The sequence id of the entity.'
[[.returns]]
type = 'table'

[GetSequenceList]
description = 'Returns a list of all sequences ( animations ) the model has.\r\n\r\n**Returns:** The list of all sequences ( animations ) the model has. The indices start with 0!\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'table'

[GetSequenceMoveDist]
description = 'Returns an entity\'s sequence move distance (the change in position over the course of the entire sequence).\r\n\r\n**Returns:** The move distance of the sequence.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'sequenceId'
type = 'number'
description = 'The sequence index.'
[[.returns]]
type = 'number'

[GetSequenceMovement]
description = 'Returns the delta movement and angles of a sequence of the entity\'s model.\r\n\r\n**Returns:** Whether the operation was successful\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'sequenceId'
type = 'number'
description = 'The sequence index. See <page>Entity:GetSequenceName</page>.'
``````````
name = 'startCycle'
type = 'number'
description = 'The sequence start cycle. 0 is the start of the animation, 1 is the end.'
``````````
name = 'endCyclnde'
type = 'number'
description = 'The sequence end cycle. 0 is the start of the animation, 1 is the end. Values like 2, etc are allowed.'
[[.returns]]
type = 'boolean'

[GetSequenceMoveYaw]
description = 'Returns the change in heading direction in between the start and the end of the sequence.\r\n\r\n**Returns:** The yaw delta. Returns 99999 for no movement.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'seq'
type = 'number'
description = 'The sequence index. See <page>Entity:LookupSequence</page>.'
[[.returns]]
type = 'number'

[GetSequenceName]
description = 'Return the name of the sequence for the index provided.\r\nRefer to <page>Entity:GetSequence</page> to find the current active sequence on this entity.\r\n\r\n**Returns:** Name of the sequence.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'index'
type = 'number'
description = 'The index of the sequence to look up.'
[[.returns]]
type = 'string'

[GetShouldPlayPickupSound]
description = 'Checks if the entity plays a sound when picked up by a player.\r\n\r\n<bug pull="1488">This will return nil if <page>Entity:SetShouldPlayPickupSound</page> has not been called.</bug>\r\n\r\n**Returns:** True if it plays the pickup sound, false otherwise.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[GetShouldServerRagdoll]
description = 'Returns if entity should create a server ragdoll on death or a client one.\r\n\r\n**Returns:** Returns true if ragdoll will be created on server, false if on client\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[GetSkin]
description = 'Returns the skin index of the current skin.\r\n\r\n**Returns:** skinIndex\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetSolid]
description = 'Returns solid type of an entity.\r\n\r\n**Returns:** The solid type. See the <page>Enums/SOLID</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetSolidFlags]
description = 'Returns solid flag(s) of an entity.\r\n\r\n**Returns:** The flag(s) of the entity, see <page>Enums/FSOLID</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetSpawnEffect]
description = 'Returns if we should show a spawn effect on spawn on this entity.\r\n\r\n**Returns:** The flag to allow or disallow the spawn effect.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[GetSpawnFlags]
description = 'Returns the bitwise spawn flags used by the entity.\r\n\r\n**Returns:** The spawn flags of the entity, see <page text="SF_Enums">Enums/SF</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetSubMaterial]
description = 'Returns the material override for the given index.\r\n\r\nReturns "" if no material override exists. Use <page>Entity:GetMaterials</page> to list it\'s default materials.\r\n\r\n<bug issue="3362">The server\'s value takes priority on the client.</bug>\r\n\r\n**Returns:** The material that overrides this index, if any.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'index'
type = 'number'
description = 'The index of the sub material. Acceptable values are from 0 to 31.'
[[.returns]]
type = 'string'

[GetSubModels]
description = 'Returns a list of models included into the entity\'s model in the .qc file.\r\n\r\n**Returns:** The list of models included into the entity\'s model in the .qc file.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'table'

[GetTable]
description = 'Returns the table that contains all values saved within the entity.\r\n\r\n**Returns:** entTable\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'table'

[GetTouchTrace]
description = 'Returns the last trace used in the collision callbacks such as <page>ENTITY:StartTouch</page>, <page>ENTITY:Touch</page> and <page>ENTITY:EndTouch</page>.\r\n\r\n<note>This returns the last collision trace used, regardless of the entity that caused it. As such, it\'s only reliable when used in the hooks mentioned above</note>\r\n\r\n**Returns:** The <page>Structures/TraceResult</page>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'table'

[GetTransmitWithParent]
description = 'Returns true if the TransmitWithParent flag is set or not.\r\n\r\n**Returns:** Is the TransmitWithParent flag is set or not\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[GetUnFreezable]
description = 'Returns if the entity is unfreezable, meaning it can\'t be frozen with the physgun. By default props are freezable, so this function will typically return false.\r\n\r\n<bug pull="1488">This will return nil if <page>Entity:SetUnFreezable</page> has not been called.</bug>\r\n\r\n**Returns:** True if the entity is unfreezable, false otherwise.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[GetUp]
description = 'Returns the upward vector of the entity, as a normalized direction vector\r\n\r\n**Returns:** upDir\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Vector'

[GetVar]
description = 'Retrieves a value from entity\'s <page>Entity:GetTable</page>. Set by <page>Entity:SetVar</page>.\r\n\r\n**Returns:** Retrieved value\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'any'
description = 'Key of the value to retrieve'
``````````
name = 'default'
type = 'any'
description = 'A default value to fallback to if we couldn\'t retrieve the value from entity'
[[.returns]]
type = 'any'

[GetVelocity]
description = 'Returns the entity\'s velocity.\r\n\r\n<note>Actually binds to CBaseEntity::GetAbsVelocity() on the server and C_BaseEntity::EstimateAbsVelocity() on the client. This returns the total velocity of the entity and is equal to local velocity + base velocity.</note>\r\n\r\n<bug issue="774">This can become out-of-sync on the client if the server has been up for a long time.</bug>\r\n\r\n**Returns:** The velocity of the entity.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Vector'

[GetWorkshopID]
description = '<deprecated></deprecated>Returns ID of workshop addon that the entity is from.\r\n\r\n<warning>The function **currently** does nothing and always returns nil</warning>\r\n\r\n**Returns:** The workshop ID\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[GetWorldTransformMatrix]
description = 'Returns the position and angle of the entity as a 3x4 matrix (<page>VMatrix</page> is 4x4 so the fourth row goes unused). The first three columns store the angle as a [rotation matrix](https://en.wikipedia.org/wiki/Rotation_matrix), and the fourth column stores the position vector.\r\n\r\n<bug issue="2764">This returns incorrect results for the angular component (columns 1-3) for the local player clientside.</bug>\r\n\r\n<bug issue="3106">This will use the local player\'s <page>Global.EyeAngles</page> in <page text="rendering hooks">Category:3D_Rendering_Hooks</page>.</bug>\r\n\r\n<bug issue="3107">Columns 1-3 will be all 0 (angular component) in <page text="rendering hooks">Category:3D_Rendering_Hooks</page> while paused in single-player.</bug>\r\n\r\n**Returns:** The position and angle matrix.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'VMatrix'

[GibBreakClient]
description = 'Causes the entity to break into its current models gibs, if it has any.\r\n\r\nYou must call <page>Entity:PrecacheGibs</page> on the entity before using this function, or it will not create any gibs.\r\n\r\nIf called on server, the gibs will be spawned on the currently connected clients and will not be synchronized. Otherwise the gibs will be spawned only for the client the function is called on.\r\n\r\nNote, that this function will not remove or hide the entity it is called on.\r\n\r\nFor more expensive version of this function see <page>Entity:GibBreakServer</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'force'
type = 'Vector'
description = 'The force to apply to the created gibs.'
``````````
name = 'clr'
type = 'table'
description = 'If set, this will be color of the broken gibs instead of the entity\'s color.'

[GibBreakServer]
description = 'Causes the entity to break into its current models gibs, if it has any.\r\n\r\nYou must call <page>Entity:PrecacheGibs</page> on the entity before using this function, or it will not create any gibs.\r\n\r\nThe gibs will be spawned on the server and be synchronized with all clients.\r\n\r\nNote, that this function will not remove or hide the entity it is called on.\r\n\r\nThis function is affected by `props_break_max_pieces_perframe`, `props_break_max_pieces` and `breakable_multiplayer` (must be set to 0, which also would make all prop gibs spawn serverside) console variables.\r\n\r\n<warning>Large numbers of serverside gibs will cause lag.\r\n\r\nYou can avoid this cost by spawning the gibs on the client using <page>Entity:GibBreakClient</page></warning>\r\n\r\n<note>Despite existing on client, it doesn\'t actually do anything on client.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'force'
type = 'Vector'
description = 'The force to apply to the created gibs'

[HasBoneManipulations]
description = 'Returns whether or not the bone manipulation functions have ever been called on given  entity.\r\n\r\nRelated functions are <page>Entity:ManipulateBonePosition</page>, <page>Entity:ManipulateBoneAngles</page>, <page>Entity:ManipulateBoneJiggle</page>, and <page>Entity:ManipulateBoneScale</page>.\r\n\r\n<bug issue="3131">This will return true if the entity\'s bones have ever been manipulated. Resetting the position/angles/jiggle/scaling to 0,0,0 will not affect this function.</bug>\r\n\r\n**Returns:** True if the entity has been bone manipulated, false otherwise.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[HasFlexManipulatior]
description = 'Returns whether or not the the entity has had flex manipulations performed with <page>Entity:SetFlexWeight</page> or <page>Entity:SetFlexScale</page>.\r\n\r\n**Returns:** True if the entity has flex manipulations, false otherwise.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[HasSpawnFlags]
description = 'Returns whether this entity has the specified spawnflags bits set.\r\n\r\n**Returns:** Whether the entity has that spawnflag set or not.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'spawnFlags'
type = 'number'
description = 'The spawnflag bits to check, see <page>Enums/SF</page>.'
[[.returns]]
type = 'boolean'

[HeadTarget]
description = 'Returns the position of the head of this entity, NPCs use this internally to aim at their targets.\r\n\r\n<note>This only works on players and NPCs.</note>\r\n\r\n**Returns:** The head position.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'origin'
type = 'Vector'
description = 'The vector of where the attack comes from.'
[[.returns]]
type = 'Vector'

[Health]
description = 'Returns the health of the entity.\r\n\r\n**Returns:** health\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[Ignite]
description = 'Sets the entity on fire.\r\n\r\nSee also <page>Entity:Extinguish</page>.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'length'
type = 'number'
description = 'How long to keep the entity ignited, in seconds. Not supplying this argument will not ignite the entity at all.'
``````````
name = 'radius'
type = 'number'
description = 'The radius of the ignition, will ignite everything around the entity that is in this radius.'

[InitializeAsClientEntity]
description = '<deprecated></deprecated>\r\n\r\nInitializes this entity as being clientside only.\r\n\r\nOnly works on entities fully created clientside, and as such it has currently no use due to the lack of clientside <page>ents.Create</page>.\r\n\r\nThis function is automatically called by <page>ents.CreateClientProp</page>, <page>Global.ClientsideModel</page> and <page>Global.ClientsideScene</page>.\r\n\r\n<bug issue="3368">Calling this on a clientside entity will crash the game.</bug>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'

[Input]
description = 'Fires input to the entity with the ability to make another entity responsible.\r\n\r\nSee also <page>Entity:Fire</page> and <page>GM:AcceptInput</page>.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'input'
type = 'string'
description = 'The name of the input to fire'
``````````
name = 'activator'
type = 'Entity'
description = 'The entity that caused this input (EG the player who pushed a button)'
``````````
name = 'caller'
type = 'Entity'
description = 'The entity that is triggering this input (EG the button that was pushed)'
``````````
name = 'param'
type = 'any'
description = 'The value to give to the input. Can be either a <page>string</page>, a <page>number</page> or a <page>boolean</page>.'

[InstallDataTable]
description = '<internal></internal> Sets up Data Tables from entity to use with <page>Entity:NetworkVar</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'

[InvalidateBoneCache]
description = 'Resets the entity\'s bone cache values in order to prepare for a model change.\r\n\r\nThis should be called after calling <page>Entity:SetPoseParameter</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'

[IsConstrained]
description = 'Returns true if the entity has constraints attached to it\r\n\r\n<bug issue="3837">This will only update clientside if the server calls it first. This only checks constraints added through the <page>constraint</page> so this will not react to map constraints.</bug>\r\n\r\n**Returns:** Whether the entity is constrained or not.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[IsConstraint]
description = 'Returns if entity is constraint or not\r\n\r\n**Returns:** Is the entity a constraint or not\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[IsDormant]
description = 'Returns whether the entity is dormant or not. Client/server entities become dormant when they leave the PVS on the server. Client side entities can decide for themselves whether to become dormant. This mainly applies to PVS.\r\n\r\n**Returns:** Whether the entity is dormant or not.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[IsEffectActive]
description = 'Returns whether an entity has engine effect applied or not.\r\n\r\n**Returns:** Whether the entity has the engine effect applied or not.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'effect'
type = 'number'
description = 'The effect to check for, see <page>Enums/EF</page>.'
[[.returns]]
type = 'boolean'

[IsEFlagSet]
description = 'Checks if given flag is set or not.\r\n\r\n**Returns:** Is set or not\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'flag'
type = 'number'
description = 'The engine flag to test, see <page>Enums/EFL</page>'
[[.returns]]
type = 'boolean'

[IsFlagSet]
description = 'Checks if given flag(s) is set or not.\r\n\r\n**Returns:** Is set or not\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'flag'
type = 'number'
description = 'The engine flag(s) to test, see <page>Enums/FL</page>'
[[.returns]]
type = 'boolean'

[IsInWorld]
description = 'Returns whether the entity is inside a wall or outside of the map.\r\n\r\n<note>Internally this function uses <page>util.IsInWorld</page>, that means that this function only checks <page>Entity:GetPos</page> of the entity. If an entity is only partially inside a wall, or has a weird GetPos offset, this function may not give reliable output.</note>\r\n\r\n**Returns:** Is the entity in world\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[IsLagCompensated]
description = 'Returns whether the entity is lag compensated or not.\r\n\r\n**Returns:** Whether the entity is lag compensated or not.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[IsLineOfSightClear]
description = 'Returns true if the target is in line of sight.\r\n<note>This will only work when called on CBaseCombatCharacter entities. This includes players, NPCs, grenades, RPG rockets, crossbow bolts, and physics cannisters.</note>\r\n\r\n**Returns:** Returns true if the line of sight is clear\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'target'
type = 'Vector'
description = 'The target to test. You can also supply an <page>Entity</page> instead of a <page>Vector</page>'
[[.returns]]
type = 'boolean'

[IsMarkedForDeletion]
description = 'Returns if the entity is going to be deleted in the next frame.\r\n\r\n**Returns:** If the entity is going to be deleted.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[IsNextBot]
description = 'Checks if the entity is a <page>NextBot</page> or not.\r\n\r\n**Returns:** Whether the entity is an NextBot entity or not.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[IsNPC]
description = 'Checks if the entity is an NPC or not.\r\n\r\nThis will return false for <page>NextBot</page>s, see <page>Entity:IsNextBot</page> for that.\r\n\r\n**Returns:** Whether the entity is an NPC.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[IsOnFire]
description = 'Returns whether the entity is on fire.\r\n\r\n**Returns:** Whether the entity is on fire or not.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[IsOnGround]
description = 'Returns whether the entity is on ground or not.\r\n\r\nInternally, this checks if <page text="FL_ONGROUND">Enums/FL</page> is set on the entity.\r\n\r\nThis function is an alias of <page>Entity:OnGround</page>.\r\n\r\n**Returns:** Whether the entity is on ground or not.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[IsPlayer]
description = 'Checks if the entity is a player or not.\r\n\r\n**Returns:** Whether the entity is a player.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[IsPlayerHolding]
description = 'Returns true if the entity is being held by a player. Either by physics gun, gravity gun or use-key (+use).\r\n\r\n<bug issue="2046">If multiple players are holding an object and one drops it, this will return false despite the object still being held.</bug>\r\n\r\n**Returns:** IsBeingHeld\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[IsPlayingGesture]
description = 'Returns whether there\'s a gesture is given activity being played.\r\n\r\n<note>This function only works on <page>BaseAnimatingOverlay</page> entites!</note>\r\n\r\n**Returns:** Whether there\'s a gesture is given activity being played.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'activity'
type = 'number'
description = 'The activity to test. See <page>Enums/ACT</page>.'
[[.returns]]
type = 'boolean'

[IsRagdoll]
description = 'Checks if the entity is a ragdoll.\r\n\r\n**Returns:** Is ragdoll or not\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[IsScripted]
description = 'Checks if the entity is a SENT or a built-in entity.\r\n\r\n**Returns:** Returns true if entity is scripted ( SENT ), false if not ( A built-in engine entity )\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[IsSequenceFinished]
description = 'Returns whether the entity\'s current sequence is finished or not.\r\n\r\n**Returns:** Whether the entity\'s sequence is finished or not.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[IsSolid]
description = 'Returns if the entity is solid or not.\r\nVery useful for determining if the entity is a trigger or not.\r\n\r\n**Returns:** Whether the entity is solid or not.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[IsValid]
description = 'Returns whether the entity is a valid entity or not.\r\n\r\nAn entity is valid if:\r\n* It is not a <page text="NULL">Global_Variables</page> entity\r\n* It is not the worldspawn entity (<page>game.GetWorld</page>)\r\n\r\n<note>Instead of calling this method directly, it\'s a good idea to call the global <page>Global.IsValid</page> instead, however if you\'re sure the variable you\'re using is always an entity object it\'s better to use this method</note>\r\n\r\nIt will check whether the given variable contains an object (an Entity) or nothing at all for you. See examples.\r\n\r\n<warning>NULL entities can still be assigned with key/value pairs, but they will be instantly negated. See example 3</warning>\r\nThis might be a cause for a lot of headache. Usually happening during networking etc., when completely valid entities suddenly become invalid on the client, but are never filtered with IsValid(). See <page>GM:InitPostEntity</page> for more details.\r\n\r\n**Returns:** true if the entity is valid, false otherwise\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[IsValidLayer]
description = 'Returns whether the given layer ID is valid and exists on this entity.\r\n\r\n<note>This function only works on <page>BaseAnimatingOverlay</page> entities.</note>\r\n\r\n**Returns:** Whether the given layer ID is valid and exists on this entity.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'layerID'
type = 'number'
description = 'The Layer ID'
[[.returns]]
type = 'boolean'

[IsVehicle]
description = 'Checks if the entity is a vehicle or not.\r\n\r\n**Returns:** Whether the entity is a vehicle.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[IsWeapon]
description = 'Checks if the entity is a weapon or not.\r\n\r\n**Returns:** Whether the entity is a weapon\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[IsWidget]
description = 'Returns whether the entity is a widget or not.\r\n\r\nThis is used by the "Edit Bones" context menu property.\r\n\r\n**Returns:** Whether the entity is a widget or not.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[IsWorld]
description = 'Returns if the entity is the map\'s Entity[0] worldspawn\r\n\r\n**Returns:** isWorld\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[LocalToWorld]
description = 'Converts a vector local to an entity into a worldspace vector\r\n\r\n**Returns:** The translated to world coordinates vector\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'lpos'
type = 'Vector'
description = 'The local vector'
[[.returns]]
type = 'Vector'

[LocalToWorldAngles]
description = 'Converts a local angle (local to the entity) to a world angle.\r\n\r\n**Returns:** The world angle\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'ang'
type = 'Angle'
description = 'The local angle'
[[.returns]]
type = 'Angle'

[LookupAttachment]
description = 'Returns the attachment index of the given attachment name.\r\n\r\n**Returns:** The attachment index, or 0 if the attachment does not exist and -1 if the model is invalid.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'attachmentName'
type = 'string'
description = 'The name of the attachment.'
[[.returns]]
type = 'number'

[LookupBone]
description = 'Gets the bone index of the given bone name, returns nothing if the bone does not exist.\r\n\r\n**Returns:** Index of the given bone name\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'boneName'
type = 'string'
description = 'The name of the bone.\r\n\r\nCommon generic bones ( for player models and some HL2 models ):\r\n* ValveBiped.Bip01_Head1\r\n* ValveBiped.Bip01_Spine\r\n* ValveBiped.Anim_Attachment_RH\r\n\r\nCommon hand bones (left hand equivalents also available, replace _R_ with _L_)\r\n* ValveBiped.Bip01_R_Hand\r\n* ValveBiped.Bip01_R_Forearm\r\n* ValveBiped.Bip01_R_Foot\r\n* ValveBiped.Bip01_R_Thigh\r\n* ValveBiped.Bip01_R_Calf\r\n* ValveBiped.Bip01_R_Shoulder\r\n* ValveBiped.Bip01_R_Elbow'
[[.returns]]
type = 'number'

[LookupPoseParameter]
description = 'Returns pose parameter ID from its name.\r\n\r\n**Returns:** The ID of the given pose parameter name, if it exists, -1 otherwise\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'name'
type = 'string'
description = 'Pose parameter name'
[[.returns]]
type = 'number'

[LookupSequence]
description = 'Returns sequence ID from its name.\r\n\r\n**Returns:** Sequence ID for that name. This **will** differ for models with same sequence names. Will be -1 whether the sequence is invalid.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'name'
type = 'string'
description = 'Sequence name'
[[.returns]]
type = 'number'

[MakePhysicsObjectAShadow]
description = 'Turns the <page>Entity:GetPhysicsObject</page> into a physics shadow.\r\nIt\'s used internally for the Player\'s and NPC\'s physics object, and certain HL2 entities such as the crane.\r\n\r\nA physics shadow can be used to have static entities that never move by setting both arguments to false.\r\n\r\n<note>Unlike <page>Entity:PhysicsInitShadow</page>, this function doesn\'t remove the current physics object.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'allowPhysicsMovement'
type = 'boolean'
description = 'Whether to allow the physics shadow to move under stress.'
``````````
name = 'allowPhysicsRotation'
type = 'boolean'
description = 'Whether to allow the physics shadow to rotate under stress.'

[ManipulateBoneAngles]
description = 'Sets custom bone angles.\r\n\r\n<note>The repeated use of bone manipulation in multiplayer games is highly discouraged due to the huge produced network traffic.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'boneID'
type = 'number'
description = 'Index of the bone you want to manipulate'
``````````
name = 'ang'
type = 'Angle'
description = 'Angle to apply.\r\n\r\nThe angle is relative to the original bone angle, not relative to the world or the entity.'

[ManipulateBoneJiggle]
description = 'Manipulates the bone\'s jiggle status. This allows non jiggly bones to become jiggly.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'boneID'
type = 'number'
description = 'Index of the bone you want to manipulate.'
``````````
name = 'enabled'
type = 'number'
description = '0 = No Jiggle\r\n1 = Jiggle'

[ManipulateBonePosition]
description = 'Sets custom bone offsets.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'boneID'
type = 'number'
description = 'Index of the bone you want to manipulate'
``````````
name = 'pos'
type = 'Vector'
description = 'Position vector to apply\r\n\r\n\r\n\r\n\r\nNote that the position is relative to the original bone position, not relative to the world or the entity.'

[ManipulateBoneScale]
description = 'Sets custom bone scale.\r\n\r\n<warning>When used serverside, this method produces a huge network consumption!</warning>\r\n\r\n<bug issue="3502">This does not scale procedural bones.</bug>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'boneID'
type = 'number'
description = 'Index of the bone you want to manipulate'
``````````
name = 'scale'
type = 'Vector'
description = 'Scale vector to apply. Note that the scale is relative to the original bone scale, not relative to the world or the entity.\r\n\r\n<bug issue="1249">The vector will be normalised if its longer than 32 units.</bug>'

[MapCreationID]
description = 'Returns entity\'s map creation ID. Unlike <page>Entity:EntIndex</page> or <page>Entity:GetCreationID</page>, it will always be the same on same map, no matter how much you clean up or restart it.\r\n\r\nTo be used in conjunction with <page>ents.GetMapCreatedEntity</page>.\r\n\r\n**Returns:** The map creation ID or -1 if the entity is not compiled into the map.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[MarkShadowAsDirty]
description = 'Refreshes the shadow of the entity.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'

[MuzzleFlash]
description = 'Fires the muzzle flash effect of the weapon the entity is carrying. This only creates a light effect and is often called alongside <page>Weapon:SendWeaponAnim</page>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'

[NearestPoint]
description = 'Performs a Ray-Orientated Bounding Box intersection from the given position to the origin of the OBBox with the entity and returns the hit position on the OBBox.\r\n\r\nThis relies on the entity having a collision mesh (not a physics object) and will be affected by `SOLID_NONE`\r\n\r\n**Returns:** The nearest hit point of the entity\'s bounding box in world coordinates.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'position'
type = 'Vector'
description = 'The vector to start the intersection from.'
[[.returns]]
type = 'Vector'

[NetworkVar]
description = 'Creates a network variable on the entity and adds Set/Get functions for it. This function should only be called in <page>ENTITY:SetupDataTables</page>.\r\n\r\nSee <page>Entity:NetworkVarNotify</page> for a function to hook NetworkVar changes.\r\n\r\n<warning>Make sure to not call the SetDT* and your custom set methods on the client realm unless you know exactly what you are doing.</warning>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'type'
type = 'string'
description = 'Supported choices:\r\n\r\n* `String`\r\n* `Bool`\r\n* `Float`\r\n* `Int` (32-bit signed integer)\r\n* `Vector`\r\n* `Angle`\r\n* `Entity`'
``````````
name = 'slot'
type = 'number'
description = 'Each network variable has to have a unique slot. The slot is per type - so you can have an int in slot `0`, a bool in slot `0` and a float in slot `0` etc. You can\'t have two ints in slot `0`, instead you would do a int in slot `0` and another int in slot `1`.\r\n\r\nThe max slots right now are `32` - so you should pick a number between `0` and `31`. An exception to this is strings which has a max slots of `4`.'
``````````
name = 'name'
type = 'string'
description = 'The name will affect how you access it. If you call it `Foo` you would add two new functions on your entity - `SetFoo()` and `GetFoo()`. So be careful that what you call it won\'t collide with any existing functions (don\'t call it `Pos` for example).'
``````````
name = 'extended'
type = 'table'
description = 'A table of extended information.\r\n\r\n`KeyName`\r\n* Allows the NetworkVar to be set using <page>Entity:SetKeyValue</page>. This is useful if you\'re making an entity that you want to be loaded in a map. The sky entity uses this.\r\n\r\n`Edit`\r\n* The edit key lets you mark this variable as editable. See <page>Editable Entities</page> for more information.'

[NetworkVarElement]
description = 'Similarly to <page>Entity:NetworkVar</page>, creates a network variable on the entity and adds Set/Get functions for it. This method stores it\'s value as a member value of a vector or an angle. This allows to go beyond the normal variable limit of <page>Entity:NetworkVar</page> for `Int` and `Float` types, at the expense of `Vector` and `Angle` limit.\r\n\r\nThis function should only be called in <page>ENTITY:SetupDataTables</page>.\r\n\r\n<warning>Make sure to not call the SetDT* and your custom set methods on the client realm unless you know exactly what you are doing.</warning>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'type'
type = 'string'
description = 'Supported choices:\r\n* `Vector`\r\n* `Angle`'
``````````
name = 'slot'
type = 'number'
description = 'The slot for this `Vector` or `Angle`, from `0` to `31`. See <page>Entity:NetworkVar</page> for more detailed explanation.'
``````````
name = 'element'
type = 'string'
description = 'Which element of a `Vector` or an `Angle` to store the value on. This can be `p`, `y`, `r` for <page>Angle</page>s, and `x`, `y`, `z` for <page>Vector</page>s'
``````````
name = 'name'
type = 'string'
description = 'The name will affect how you access it. If you call it `Foo` you would add two new functions on your entity - `SetFoo()` and `GetFoo()`. So be careful that what you call it won\'t collide with any existing functions (don\'t call it "Pos" for example).'
``````````
name = 'extended'
type = 'table'
description = 'A table of extra information. See <page>Entity:NetworkVar</page> for details.'

[NetworkVarNotify]
description = 'Creates a callback that will execute when the given network variable changes - that is, when the `Set<name>()` function is run.\r\n\r\n<note>The callback is executed `before` the value is changed, and is called even if the new and old values are the same.</note>\r\n\r\n<note>This function does not exist on entities in which <page>Entity:InstallDataTable</page> has not been called. By default, this means this function only exists on SENTs (both serverside and clientside) and on players with a <page text="Player Class">Player_Classes</page> (serverside and clientside <page>Global.LocalPlayer</page> only!). It is therefore safest to only use this in <page>ENTITY:SetupDataTables</page>.</note>\r\n\r\n<bug request="324">The callback will not be called clientside if the var is changed right after entity spawn.</bug>\r\n</name>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'name'
type = 'string'
description = 'Name of variable to track changes of'
``````````
name = 'callback'
type = 'function'
description = 'The function to call when the variable changes. It is passed 4 arugments:\r\n* <page>Entity</page> entity - Entity whos variable changed (This will be variable called "self" in ENT:CallBack format.)\r\n* <page>string</page> name - Name of changed variable\r\n* <page>any</page> old - Old/current variable value\r\n* <page>any</page> new - New variable value that it was set to'

[NextThink]
description = 'In the case of a scripted entity, this will cause the next <page>ENTITY:Think</page> event to be run at the given time.\r\n\r\nDoes not work clientside! Use <page>Entity:SetNextClientThink</page> instead.\r\n\r\n<bug issue="3269">This does not work with SWEPs or Nextbots.</bug>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'timestamp'
type = 'number'
description = 'The relative to <page>Global.CurTime</page> timestamp, at which the next think should occur.'

[OBBCenter]
description = 'Returns the center of an entity\'s bounding box as a local vector.\r\n\r\n**Returns:** OBBCenter\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Vector'

[OBBMaxs]
description = 'Returns the highest corner of an entity\'s bounding box as a local vector.\r\n\r\n**Returns:** The local position of the highest corner of the entity\'s oriented bounding box.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Vector'

[OBBMins]
description = 'Returns the lowest corner of an entity\'s bounding box as a local vector.\r\n\r\n**Returns:** The local position of the lowest corner of the entity\'s oriented bounding box.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Vector'

[ObjectCaps]
description = 'Returns the entity\'s capabilities as a bitfield.\r\n\r\nIn the engine this function is mostly used to check the use type, the save/restore system and level transitions flags.\r\n\r\nEven though the function is defined shared, it is not guaranteed to return the same value across states.\r\n\r\n<note>The enums for this are not currently implemented in Lua, however you can access the defines [here](https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/shared/baseentity_shared.h#L21-L38).</note>\r\n\r\n**Returns:** The bitfield, a combination of the [FCAP_](https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/shared/baseentity_shared.h#L21-L38) flags.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[OnGround]
description = 'Returns true if the entity is on the ground, and false if it isn\'t.\r\n\r\nInternally, this checks if <page text="FL_ONGROUND">Enums/FL</page> is set on the entity. This is only updated for players and NPCs, and thus won\'t inherently work for other entities.\r\n\r\n**Returns:** Whether the entity is on the ground or not.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'boolean'

[PassesDamageFilter]
description = 'Tests whether the damage passes the entity filter.\r\n\r\nThis will call <page>ENTITY:PassesDamageFilter</page> on scripted entities of the type "filter".\r\n\r\n<note>This function only works on entities of the type "filter". ( filter_* entities, including base game filter entites )</note>\r\n\r\n**Returns:** Whether the damage info passes the entity filter.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'dmg'
type = 'CTakeDamageInfo'
description = 'The damage info to test'
[[.returns]]
type = 'boolean'

[PassesFilter]
description = 'Tests whether the entity passes the entity filter.\r\n\r\nThis will call <page>ENTITY:PassesFilter</page> on scripted entities of the type "filter".\r\n\r\n<note>This function only works on entities of the type "filter". ( filter_* entities, including base game filter entites )</note>\r\n\r\n**Returns:** Whether the entity info passes the entity filter.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'caller'
type = 'Entity'
description = 'The initiator of the test.\r\n\r\nFor example the trigger this filter entity is used in.'
``````````
name = 'ent'
type = 'Entity'
description = 'The entity to test against the entity filter.'
[[.returns]]
type = 'boolean'

[PhysicsDestroy]
description = 'Destroys the current physics object of an entity.\r\n\r\n<note>Cannot be used on a ragdoll or the world entity.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'

[PhysicsFromMesh]
description = 'Initializes the physics mesh of the entity from a triangle soup defined by a table of vertices. The resulting mesh is hollow, may contain holes, and always has a volume of 0.\r\n\r\nWhile this is very useful for static geometry such as terrain displacements, it is advised to use <page>Entity:PhysicsInitConvex</page> or <page>Entity:PhysicsInitMultiConvex</page> for moving solid objects instead.\r\n\r\n<page>Entity:EnableCustomCollisions</page> needs to be called if you want players to collide with the entity correctly.\r\n\r\n**Returns:** Returns true on success, nil otherwise.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'vertices'
type = 'table'
description = 'A table consisting of <page>Structures/MeshVertex</page> (only the `pos` element is taken into account). Every 3 vertices define a triangle in the physics mesh.'
[[.returns]]
type = 'boolean'

[PhysicsInit]
description = 'Initializes the <page text="physics object">Entity:GetPhysicsObject</page> of the entity using its current <page text="model">Entity:GetModel</page>. Deletes the previous physics object if it existed and the new object creation was successful.\r\n\r\nIf the entity\'s current model has no physics mesh associated to it, no physics object will be created and the previous object will still exist, if applicable.\r\n\r\n<note>When called clientside, this will not create a valid <page>PhysObj</page> if the model hasn\'t been <page text="precached">util.PrecacheModel</page> serverside.</note>\r\n\r\n<note>If successful, this function will automatically call <page>Entity:SetSolid</page>( solidType ) and <page>Entity:SetSolidFlags</page>( 0 ).</note>\r\n\r\n<bug>Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.</bug>\r\n\r\n**Returns:** Returns true on success, false otherwise.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'solidType'
type = 'number'
description = 'The solid type of the physics object to create, see <page>Enums/SOLID</page>. Should be SOLID_VPHYSICS in most cases.\r\n\r\n<note>Using SOLID_NONE will only delete the current physics object - it does not create a new one.</note>'
[[.returns]]
type = 'boolean'

[PhysicsInitBox]
description = 'Makes the physics object of the entity a AABB.\r\n\r\n<note>If the volume of the resulting box is 0 (the mins and maxs are the same), the mins and maxs will be changed to <page>Global.Vector</page>( -1, -1, -1 ) and <page>Global.Vector</page>( 1, 1, 1 ), respectively.</note>\r\n\r\n<note>This function will automatically destroy any previous physics objects if successful and call <page>Entity:SetSolid</page>( SOLID_BBOX ), <page>Entity:SetMoveType</page>( MOVETYPE_VPHYSICS ), and <page>Entity:SetCollisionBounds</page>( mins, maxs ).</note>\r\n\r\n<bug>Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.</bug>\r\n\r\n**Returns:** Returns true on success, nil otherwise. This fails when the game cannot create any more <page>PhysCollide</page>s.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'mins'
type = 'Vector'
description = 'The minimum position of the box. This is automatically ordered with the maxs.'
``````````
name = 'maxs'
type = 'Vector'
description = 'The maximum position of the box. This is automatically ordered with the mins.'
[[.returns]]
type = 'boolean'

[PhysicsInitConvex]
description = 'Initializes the physics mesh of the entity with a convex mesh defined by a table of points. The resulting mesh is the  of all the input points. If successful, the previous physics object will be removed.\r\n\r\nThis is the standard way of creating moving physics objects with a custom convex shape. For more complex, concave shapes, see <page>Entity:PhysicsInitMultiConvex</page>.\r\n\r\n<bug issue="3301">This will crash if given all <page>Global.Vector</page>(0,0,0)s.</bug>\r\n\r\n<bug>Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.</bug>\r\n\r\n**Returns:** Returns true on success, nil otherwise.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'points'
type = 'table'
description = 'A table of eight <page>Vector</page>s, in local coordinates, to be used in the computation of the convex mesh. Order does not matter.'
[[.returns]]
type = 'boolean'

[PhysicsInitMultiConvex]
description = 'An advanced version of <page>Entity:PhysicsInitConvex</page> which initializes a physics object from multiple convex meshes. This should be used for physics objects with a custom shape which cannot be represented by a single convex mesh.\r\n\r\nIf successful, the previous physics object will be removed.\r\n\r\n<bug>Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.\r\n\r\nYou can use the following work-around for movement, though clientside collisions will still be broken.\r\n\r\n\r\n```\r\nfunction ENT:Think()\r\nif ( CLIENT ) then\r\nlocal physobj = self:GetPhysicsObject()\r\n\r\nif ( IsValid( physobj ) ) then\r\nphysobj:SetPos( self:GetPos() )\r\nphysobj:SetAngles( self:GetAngles() )\r\nend\r\nend\r\nend\r\n```\r\n</bug>\r\n\r\n**Returns:** Returns true on success, nil otherwise\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'vertices'
type = 'table'
description = 'A table consisting of tables of <page>Vector</page>s. Each sub-table defines a set of points to be used in the computation of one convex mesh.'
[[.returns]]
type = 'boolean'

[PhysicsInitShadow]
description = 'Initializes the entity\'s physics object as a physics shadow. Removes the previous physics object if successful. This is used internally for the Player\'s and NPC\'s physics object, and certain HL2 entities such as the crane.\r\n\r\nA physics shadow can be used to have static entities that never move by setting both arguments to false.\r\n\r\n<bug>Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.</bug>\r\n\r\n**Returns:** Return true on success, nil otherwise.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'allowPhysicsMovement'
type = 'boolean'
description = 'Whether to allow the physics shadow to move under stress.'
``````````
name = 'allowPhysicsRotation'
type = 'boolean'
description = 'Whether to allow the physics shadow to rotate under stress.'
[[.returns]]
type = 'boolean'

[PhysicsInitSphere]
description = 'Makes the physics object of the entity a sphere.\r\n\r\n<note>This function will automatically destroy any previous physics objects and call <page>Entity:SetSolid</page>( SOLID_BBOX ) and <page>Entity:SetMoveType</page>( MOVETYPE_VPHYSICS ).</note>\r\n\r\n<bug>Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.</bug>\r\n\r\n**Returns:** Returns true on success, false otherwise\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'radius'
type = 'number'
description = 'The radius of the sphere.'
``````````
name = 'physmat'
type = 'string'
description = 'Physical material from [surfaceproperties.txt](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/scripts/surfaceproperties.txt) or added with <page>physenv.AddSurfaceData</page>.'
[[.returns]]
type = 'boolean'

[PhysicsInitStatic]
description = 'Initializes a static physics object of the entity using its <page text="current model">Entity:GetModel</page>. If successful, the previous physics object is removed.\r\n\r\nThis is what used by entities such as func_breakable, prop_dynamic, item_suitcharger, prop_thumper and npc_rollermine while it is in its "buried" state in the Half-Life 2 Campaign.\r\n\r\nIf the entity\'s current model has no physics mesh associated to it, no physics object will be created.\r\n\r\n<note>This function will automatically call <page>Entity:SetSolid</page>( solidType ).</note>\r\n\r\n<bug>Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.</bug>\r\n\r\n**Returns:** Returns true on success, false otherwise. This will fail if the entity\'s current model has no associated physics mesh.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'solidType'
type = 'number'
description = 'The solid type of the physics object to create, see <page>Enums/SOLID</page>. Should be SOLID_VPHYSICS in most cases.'
[[.returns]]
type = 'boolean'

[PhysWake]
description = 'Wakes up the entity\'s physics object\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'

[PlayScene]
description = 'Makes the entity play a .vcd scene.\r\n\r\n**Returns:** Estimated length of the scene\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'scene'
type = 'string'
description = 'Filepath to scene'
``````````
name = 'delay'
type = 'number'
description = 'Delay in seconds until the scene starts playing.'
[[.returns]]
type = 'number'

[PointAtEntity]
description = 'Changes an entities angles so that it faces the target entity.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'target'
type = 'Entity'
description = 'The entity to face.'

[PrecacheGibs]
description = 'Precaches gibs for the entity\'s model.\r\n\r\nNormally this function should be ran when the entity is spawned, for example the <page>ENTITY:Initialize</page>, after <page>Entity:SetModel</page> is called.\r\n\r\nThis is required for <page>Entity:GibBreakServer</page> and <page>Entity:GibBreakClient</page> to work.\r\n\r\n**Returns:** The amount of gibs the prop has\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[RagdollSolve]
description = 'Normalizes the ragdoll. This is used alongside Kinect in <page>Entity:SetRagdollBuildFunction</page>, for more info see ragdoll_motion entity.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'

[RagdollStopControlling]
description = 'Sets the function to build the ragdoll. This is used alongside Kinect in <page>Entity:SetRagdollBuildFunction</page>, for more info see ragdoll_motion entity.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'

[RagdollUpdatePhysics]
description = 'Makes the physics objects follow the set bone positions. This is used alongside Kinect in <page>Entity:SetRagdollBuildFunction</page>, for more info see ragdoll_motion entity.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'

[Remove]
description = 'Removes the entity it is used on.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'

[RemoveAllDecals]
description = 'Removes all decals from the entities surface.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'

[RemoveAllGestures]
description = 'Removes and stops all gestures.\r\n\r\n<note>This function only works on <page>BaseAnimatingOverlay</page> entites!</note>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'

[RemoveCallback]
description = 'Removes a callback previously added with <page>Entity:AddCallback</page>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'hook'
type = 'string'
description = 'The hook name to remove. See <page>Entity Callbacks</page>'
``````````
name = 'callbackid'
type = 'number'
description = 'The callback id previously retrieved with the return of <page>Entity:AddCallback</page> or <page>Entity:GetCallbacks</page>'

[RemoveCallOnRemove]
description = 'Removes a function previously added via <page>Entity:CallOnRemove</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'identifier'
type = 'string'
description = 'Identifier of the function within CallOnRemove'

[RemoveEffects]
description = 'Removes an engine effect applied to an entity.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'effect'
type = 'number'
description = 'The effect to remove, see <page>Enums/EF</page>.'

[RemoveEFlags]
description = 'Removes specified engine flag\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'flag'
type = 'number'
description = 'The flag to remove, see <page>Enums/EFL</page>'

[RemoveFlags]
description = 'Removes specified flag(s) from the entity\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'flag'
type = 'number'
description = 'The flag(s) to remove, see <page>Enums/FL</page>'

[RemoveFromMotionController]
description = 'Removes a <page>PhysObj</page>ect from the entity\'s motion controller so that <page>ENTITY:PhysicsSimulate</page> will no longer be called for given <page>PhysObj</page>ect.\r\n\r\nYou must first create a motion controller with <page>Entity:StartMotionController</page>.\r\n\r\n<note>Only works on a scripted <page>Entity</page> of anim type</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'physObj'
type = 'PhysObj'
description = 'The <page>PhysObj</page> to remove from the motion controller.'

[RemoveGesture]
description = 'Removes and stops the gesture with given activity.\r\n\r\n<note>This function only works on <page>BaseAnimatingOverlay</page> entites!</note>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'activity'
type = 'number'
description = 'The activity remove. See <page>Enums/ACT</page>.'

[RemoveInternalConstraint]
description = 'Breaks internal Ragdoll constrains, so you can for example separate an arm from the body of a ragdoll and preserve all physics.\r\n\r\nThe visual mesh will still stretch as if it was properly connected unless the ragdoll model is specifically designed to avoid that.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'num'
type = 'number'
description = 'Which constraint to break, values below 0 mean break them all'

[RemoveSolidFlags]
description = 'Removes solid flag(s) from the entity.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'flags'
type = 'number'
description = 'The flag(s) to remove, see <page>Enums/FSOLID</page>.'

[ResetSequence]
description = 'Plays an animation on the entity. This may not always work on engine entities.\r\n\r\n<warning>This will not reset the animation on viewmodels, use <page>Entity:SendViewModelMatchingSequence</page> instead.</warning>\r\n\r\n<note>This will not work properly if called directly after calling <page>Entity:SetModel</page>. Consider waiting until the next Tick.\r\n\r\nWill not work on players due to the animations being reset every frame by the base gamemode animation system. See <page>GM:CalcMainActivity</page>.\r\n\r\nFor custom scripted entities you will want to apply example from <page>ENTITY:Think</page> to make animations work.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'sequence'
type = 'number'
description = 'The sequence to play. Also accepts strings.\r\n\r\n<note>If set to a string, the function will automatically call <page>Entity:LookupSequence</page> to retrieve the sequence ID as a number.</note>'

[ResetSequenceInfo]
description = 'Reset entity sequence info such as playback rate, ground speed, last event check, etc.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'

[Respawn]
description = 'Makes the entity/weapon respawn.\r\n\r\nOnly usable on HL2 pickups and any weapons. Seems to be buggy with weapons.\r\nVery unreliable.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'

[RestartGesture]
description = 'Restarts the entity\'s animation gesture. If the given gesture is already playing, it will reset it and play it from the beginning.\r\n\r\n<note>This function only works on <page>BaseAnimatingOverlay</page> entites.</note>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'activity'
type = 'number'
description = 'The activity number to send to the entity. See <page>Enums/ACT</page> and <page>Entity:GetSequenceActivity</page>'
``````````
name = 'addIfMissing'
type = 'boolean'
description = 'Add/start the gesture to if it has not been yet started.'
``````````
name = 'autokill'
type = 'boolean'
description = ''

[SelectWeightedSequence]
description = 'Returns sequence ID corresponding to given activity ID.\r\n\r\nOpposite of <page>Entity:GetSequenceActivity</page>.\r\n\r\nSimilar to <page>Entity:LookupSequence</page>.\r\n\r\nSee also <page>Entity:SelectWeightedSequenceSeeded</page>.\r\n\r\n**Returns:** The sequence ID\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'act'
type = 'number'
description = 'The activity ID, see <page>Enums/ACT</page>.'
[[.returns]]
type = 'number'

[SelectWeightedSequenceSeeded]
description = 'Returns the sequence ID corresponding to given activity ID, and uses the provided seed for random selection. The seed should be the same server-side and client-side if used in a predicted environment.\r\n\r\nSee <page>Entity:SelectWeightedSequence</page> for a provided-seed version of this function.\r\n\r\n**Returns:** The sequence ID\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'act'
type = 'number'
description = 'The activity ID, see <page>Enums/ACT</page>.'
``````````
name = 'seed'
type = 'number'
description = 'The seed to use for randomly selecting a sequence in the case the activity ID has multiple sequences bound to it. <page>Entity:SelectWeightedSequence</page> uses the same seed as <page>util.SharedRandom</page> internally for this.'
[[.returns]]
type = 'number'

[SendViewModelMatchingSequence]
description = 'Sends sequence animation to the view model. It is recommended to use this for view model animations, instead of <page>Entity:ResetSequence</page>.\r\n\r\nThis function is only usable on view models.\r\n\r\n<bug issue="3229">Sequences 0-6 will not be looped regardless if they\'re marked as a looped animation or not.</bug>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'seq'
type = 'number'
description = 'The sequence ID returned by <page>Entity:LookupSequence</page> or  <page>Entity:SelectWeightedSequence</page>.'

[SequenceDuration]
description = 'Returns length of currently played sequence.\r\n\r\n<bug issue="2783">This will return incorrect results for weapons and viewmodels clientside in thirdperson.</bug>\r\n\r\n**Returns:** The length of the sequence\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'seqid'
type = 'number'
description = 'A sequence ID to return the length specific sequence of instead of the entity\'s main/currently playing sequence.'
[[.returns]]
type = 'number'

[SetAbsVelocity]
description = 'Sets the entity\'s velocity.\r\n\r\n<note>Actually binds to CBaseEntity::SetLocalVelocity() which sets the entity\'s velocity due to movement in the world from forces such as gravity. Does not include velocity from entity-on-entity collision or other world movement.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'velocity'
type = 'Vector'
description = 'The new velocity to set.'

[SetAngles]
description = 'Sets the angles of the entity.\r\n\r\n<note>To set a player\'s angles, use <page>Player:SetEyeAngles</page> instead.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'angles'
type = 'Angle'
description = 'The new angles.'

[SetAnimation]
description = 'Sets a player\'s third-person animation. Mainly used by <page>Weapon</page>s to start the player\'s weapon attack and reload animations.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'playerAnim'
type = 'number'
description = 'Player animation, see <page>Enums/PLAYER</page>.'

[SetAnimTime]
description = 'Sets the start time (relative to <page>Global.CurTime</page>) of the current animation, which is used to determine <page>Entity:GetCycle</page>. Should be less than CurTime to play an animation from the middle.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
``````````
name = 'time'
type = 'number'
description = 'The time the animation was supposed to begin.'

[SetAttachment]
description = '<deprecated>You should be using <page>Entity:SetParent</page> instead.</deprecated>\r\n\r\nParents the sprite to an attachment on another model.\r\n\r\nWorks only on env_sprite.\r\n\r\nDespite existing on client, it doesn\'t actually do anything on client.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'ent'
type = 'Entity'
description = 'The entity to attach/parent to'
``````````
name = 'attachment'
type = 'number'
description = 'The attachment ID to parent to'

[SetBloodColor]
description = 'Sets the blood color this entity uses.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'bloodColor'
type = 'number'
description = 'An integer corresponding to <page>Enums/BLOOD_COLOR</page>.'

[SetBodygroup]
description = 'Sets an entities\' bodygroup.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'bodygroup'
type = 'number'
description = 'The id of the bodygroup you\'re setting. Starts from 0.'
``````````
name = 'value'
type = 'number'
description = 'The value you\'re setting the bodygroup to. Starts from 0.'

[SetBodyGroups]
description = 'Sets the bodygroups from a string. A convenience function for <page>Entity:SetBodygroup</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'bodygroups'
type = 'string'
description = 'Body groups to set. Each single-digit number in the string represents a separate bodygroup. **This make it impossible to set any bodygroup to a value higher than 9!** For that you need to use <page>Entity:SetBodygroup</page>.'

[SetBoneController]
description = 'Sets the specified value on the bone controller with the given ID of this entity, it\'s used in HL1 to change the head rotation of NPCs, turret aiming and so on.\r\n\r\n<note>This is the precursor of pose parameters, and only works for Half Life 1: Source models supporting it.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'boneControllerID'
type = 'number'
description = 'The ID of the bone controller to set the value to.\r\nGoes from 0 to 3.'
``````````
name = 'value'
type = 'number'
description = 'The value to set on the specified bone controller.'

[SetBoneMatrix]
description = 'Sets the bone matrix of given bone to given matrix. See also <page>Entity:GetBoneMatrix</page>.\r\n\r\n<note>Despite existing serverside, it does nothing.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'boneid'
type = 'number'
description = 'The ID of the bone'
``````````
name = 'matrix'
type = 'VMatrix'
description = 'The matrix to set.'

[SetBonePosition]
description = 'Sets the bone position and angles.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
``````````
name = 'bone'
type = 'number'
description = 'The bone ID to manipulate'
``````````
name = 'pos'
type = 'Vector'
description = 'The position to set'
``````````
name = 'ang'
type = 'Angle'
description = 'The angles to set'

[SetCollisionBounds]
description = 'Sets the collision bounds for the entity, which are used for triggers ( <page>Entity:SetTrigger</page>, <page>ENTITY:Touch</page> ), determining if rendering is necessary clientside, and collision ( If <page>Entity:SetSolid</page> set as <page text="SOLID_BBOX">Enums/SOLID</page> ).\r\n\r\nInput bounds are relative to <page>Entity:GetPos</page>!\r\nSee also <page>Entity:SetCollisionBoundsWS</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'mins'
type = 'Vector'
description = 'The minimum vector of the bounds. The vector must be smaller than second argument on all axises.'
``````````
name = 'maxs'
type = 'Vector'
description = 'The maximum vector of the bounds. The vector must be bigger than first argument on all axises.'

[SetCollisionBoundsWS]
description = 'Sets the collision bounds for the entity, which are used for triggers ( <page>Entity:SetTrigger</page>, <page>ENTITY:Touch</page> ), determining if rendering is necessary clientside, and collision ( If <page>Entity:SetSolid</page> set as <page text="SOLID_BBOX">Enums/SOLID</page> ).\r\n\r\nInput bounds are in world coordinates!\r\nSee also <page>Entity:SetCollisionBounds</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'vec1'
type = 'Vector'
description = 'The first vector of the bounds.'
``````````
name = 'vec2'
type = 'Vector'
description = 'The second vector of the bounds.'

[SetCollisionGroup]
description = 'Sets the entity\'s collision group.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'group'
type = 'number'
description = 'Collision group of the entity, see <page>Enums/COLLISION_GROUP</page>'

[SetColor]
description = 'Sets the color of an entity.\r\n\r\nSome entities may need a custom [render mode](Enums/RENDERMODE) set for transparency to work. See example 2.<br>\r\nEntities also must have a proper [render group](Enums/RENDERGROUP) set for transparency to work.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'color'
type = 'table'
description = 'The color to set. Uses the <page>Color</page>.'

[SetCreator]
description = 'Sets the creator of the Entity. This is set automatically in Sandbox gamemode when spawning SENTs, but is never used/read by default.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'ply'
type = 'Player'
description = 'The creator'

[SetCustomCollisionCheck]
description = 'Marks the entity to call <page>GM:ShouldCollide</page>. Not to be confused with <page>Entity:EnableCustomCollisions</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'enable'
type = 'boolean'
description = 'Enable or disable the custom collision check'

[SetCycle]
description = 'Sets the progress of the current animation to a specific value between 0 and 1.\r\n\r\n<bug issue="3038">This does not work with viewmodels.</bug>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'value'
type = 'number'
description = 'The desired cycle value'

[SetDTAngle]
description = '<internal></internal>\r\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\r\n\r\nSets the specified angle on the entity\'s datatable.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'number'
description = 'Goes from 0 to 31.'
``````````
name = 'ang'
type = 'Angle'
description = 'The angle to write on the entity\'s datatable.'

[SetDTBool]
description = '<internal></internal>\r\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\r\n\r\nSets the specified bool on the entity\'s datatable.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'number'
description = 'Goes from 0 to 31.'
``````````
name = 'bool'
type = 'boolean'
description = 'The boolean to write on the entity\'s metatable.'

[SetDTEntity]
description = '<internal></internal>\r\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\r\n\r\nSets the specified entity on this entity\'s datatable.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'number'
description = 'Goes from 0 to 31.'
``````````
name = 'ent'
type = 'Entity'
description = 'The entity to write on this entity\'s datatable.'

[SetDTFloat]
description = '<internal></internal>\r\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\r\n\r\nSets the specified float on the entity\'s datatable.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'number'
description = 'Goes from 0 to 31.'
``````````
name = 'float'
type = 'number'
description = 'The float to write on the entity\'s datatable.'

[SetDTInt]
description = '<internal></internal>\r\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\r\n\r\nSets the specified integer on the entity\'s datatable.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'number'
description = 'Goes from 0 to 31.'
``````````
name = 'integer'
type = 'number'
description = 'The integer to write on the entity\'s datatable. This will be cast to a 32-bit signed integer internally.'

[SetDTString]
description = '<internal></internal>\r\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\r\n\r\nSets the specified string on the entity\'s datatable.\r\n\r\n<note>The length of these strings are capped at 512 characters.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'number'
description = 'Goes from 0 to 3.'
``````````
name = 'str'
type = 'string'
description = 'The string to write on the entity\'s datatable, can\'t be more than 512 characters per string.'

[SetDTVector]
description = '<internal></internal>\r\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\r\n\r\nSets the specified vector on the entity\'s datatable.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'number'
description = 'Goes from 0 to 31.'
``````````
name = 'vec'
type = 'Vector'
description = 'The vector to write on the entity\'s datatable.'

[SetElasticity]
description = 'Sets the elasticity of this entity, used by some flying entities such as the Helicopter NPC to determine how much it should bounce around when colliding.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'elasticity'
type = 'number'
description = 'The elasticity to set.'

[SetEntity]
description = 'Allows you to set the Start or End entity attachment for the rope.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'name'
type = 'string'
description = 'The name of the variable to modify.\r\nAccepted names are StartEntity and EndEntity.'
``````````
name = 'entity'
type = 'Entity'
description = 'The entity to apply to the specific attachment.'

[SetEyeTarget]
description = 'Sets the position an entity\'s eyes look toward.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'pos'
type = 'Vector'
description = 'The world position the entity is looking toward.'

[SetFlexScale]
description = 'Sets the flex scale of the entity.\r\n\r\n<bug issue="1779">This does not work on <page>Global.ClientsideModel</page>s or <page>Global.ClientsideRagdoll</page>s.</bug>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'scale'
type = 'number'
description = 'The new flex scale to set to'

[SetFlexWeight]
description = 'Sets the flex weight.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'flex'
type = 'number'
description = 'The ID of the flex to modify weight of'
``````````
name = 'weight'
type = 'number'
description = 'The new weight to set'

[SetFriction]
description = 'Sets how much friction an entity has when sliding against a surface. Entities default to 1 (100%) and can be higher or even negative.\r\n<note>This only multiplies the friction of the entity, to change the value itself use <page>PhysObj:SetMaterial</page>.</note>\r\n\r\n<note>Works only for MOVETYPE_STEP entities.</note>\r\n\r\n<bug issue="1395">This has no effect on players.</bug>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'friction'
type = 'number'
description = 'Friction multiplier'

[SetGravity]
description = 'Sets the gravity multiplier of the entity.\r\n\r\n<bug issue="3648">This function is not predicted.</bug>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'gravityMultiplier'
type = 'number'
description = 'Value which specifies the gravity multiplier.'

[SetGroundEntity]
description = 'Sets the ground the entity is standing on.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'ground'
type = 'Entity'
description = 'The ground entity.'

[SetHealth]
description = 'Sets the health of the entity.\r\n\r\n<note>You may want to take <page>Entity:GetMaxHealth</page> into account when calculating what to set health to, in case a gamemode has a different max health than 100.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'newHealth'
type = 'number'
description = 'New health value.'

[SetHitboxSet]
description = 'Sets the current Hitbox set for the entity.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'id'
type = 'number'
description = 'The new hitbox set to set. Can be a name as a <page>string</page>, or the ID as a <page>number</page>.\r\n\r\nIf the operation failed, the function will silently fail.'

[SetIK]
description = 'Enables or disable the inverse kinematic usage of this entity.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
``````````
name = 'useIK'
type = 'boolean'
description = 'The state of the IK.'

[SetKeyValue]
description = 'Sets Hammer key values on an entity.\r\n\r\nYou can look up which entities have what key values on the [Valve Developer Community](https://developer.valvesoftware.com/wiki/) on entity pages.\r\n\r\n\r\nA  list of basic entities can be found [here](https://developer.valvesoftware.com/wiki/List_of_entities).\r\n\r\nAlternatively you can look at the .fgd files shipped with Garry\'s Mod in the bin/ folder with a text editor to see the key values as they appear in Hammer.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The internal key name'
``````````
name = 'value'
type = 'string'
description = 'The value to set'

[SetLagCompensated]
description = 'This allows the entity to be lag compensated during <page>Player:LagCompensation</page>.\r\n\r\n<note>Players are lag compensated by default and there\'s no need to call this function for them.\r\n\r\nIt\'s best to not enable lag compensation on parented entities, as the system does not handle it that well ( they will be moved back but then the entity will lag behind ).\r\nParented entities move back with the parent if it\'s lag compensated, so if you are making some kind of armor piece you shouldn\'t do anything.</note>\r\n\r\nAs a side note for parented entities, if your entity can be shot at, keep in mind that its collision bounds need to be bigger than the bone\'s hitbox the entity is parented to, or hull/line traces ( such as the crowbar attack or bullets ) might not hit at all.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'enable'
type = 'boolean'
description = 'Whether the entity should be lag compensated or not.'

[SetLayerBlendIn]
description = '<note>This function only works on <page>BaseAnimatingOverlay</page> entites!</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'layerID'
type = 'number'
description = 'The Layer ID'
``````````
name = 'blendIn'
type = 'number'
description = ''

[SetLayerBlendOut]
description = '<note>This function only works on <page>BaseAnimatingOverlay</page> entites!</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'layerID'
type = 'number'
description = 'The Layer ID'
``````````
name = 'blendOut'
type = 'number'
description = ''

[SetLayerCycle]
description = 'Sets the animation cycle/frame of given layer.\r\n\r\n<note>This function only works on <page>BaseAnimatingOverlay</page> entities.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'layerID'
type = 'number'
description = 'The Layer ID'
``````````
name = 'cycle'
type = 'number'
description = 'The new animation cycle/frame for given layer.'

[SetLayerDuration]
description = 'Sets the duration of given layer. This internally overrides the <page>Entity:SetLayerPlaybackRate</page>.\r\n\r\n<note>This function only works on <page>BaseAnimatingOverlay</page> entities.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'layerID'
type = 'number'
description = 'The Layer ID'
``````````
name = 'duration'
type = 'number'
description = 'The new duration of the layer in seconds.'

[SetLayerLooping]
description = 'Sets whether the layer should loop or not.\r\n\r\n<note>This function only works on <page>BaseAnimatingOverlay</page> entites!</note>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'layerID'
type = 'number'
description = 'The Layer ID'
``````````
name = 'loop'
type = 'boolean'
description = 'Whether the layer should loop or not.'

[SetLayerPlaybackRate]
description = 'Sets the layer playback rate. See also <page>Entity:SetLayerDuration</page>.\r\n\r\n<note>This function only works on <page>BaseAnimatingOverlay</page> entities.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'layerID'
type = 'number'
description = 'The Layer ID'
``````````
name = 'rate'
type = 'number'
description = 'The new playback rate.'

[SetLayerPriority]
description = 'Sets the priority of given layer.\r\n\r\n<note>This function only works on <page>BaseAnimatingOverlay</page> entites!</note>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'layerID'
type = 'number'
description = 'The Layer ID'
``````````
name = 'priority'
type = 'number'
description = 'The new priority of the layer.'

[SetLayerSequence]
description = 'Sets the sequence of given layer.\r\n\r\n<note>This function only works on <page>BaseAnimatingOverlay</page> entities.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'layerID'
type = 'number'
description = 'The Layer ID.'
``````````
name = 'seq'
type = 'number'
description = 'The sequenceID to set. See <page>Entity:LookupSequence</page>.'

[SetLayerWeight]
description = 'Sets the layer weight. This influences how strongly the animation should be overriding the normal animations of the entity.\r\n\r\n<note>This function only works on <page>BaseAnimatingOverlay</page> entities.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'layerID'
type = 'number'
description = 'The Layer ID'
``````````
name = 'weight'
type = 'number'
description = 'The new layer weight.'

[SetLegacyTransform]
description = 'This forces an entity to use the bone transformation behaviour from versions prior to **8 July 2014**.\r\n\r\nThis behaviour affects <page>Entity:EnableMatrix</page> and <page>Entity:SetModelScale</page> and is incorrect, therefore this function be used exclusively as a quick fix for old scripts that rely on it.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
``````````
name = 'enabled'
type = 'boolean'
description = 'Whether the entity should use the old bone transformation behaviour or not.'

[SetLightingOriginEntity]
description = 'Sets the entity to be used as the light origin position for this entity.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'lightOrigin'
type = 'Entity'
description = 'The lighting entity.'

[SetLocalAngles]
description = 'Sets angles relative to angles of <page>Entity:GetParent</page>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'ang'
type = 'Angle'
description = 'The local angle'

[SetLocalAngularVelocity]
description = 'Sets the entity\'s angular velocity (rotation speed).\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'angVel'
type = 'Angle'
description = 'The angular velocity to set.'

[SetLocalPos]
description = 'Sets local position relative to the parented position. This is for use with <page>Entity:SetParent</page> to offset position.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'pos'
type = 'Vector'
description = 'The local position'

[SetLocalVelocity]
description = 'Sets the entity\'s local velocity which is their velocity due to movement in the world from forces such as gravity. Does not include velocity from entity-on-entity collision or other world movement.\r\n\r\n<warning>Same as <page>Entity:SetAbsVelocity</page>, but clamps the given velocity, and is not recommended to be used because of that.</warning>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'velocity'
type = 'Vector'
description = 'The new velocity to set.'

[SetLOD]
description = 'Sets the Level Of Detail model to use with this entity. This may not work for all models if the model doesn\'t include any LOD sub models.\r\n\r\nThis function works exactly like the clientside r_lod convar and takes priority over it.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
``````````
name = 'lod'
type = 'number'
description = 'The Level Of Detail model ID to use. -1 leaves the engine to automatically set the Level of Detail.\r\n\r\nThe Level Of Detail may range from 0 to 8, with 0 being the highest quality and 8 the lowest.'

[SetMaterial]
description = 'Sets the rendering material override of the entity.\r\n\r\nTo set a Lua material created with <page>Global.CreateMaterial</page>, just prepend a "!" to the material name.\r\n\r\nIf you wish to override a single material on the model, use <page>Entity:SetSubMaterial</page> instead.\r\n\r\n<note>To apply materials to models, that material **must** have **VertexLitGeneric** shader. For that reason you cannot apply map textures onto models, map textures use a different material shader - **LightmappedGeneric**, which can be used on brush entities.</note>\r\n\r\n<bug issue="3362">The server\'s value takes priority on the client.</bug>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'materialName'
type = 'string'
description = 'New material name. Use an empty string ("") to reset to the default materials.'

[SetMaxHealth]
description = 'Sets the maximum health for entity. Note, that you can still set entity\'s health above this amount with <page>Entity:SetHealth</page>.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'maxhealth'
type = 'number'
description = 'What the max health should be'

[SetModel]
description = 'Sets the model of the entity.\r\n\r\nThis does not update the physics of the entity - see <page>Entity:PhysicsInit</page>.\r\n\r\n<warning>This silently fails when given an empty string.</warning>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'modelName'
type = 'string'
description = 'New model value.'

[SetModelName]
description = 'Alter the model name returned by <page>Entity:GetModel</page>. Does not affect the entity\'s actual model.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'modelname'
type = 'string'
description = 'The new model name.'

[SetModelScale]
description = 'Scales the model of the entity, if the entity is a <page>Player</page> or an <page>NPC</page> the hitboxes will be scaled as well.\r\n\r\nFor some entities, calling <page>Entity:Activate</page> after this will scale the collision bounds and <page>PhysObj</page> as well; be wary as there\'s no optimization being done internally and highly complex collision models might crash the server.\r\n\r\nThis is the same system used in TF2 for the Mann Vs Machine robots.\r\n\r\nTo resize the entity along any axis, use <page>Entity:EnableMatrix</page> instead.\r\n\r\nIf your old scales are wrong, use <page>Entity:SetLegacyTransform</page> as a quick fix.\r\n\r\n<bug issue="2193">The hull does not scale properly with this function.</bug>\r\n\r\n<bug issue="3502">This does not scale procedural bones and disables IK.</bug>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'scale'
type = 'number'
description = 'A float to scale the model by. 0 will not draw anything. A number less than 0 will draw the model inverted.'
``````````
name = 'deltaTime'
type = 'number'
description = 'Transition time of the scale change, set to 0 to modify the scale right away.'

[SetMoveCollide]
description = 'Sets the move collide type of the entity. The move collide is the way a physics object reacts to hitting an object - will it bounce, slide?\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'moveCollideType'
type = 'number'
description = 'The move collide type, see <page>Enums/MOVECOLLIDE</page>'

[SetMoveParent]
description = 'Sets the Movement Parent of an entity to another entity.\r\n\r\nSimilar to <page>Entity:SetParent</page>, except the object\'s coordinates are not translated automatically before parenting.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'Parent'
type = 'Entity'
description = 'The entity to change this entity\'s Movement Parent to.'

[SetMoveType]
description = 'Sets the entity\'s move type. This should be called before initializing the physics object on the entity, unless it will override SetMoveType such as <page>Entity:PhysicsInitBox</page>.\r\n\r\nDespite existing on client, it doesn\'t actually do anything on client.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'movetype'
type = 'number'
description = 'The new movetype, see <page>Enums/MOVETYPE</page>'

[SetName]
description = 'Sets the mapping name of the entity.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'mappingName'
type = 'string'
description = 'The name to set for the entity.'

[SetNetworkAngles]
description = 'Alters the entity\'s perceived serverside angle on the client.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
``````````
name = 'angle'
type = 'Angle'
description = 'Networked angle.'

[SetNetworkedAngle]
description = '<deprecated>You should use <page>Entity:SetNWAngle</page> instead.</deprecated>\r\n\r\nSets a networked angle value at specified index on the entity.\r\n\r\nThe value then can be accessed with <page>Entity:GetNetworkedAngle</page> both from client and server.\r\n\r\n<note>Running this function clientside will only set it clientside for the client it is called on.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key to associate the value with'
``````````
name = 'value'
type = 'Angle'
description = 'The value to set'

[SetNetworkedBool]
description = '<deprecated>You should use <page>Entity:SetNWBool</page> instead.</deprecated>\r\n\r\nSets a networked boolean value at specified index on the entity.\r\n\r\nThe value then can be accessed with <page>Entity:GetNetworkedBool</page> both from client and server.\r\n\r\n<note>Running this function clientside will only set it clientside for the client it is called on.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key to associate the value with'
``````````
name = 'value'
type = 'boolean'
description = 'The value to set'

[SetNetworkedEntity]
description = '<deprecated>You should use <page>Entity:SetNWEntity</page> instead.</deprecated>\r\n\r\nSets a networked entity value at specified index on the entity.\r\n\r\nThe value then can be accessed with <page>Entity:GetNetworkedEntity</page> both from client and server.\r\n\r\n<note>Running this function clientside will only set it clientside for the client it is called on.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key to associate the value with'
``````````
name = 'value'
type = 'Entity'
description = 'The value to set'

[SetNetworkedFloat]
description = '<deprecated>You should use <page>Entity:SetNWFloat</page> instead.</deprecated>\r\n\r\nSets a networked float value at specified index on the entity.\r\n\r\nThe value then can be accessed with <page>Entity:GetNetworkedFloat</page> both from client and server.\r\n\r\nSeems to be the same as <page>Entity:GetNetworkedInt</page>.\r\n\r\n<note>Running this function clientside will only set it clientside for the client it is called on.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key to associate the value with'
``````````
name = 'value'
type = 'number'
description = 'The value to set'

[SetNetworkedInt]
description = '<deprecated>You should use <page>Entity:SetNWInt</page> instead.</deprecated>\r\n\r\nSets a networked integer value at specified index on the entity.\r\n\r\nThe value then can be accessed with <page>Entity:GetNetworkedInt</page> both from client and server.\r\n\r\n<note>Running this function clientside will only set it clientside for the client it is called on.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key to associate the value with'
``````````
name = 'value'
type = 'number'
description = 'The value to set'

[SetNetworkedNumber]
description = 'Sets a networked number at the specified index on the entity.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'index'
type = 'any'
description = 'The index that the value is stored in.'
``````````
name = 'number'
type = 'number'
description = 'The value to network.'

[SetNetworkedString]
description = '<deprecated>You should use <page>Entity:SetNWString</page> instead.</deprecated>\r\n\r\nSets a networked string value at specified index on the entity.\r\n\r\nThe value then can be accessed with <page>Entity:GetNetworkedString</page> both from client and server.\r\n\r\n<note>Running this function clientside will only set it clientside for the client it is called on.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key to associate the value with'
``````````
name = 'value'
type = 'string'
description = 'The value to set'

[SetNetworkedVarProxy]
description = '<deprecated>You should be using <page>Entity:SetNWVarProxy</page> instead.</deprecated>\r\nSets callback function to be called when given NWVar changes.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'name'
type = 'string'
description = 'The name of the NWVar to add callback for.'
``````````
name = 'callback'
type = 'function'
description = 'The function to be called when the NWVar changes.'

[SetNetworkedVector]
description = '<deprecated>You should use <page>Entity:SetNWVector</page> instead.</deprecated>\r\n\r\nSets a networked vector value at specified index on the entity.\r\n\r\nThe value then can be accessed with <page>Entity:GetNetworkedVector</page> both from client and server.\r\n\r\n<note>Running this function clientside will only set it clientside for the client it is called on.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key to associate the value with'
``````````
name = 'value'
type = 'Vector'
description = 'The value to set'

[SetNetworkOrigin]
description = 'Virtually changes entity position for clients. Does the same thing as <page>Entity:SetPos</page> when used serverside.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'origin'
type = 'Vector'
description = 'The position to make clients think this entity is at.'

[SetNextClientThink]
description = 'Sets the next time the clientside <page>ENTITY:Think</page> is called.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
``````````
name = 'nextthink'
type = 'number'
description = 'The next time, relative to <page>Global.CurTime</page>, to execute the <page>ENTITY:Think</page> clientside.'

[SetNoDraw]
description = 'Sets if the entity\'s model should render at all.\r\n\r\nIf set on the server, this entity will no longer network to clients, and for all intents and purposes cease to exist clientside.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'shouldNotDraw'
type = 'boolean'
description = 'true disables drawing'

[SetNotSolid]
description = 'Sets whether the entity is solid or not.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'IsNotSolid'
type = 'boolean'
description = 'True will make the entity not solid, false will make it solid.'

[SetNWAngle]
description = 'Sets a networked angle value on the entity.\r\n\r\nThe value can then be accessed with <page>Entity:GetNWAngle</page> both from client and server.\r\n\r\n<note>Running this function clientside will only set it for the client it is called on.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key to associate the value with'
``````````
name = 'value'
type = 'Angle'
description = 'The value to set'

[SetNWBool]
description = 'Sets a networked boolean value on the entity.\r\n\r\nThe value can then be accessed with <page>Entity:GetNWBool</page> both from client and server.\r\n\r\n<note>Running this function clientside will only set it for the client it is called on.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key to associate the value with'
``````````
name = 'value'
type = 'boolean'
description = 'The value to set'

[SetNWEntity]
description = 'Sets a networked entity value on the entity.\r\n\r\nThe value can then be accessed with <page>Entity:GetNWEntity</page> both from client and server.\r\n\r\n<note>Running this function clientside will only set it for the client it is called on.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key to associate the value with'
``````````
name = 'value'
type = 'Entity'
description = 'The value to set'

[SetNWFloat]
description = 'Sets a networked float (number) value on the entity.\r\n\r\nThe value can then be accessed with <page>Entity:GetNWFloat</page> both from client and server.\r\n\r\nUnlike <page>Entity:SetNWInt</page>, floats don\'t have to be whole numbers.\r\n\r\n<note>Running this function clientside will only set it for the client it is called on.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key to associate the value with'
``````````
name = 'value'
type = 'number'
description = 'The value to set'

[SetNWInt]
description = 'Sets a networked integer (whole number) value on the entity.\r\n\r\nThe value can then be accessed with <page>Entity:GetNWInt</page> both from client and server.\r\n\r\nSee <page>Entity:SetNWFloat</page> for numbers that aren\'t integers.\r\n\r\n<note>Running this function clientside will only set it for the client it is called on.</note>\r\n<bug issue="3374">This function will not round decimal values as it actually networks a float internally.</bug>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key to associate the value with'
``````````
name = 'value'
type = 'number'
description = 'The value to set'

[SetNWString]
description = 'Sets a networked string value on the entity.\r\n\r\nThe value can then be accessed with <page>Entity:GetNWString</page> both from client and server.\r\n\r\n<note>Running this function clientside will only set it for the client it is called on.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key to associate the value with'
``````````
name = 'value'
type = 'string'
description = 'The value to set, up to 199 characters.'

[SetNWVarProxy]
description = 'Sets a function to be called when the NWVar changes.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'any'
description = 'The key of the NWVar to add callback for.'
``````````
name = 'callback'
type = 'function'
description = 'The function to be called when the NWVar changes. It has 4 arguments:\r\n* <page>Entity</page> ent - The entity\r\n* <page>string</page> name - Name of the NWVar that has changed\r\n* <page>any</page> oldval - The old value\r\n* <page>any</page> newval - The new value'

[SetNWVector]
description = 'Sets a networked vector value on the entity.\r\n\r\nThe value can then be accessed with <page>Entity:GetNWVector</page> both from client and server.\r\n\r\n<note>Running this function clientside will only set it for the client it is called on.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'string'
description = 'The key to associate the value with'
``````````
name = 'value'
type = 'Vector'
description = 'The value to set'

[SetOwner]
description = 'Sets the owner of this entity, disabling all physics interaction with it.\r\n\r\n<note>This function is generally used to disable physics interactions on projectiles being fired by their owner, but can also be used for normal ownership in case physics interactions are not involved at all. The Gravity gun will be able to pick up the entity even if the owner can\'t collide with it, the Physics gun however will not.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'owner'
type = 'Entity'
description = 'The entity to be set as owner.'

[SetParent]
description = 'Sets the parent of this entity, making it move with its parent.\r\n\r\n<note>This does not work on <page text="the world">game.GetWorld</page>.</note>\r\n<warning>This can cause undefined physics behaviour when used on entities that don\'t support parenting. See the [Valve developer wiki](https://developer.valvesoftware.com/wiki/Entity_Hierarchy_(parenting)) for more information.</warning>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'parent'
type = 'Entity'
description = 'The entity to parent to. Setting this to nil will clear the parent.'
``````````
name = 'attachmentId'
type = 'number'
description = 'The attachment id to use when parenting, defaults to -1 or whatever the parent had set previously.\r\n\r\n\r\n<note>You must call <page>Entity:SetMoveType</page>( MOVETYPE_NONE ) on the child for this argument to have any effect!</note>'

[SetParentPhysNum]
description = 'Sets the parent of an entity to another entity with the given physics bone number. Similar to <page>Entity:SetParent</page>, except it is parented to a physbone. This function is useful mainly for ragdolls.\r\n\r\n<note>Despite this function being available server side, it doesn\'t actually do anything server side.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'bone'
type = 'number'
description = 'Physics bone number to attach to. Use 0 for objects with only one physics bone. (See <page>Entity:GetPhysicsObjectNum</page>)'

[SetPersistent]
description = 'Sets whether or not the given entity is persistent. A persistent entity will be saved on server shutdown and loaded back when the server starts up. Additionally, by default persistent entities cannot be grabbed with the physgun and tools cannot be used on them.\r\n\r\nIn sandbox, this can be set on an entity by opening the context menu, right clicking the entity, and choosing "Make Persistent".\r\n\r\n<note>Persistence can only be enabled with the sbox_persist convar, which works as an identifier for the current set of persistent entities. An empty identifier (which is the default value) disables this feature.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'persist'
type = 'boolean'
description = 'Whether or not the entity should be persistent.'

[SetPhysConstraintObjects]
description = 'When called on a constraint entity, sets the two physics objects to be constrained.\r\n\r\nUsage is not recommended as the Constraint library provides easier ways to deal with constraints.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'Phys1'
type = 'PhysObj'
description = 'The first physics object to be constrained.'
``````````
name = 'Phys2'
type = 'PhysObj'
description = 'The second physics object to be constrained.'

[SetPhysicsAttacker]
description = 'Sets the player who gets credit if this entity kills something with physics damage within the time limit.\r\n\r\n<note>This can only be called on props, "anim" type SENTs and vehicles.</note>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'ent'
type = 'Player'
description = 'Player who gets the kills. Setting this to a non-player entity will not work.'
``````````
name = 'timeLimit'
type = 'number'
description = 'Time in seconds until the entity forgets its physics attacker and prevents it from getting the kill credit.'

[SetPlaybackRate]
description = 'Allows you to set how fast an entity\'s animation will play, with 1.0 being the default speed.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'fSpeed'
type = 'number'
description = 'How fast the animation will play.'

[SetPos]
description = 'Moves the entity to the specified position.\r\n\r\n<note>If the new position doesn\'t take effect right away, you can use <page>Entity:SetupBones</page> to force it to do so. This issue is especially common when trying to render the same entity twice or more in a single frame at different positions.</note>\r\n\r\n<warning>Entities with <page>Entity:GetSolid</page> of SOLID_BBOX will have their angles reset!</warning>\r\n\r\n<bug issue="2447">This will fail inside of predicted functions called during player movement processing. This includes <page>WEAPON:PrimaryAttack</page> and <page>WEAPON:Think</page>.</bug>\r\n\r\n<note>Some entities, such as ragdolls, will appear unaffected by this function in the next frame. Consider <page>PhysObj:SetPos</page> if necessary.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'position'
type = 'Vector'
description = 'The position to move the entity to.'

[SetPoseParameter]
description = 'Sets the specified pose parameter to the specified value.\r\n\r\nYou should call <page>Entity:InvalidateBoneCache</page> after calling this function.\r\n\r\n<note>Avoid calling this in draw hooks, especially when animating things, as it might cause visual artifacts.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'poseName'
type = 'string'
description = 'Name of the pose parameter. <page>Entity:GetPoseParameterName</page> might come in handy here.'
``````````
name = 'poseValue'
type = 'number'
description = 'The value to set the pose to.'

[SetPredictable]
description = 'Sets whether an entity should be predictable or not.\r\nWhen an entity is set as predictable, its DT vars can be changed during predicted hooks. This is useful for entities which can be controlled by player input.\r\n\r\nAny datatable value that mismatches from the server will be overridden and a prediction error will be spewed.\r\n\r\nWeapons are predictable by default, and the drive system uses this function to make the controlled prop predictable as well.\r\n\r\nVisit  for a list of all predicted hooks, and the <page>Prediction</page> page.\r\nFor further technical information on the subject, visit [valve\'s wiki](https://developer.valvesoftware.com/wiki/Prediction).\r\n\r\n<note>This function resets the datatable variables everytime it\'s called, it should ideally be called when a player starts using the entity and when he stops</note>\r\n<note>Entities set as predictable with this function will be unmarked when the user lags and receives a full packet update, to handle such case visit <page>GM:NotifyShouldTransmit</page></note>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
``````````
name = 'setPredictable'
type = 'boolean'
description = 'whether to make this entity predictable or not.'

[SetPreventTransmit]
description = 'Prevents the server from sending any further information about the entity to a player.\r\n\r\n<bug issue="1736">This does not work for nextbots.</bug>\r\n\r\n\r\n\r\n<validate>When using this function, <page>Entity:SetFlexScale</page> will conflict with this function. Instead, consider using <page>Entity:SetFlexScale</page> on the client.</validate>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'player'
type = 'Player'
description = 'The player to stop networking the entity to.'
``````````
name = 'stopTransmitting'
type = 'boolean'
description = 'true to stop the entity from networking, false to make it network again.'

[SetRagdollAng]
description = 'Sets the bone angles. This is used alongside Kinect in <page>Entity:SetRagdollBuildFunction</page>, for more info see ragdoll_motion entity.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'boneid'
type = 'number'
description = 'Bone ID'
``````````
name = 'pos'
type = 'Angle'
description = 'Angle to set'

[SetRagdollBuildFunction]
description = 'Sets the function to build the ragdoll. This is used alongside Kinect, for more info see ragdoll_motion entity.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'func'
type = 'function'
description = 'The build function. This function has one argument:\r\n* <page>Entity</page> ragdoll - The ragdoll to build'

[SetRagdollPos]
description = 'Sets the bone position. This is used alongside Kinect in <page>Entity:SetRagdollBuildFunction</page>, for more info see ragdoll_motion entity.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'boneid'
type = 'number'
description = 'Bone ID'
``````````
name = 'pos'
type = 'Vector'
description = 'Position to set'

[SetRenderAngles]
description = 'Sets the render angles of the Entity.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
``````````
name = 'newAngles'
type = 'Angle'
description = 'The new render angles to be set to.'

[SetRenderBounds]
description = 'Sets the render bounds for the entity. For world space coordinates see <page>Entity:SetRenderBoundsWS</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
``````````
name = 'mins'
type = 'Vector'
description = 'The minimum corner of the bounds, relative to origin of the entity.'
``````````
name = 'maxs'
type = 'Vector'
description = 'The maximum corner of the bounds, relative to origin of the entity.'
``````````
name = 'add'
type = 'Vector'
description = 'If defined, adds this vector to maxs and subtracts this vector from mins.'

[SetRenderBoundsWS]
description = 'Sets the render bounds for the entity in world space coordinates. For relative coordinates see <page>Entity:SetRenderBounds</page>.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
``````````
name = 'mins'
type = 'Vector'
description = 'The minimum corner of the bounds, relative to origin of the world/map.'
``````````
name = 'maxs'
type = 'Vector'
description = 'The maximum corner of the bounds, relative to origin of the world/map.'
``````````
name = 'add'
type = 'Vector'
description = 'If defined, adds this vector to maxs and subtracts this vector from mins.'

[SetRenderClipPlane]
description = 'Used to specify a plane, past which an object will be visually clipped.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
``````````
name = 'planeNormal'
type = 'Vector'
description = 'The normal of the plane. Anything behind the normal will be clipped.'
``````````
name = 'planePosition'
type = 'number'
description = 'The position of the plane.'

[SetRenderClipPlaneEnabled]
description = 'Enables the use of clipping planes to "cut" objects.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
``````````
name = 'enabled'
type = 'boolean'
description = 'Enable or disable clipping planes'

[SetRenderFX]
description = 'Sets entity\'s render FX.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'renderFX'
type = 'number'
description = 'The new render FX to set, see <page>Enums/kRenderFx</page>'

[SetRenderMode]
description = 'Sets the render mode of the entity.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'renderMode'
type = 'number'
description = 'New render mode to set, see <page>Enums/RENDERMODE</page>.'

[SetRenderOrigin]
description = 'Set the origin in which the Entity will be drawn from.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
``````````
name = 'newOrigin'
type = 'Vector'
description = 'The new origin in world coordinates where the Entity\'s model will now be rendered from.'

[SetSaveValue]
description = 'Sets a save value for an entity. You can see a full list of an entity\'s save values by creating it and printing <page>Entity:GetSaveTable</page>().\r\n\r\nSee <page>Entity:GetInternalVariable</page> for the opposite of this function.\r\n\r\n<bug issue="4065">This does not type-check entity keys. Setting an entity key to a non-entity value will treat it as NULL.</bug>\r\n\r\n**Returns:** Key successfully set\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'name'
type = 'string'
description = 'Name of the save value to set'
``````````
name = 'value'
type = 'any'
description = 'Value to set'
[[.returns]]
type = 'boolean'

[SetSequence]
description = 'Sets the entity\'s model sequence.\r\n\r\nIf the specified sequence is already active, the animation will not be restarted. See <page>Entity:ResetSequence</page> for a function that restarts the animation even if it is already playing.\r\n\r\nIn some cases you want to run <page>Entity:ResetSequenceInfo</page> to make this function run.\r\n\r\n<note>This will not work properly if called directly after calling <page>Entity:SetModel</page>. Consider waiting until the next Tick.\r\n\r\nWill not work on players due to the animations being reset every frame by the base gamemode animation system. See <page>GM:CalcMainActivity</page>.\r\n\r\nFor custom scripted entities you will want to apply example from <page>ENTITY:Think</page> to make animations work.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'sequenceId'
type = 'number'
description = 'The sequence to play. Also accepts strings.\r\n\r\n<note>If set to a string, the function will automatically call <page>Entity:LookupSequence</page> to retrieve the sequence ID as a number.</note>'

[SetShouldPlayPickupSound]
description = 'Sets whether or not the entity should make a physics contact sound when it\'s been picked up by a player.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'playsound'
type = 'boolean'
description = 'True to play the pickup sound, false otherwise.'

[SetShouldServerRagdoll]
description = 'Sets if entity should create a server ragdoll on death or a client one.\r\n\r\n<note>Player ragdolls created with this enabled will have an owner set, see <page>Entity:SetOwner</page> for more information on what effects this has.</note>\r\n\r\n<note>This is reset for players when they respawn. (<page>Entity:Spawn</page>)</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'serverragdoll'
type = 'boolean'
description = 'Set true if ragdoll should be created on server, false if on client'

[SetSkin]
description = 'Sets the skin of the entity.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'skinIndex'
type = 'number'
description = '0-based index of the skin to use.'

[SetSolid]
description = 'Sets the solidity of an entity.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'solid_type'
type = 'number'
description = 'The solid type. See the <page>Enums/SOLID</page>.'

[SetSolidFlags]
description = 'Sets solid flag(s) for the entity.\r\n\r\nThis overrides any other flags the entity might have had. See <page>Entity:AddSolidFlags</page> for adding flags.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'flags'
type = 'number'
description = 'The flag(s) to set, see <page>Enums/FSOLID</page>.'

[SetSpawnEffect]
description = 'Sets whether the entity should use a spawn effect when it is created on the client.\r\n\r\nSee <page>Entity:GetSpawnEffect</page> for more information on how the effect is applied.\r\n\r\n<note>This function will only have an effect when the entity spawns. After that it will do nothing even is set to true.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'spawnEffect'
type = 'boolean'
description = 'Sets if we should show a spawn effect.'

[SetSubMaterial]
description = 'Overrides a single material on the model of this entity.\r\n\r\nTo set a Lua material created with <page>Global.CreateMaterial</page>, just prepend a "!" to the material name.\r\n\r\n<bug issue="3362">The server\'s value takes priority on the client.</bug>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'index'
type = 'number'
description = 'Index of the material to override, acceptable values are from 0 to 31.\r\n\r\nIndexes are by <page>Entity:GetMaterials</page>, but you have to subtract 1 from them.\r\n\r\nIf called with no arguments, all sub materials will be reset.'
``````````
name = 'material'
type = 'string'
description = 'The material to override the default one with. Set to nil to revert to default material.'

[SetTable]
description = 'Changes the table that can be accessed by indexing an entity. Each entity starts with its own table by default.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'tab'
type = 'table'
description = 'Table for the entity to use'

[SetTransmitWithParent]
description = 'When this flag is set the entity will only transmit to the player when its parent is transmitted. This is useful for things like viewmodel attachments since without this flag they will transmit to everyone (and cause the viewmodels to transmit to everyone too).\r\n\r\n<note>In the case of scripted entities, this will override <page>ENTITY:UpdateTransmitState</page></note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'onoff'
type = 'boolean'
description = 'Will set the TransmitWithParent flag on or off'

[SetTrigger]
description = 'Marks the entity as a trigger, so it will generate <page>ENTITY:StartTouch</page>, <page>ENTITY:Touch</page> and <page>ENTITY:EndTouch</page> callbacks.\r\n\r\nInternally this is stored as <page text="FSOLID_TRIGGER">Enums/FSOLID</page> flag.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'maketrigger'
type = 'boolean'
description = 'Make the entity trigger or not'

[SetUnFreezable]
description = 'Sets whether an entity can be unfrozen, meaning that it cannot be unfrozen using the physgun.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'freezable'
type = 'boolean'
description = 'True to make the entity unfreezable, false otherwise.'

[SetupBones]
description = 'Forces the entity to reconfigure its bones. You might need to call this after changing your model\'s scales or when manually drawing the entity multiple times at different positions.\r\n\r\n<note>This calls the BuildBonePositions callback added via <page>Entity:AddCallback</page>, so avoid calling this function inside it to prevent an infinite loop.</note>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'

[SetupPhonemeMappings]
description = 'Initializes the class names of an entity\'s phoneme mappings (mouth movement data). This is called by default with argument "phonemes" when a flex-based entity (such as an <page>NPC</page>) is created.\r\n\r\n<note>TF2 phonemes can be accessed by using a path such as "player/scout/phonemes/phonemes" , check TF2\'s "tf2_misc_dir.vpk" with GCFScape for other paths, however it seems that TF2 sounds don\'t contain phoneme definitions anymore after being converted to mp3 and only rely on VCD animations, this needs to be further investigated</note>\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
``````````
name = 'fileRoot'
type = 'string'
description = 'The file prefix of the phoneme mappings (relative to "garrysmod/expressions/").'

[SetUseType]
description = 'Sets the use type of an entity, affecting how often <page>ENTITY:Use</page> will be called for Lua entities.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'useType'
type = 'number'
description = 'The use type to apply to the entity. Uses <page>Enums/_USE</page>.'

[SetVar]
description = 'Allows to quickly set variable to entity\'s <page>Entity:GetTable</page>.\r\n\r\n<note>This will not network the variable to client(s). You want <page>Entity:SetNWString</page> and similar functions for that</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'key'
type = 'any'
description = 'Key of the value to set'
``````````
name = 'value'
type = 'any'
description = 'Value to set the variable to'

[SetVelocity]
description = 'Sets the entity\'s velocity. For entities with physics, consider using <page>PhysObj:SetVelocity</page> on the <page>PhysObj</page> of the entity.\r\n\r\n<note>Actually binds to CBaseEntity::SetBaseVelocity() which sets the entity\'s velocity due to forces applied by other entities.</note>\r\n\r\n<warning>If applied to a player, this will actually **ADD** velocity, not set it.</warning>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'velocity'
type = 'Vector'
description = 'The new velocity to set.'

[SetWeaponModel]
description = 'Sets the model and associated weapon to this viewmodel entity.\r\n\r\nThis is used internally when the player switches weapon.\r\n\r\n<note>View models are not drawn without a weapons associated to them.</note>\r\n<warning>This will silently fail if the entity is not a viewmodel.</warning>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'viewModel'
type = 'string'
description = 'The model string to give to this viewmodel.\r\nExample: "models/weapons/c_smg1.mdl"'
``````````
name = 'weapon'
type = 'Weapon'
description = 'The weapon entity to associate this viewmodel to.'

[SkinCount]
description = 'Returns the amount of skins the entity has.\r\n\r\n**Returns:** The amount of skins the entity\'s model has.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[SnatchModelInstance]
description = 'Moves the model instance from the source entity to this entity. This can be used to transfer decals that have been applied on one entity to another.\r\n\r\nBoth entities must have the same model.\r\n\r\n**Returns:** Whether the operation was successful or not\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
``````````
name = 'srcEntity'
type = 'Entity'
description = 'Entity to move the model instance from.'
[[.returns]]
type = 'boolean'

[Spawn]
description = 'Initializes the entity and starts its networking. If called on a player, it will respawn them.\r\n\r\nThis calls <page>ENTITY:Initialize</page> on Lua-defined entities.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'

[StartLoopingSound]
description = 'Starts a "looping" sound. As with any other sound playing methods, this function expects the sound file to be looping itself and will not automatically loop a non looping sound file as one might expect.\r\n\r\nThis function is almost identical to <page>Global.CreateSound</page>, with the exception of the sound being created in the STATIC channel and with normal attenuation.\r\n\r\nSee also <page>Entity:StopLoopingSound</page>\r\n\r\n**Returns:** The ID number of started sound starting with 0, or -1 if we failed for some reason.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'sound'
type = 'string'
description = 'Sound to play. Can be either a sound script or a filepath.'
[[.returns]]
type = 'number'

[StartMotionController]
description = 'Starts a motion controller in the physics engine tied to this entity\'s <page>PhysObj</page>, which enables the use of <page>ENTITY:PhysicsSimulate</page>.\r\n\r\nThe motion controller can later be destroyed via <page>Entity:StopMotionController</page>.\r\n\r\nMotion controllers are used internally to control other Entities\' <page>PhysObj</page>ects, such as the Gravity Gun, +use pickup and the Physics Gun.\r\n\r\nThis function should be called every time you recreate the Entity\'s <page>PhysObj</page>. Or alternatively you should call <page>Entity:AddToMotionController</page> on the new <page>PhysObj</page>.\r\n\r\nAlso see <page>Entity:AddToMotionController</page> and <page>Entity:RemoveFromMotionController</page>.\r\n\r\n<note>Only works on a scripted <page>Entity</page> of anim type.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'

[StopAndDestroyParticles]
description = 'Stops all particle effects parented to the entity and immediately destroys them.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'

[StopLoopingSound]
description = 'Stops a sound created by <page>Entity:StartLoopingSound</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'id'
type = 'number'
description = 'The sound ID returned by <page>Entity:StartLoopingSound</page>'

[StopMotionController]
description = 'Stops the motion controller created with <page>Entity:StartMotionController</page>.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'

[StopParticleEmission]
description = 'Stops all particle effects parented to the entity.\r\n\r\nThis is ran automatically on every client by <page>Entity:StopParticles</page> if called on the server.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'

[StopParticles]
description = 'Stops any attached to the entity .pcf particles using <page>Global.ParticleEffectAttach</page>.\r\n\r\nOn client, this is the same as <page>Entity:StopParticleEmission</page>. ( and you should use StopParticleEmission instead )\r\n\r\n\r\nOn server, this is the same as running <page>Entity:StopParticleEmission</page> on every client.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'

[StopParticlesNamed]
description = 'Stops all particle effects parented to the entity with given name.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
``````````
name = 'name'
type = 'string'
description = 'The name of the particle to stop.'

[StopParticlesWithNameAndAttachment]
description = 'Stops all particle effects parented to the entity with given name on given attachment.\r\n\r\n**Scope:** Client'
[[.args]]
type = 'Entity'
``````````
name = 'name'
type = 'string'
description = 'The name of the particle to stop.'
``````````
name = 'attachment'
type = 'number'
description = 'The attachment of the entity to stop particles on.'

[StopSound]
description = 'Stops emitting the given sound from the entity, especially useful for looping sounds.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'sound'
type = 'string'
description = 'The name of the sound script or the filepath to stop playback of.'

[TakeDamage]
description = 'Applies the specified amount of damage to the entity with <page text="DMG_GENERIC">Enums/DMG</page> flag.\r\n\r\n<warning>Calling this function on the victim entity in <page>ENTITY:OnTakeDamage</page> can cause infinite loops.</warning>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'damageAmount'
type = 'number'
description = 'The amount of damage to be applied.'
``````````
name = 'attacker'
type = 'Entity'
description = 'The entity that initiated the attack that caused the damage.'
``````````
name = 'inflictor'
type = 'Entity'
description = 'The entity that applied the damage, eg. a weapon.'

[TakeDamageInfo]
description = 'Applies the damage specified by the damage info to the entity.\r\n\r\n<warning>Calling this function on the victim entity in <page>ENTITY:OnTakeDamage</page> can cause infinite loops.</warning>\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'damageInfo'
type = 'CTakeDamageInfo'
description = 'The damage to apply.'

[TakePhysicsDamage]
description = 'Applies forces to our physics object in response to damage.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'dmginfo'
type = 'CTakeDamageInfo'
description = 'The damageinfo to apply. Only <page>CTakeDamageInfo:GetDamageForce</page> and <page>CTakeDamageInfo:GetDamagePosition</page> are used.'

[TestPVS]
description = 'Check if the given position or entity is within this entity\'s PVS.\r\n\r\nSee also <page>Entity:IsDormant</page>.\r\n\r\n<note>The function won\'t take in to account <page>Global.AddOriginToPVS</page> and the like.</note>\r\n\r\n**Returns:** True if the testPoint is within our PVS.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'testPoint'
type = 'any'
description = '<page>Entity</page> or <page>Vector</page> to test against. If an entity is given, this function will test using its bounding box.'
[[.returns]]
type = 'boolean'

[TranslateBoneToPhysBone]
description = 'Returns the ID of a <page>PhysObj</page> attached to the given bone. To be used with <page>Entity:GetPhysicsObjectNum</page>.\r\n\r\nSee <page>Entity:TranslatePhysBoneToBone</page> for reverse function.\r\n\r\n**Returns:** The <page>PhysObj</page> ID of the given bone.\r\n\r\n* -1 if we somehow cannot translate\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'boneID'
type = 'number'
description = 'The ID of a bone to look up the "physics root" bone of.'
[[.returns]]
type = 'number'

[TranslatePhysBoneToBone]
description = 'Returns the boneID of the bone the given <page>PhysObj</page> is attached to.\r\n\r\nSee <page>Entity:TranslateBoneToPhysBone</page> for reverse function.\r\n\r\n**Returns:** The boneID of the bone the <page>PhysObj</page> is attached to.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'physNum'
type = 'number'
description = 'The <page>PhysObj</page> number on the entity'
[[.returns]]
type = 'number'

[Use]
description = 'Simulates a `+use` action on an entity.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'activator'
type = 'Entity'
description = 'The entity that caused this input. This will usually be the player who pressed their use key'
``````````
name = 'caller'
type = 'Entity'
description = 'The entity responsible for the input. This will typically be the same as `activator` unless some other entity is acting as a proxy'
``````````
name = 'useType'
type = 'number'
description = 'Use type, see <page>Enums/USE</page>.'
``````````
name = 'value'
type = 'number'
description = 'Any value.'

[UseClientSideAnimation]
description = '<note>Does nothing on server.</note>\r\n\r\nAnimations will be handled purely clientside instead of a fixed animtime, enabling interpolation. This does not affect layers and gestures.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'

[UseTriggerBounds]
description = 'Enables or disables trigger bounds.\r\n\r\nThis will give the entity a "trigger box" that extends around its bounding box by boundSize units in X/Y and (boundSize / 2) in +Z (-Z remains the same).\r\nThe trigger box is world aligned and will work regardless of the object\'s solidity and collision group.\r\n\r\nValve use trigger boxes for all pickup items. Their bloat size is 24, a surprisingly large figure.\r\n\r\n<note>The trigger boxes can be made visible as a light blue box by using the **ent_bbox** console command while looking at the entity. Alternatively a classname or entity index can be used as the first argument.\r\n\r\nThis requires **developer** to be set to **1**.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'enable'
type = 'boolean'
description = 'Enable or disable the bounds.'
``````````
name = 'boundSize'
type = 'number'
description = 'The distance/size of the trigger bounds.'

[ViewModelIndex]
description = 'Returns the index of this view model, it can be used to identify which one of the player\'s view models this entity is.\r\n\r\n**Returns:** View model index, ranges from 0 to 2, nil if the entity is not a view model\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[Visible]
description = 'Returns whether the target/given entity is visible from the this entity.\r\n\r\nThis is meant to be used only with NPCs.\r\n\r\nDifferences from a simple trace include:\r\n* If target has **FL_NOTARGET**, returns false\r\n* If **ai_ignoreplayers** is turned on and target is a player, returns false\r\n* Reacts to **ai_LOS_mode**:\r\n* * If 1, does a simple trace with **COLLISION_GROUP_NONE** and **MASK_BLOCKLOS**\r\n* * If not, does a trace with **MASK_BLOCKLOS_AND_NPCS** ( - **CONTENTS_BLOCKLOS** is target is player ) and a custom LOS filter ( **CTraceFilterLOS** )\r\n* Returns true if hits a vehicle the target is driving\r\n\r\n**Returns:** If the entities can see each other.\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'target'
type = 'Entity'
description = 'Entity to check for visibility to.'
[[.returns]]
type = 'boolean'

[VisibleVec]
description = 'Returns true if supplied vector is visible from the entity\'s line of sight.\r\n\r\nThis is achieved similarly to a trace.\r\n\r\n**Returns:** Within line of sight\r\n\r\n**Scope:** Server'
[[.args]]
type = 'Entity'
``````````
name = 'pos'
type = 'Vector'
description = 'The position to check for visibility'
[[.returns]]
type = 'boolean'

[WaterLevel]
description = 'Returns an integer that represents how deep in water the entity is.\r\n\r\n\r\n* **0** - The entity isn\'t in water.\r\n\r\n* **1** - Slightly submerged (at least to the feet).\r\n\r\n* **2** - The majority of the entity is submerged (at least to the waist).\r\n\r\n* **3** - Completely submerged.\r\n\r\n**Returns:** The water level.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'number'

[Weapon_SetActivity]
description = 'Sets the activity of the entity\'s active weapon.\r\n\r\n<note>This does nothing on the client.</note>\r\n<note>Only works for CBaseCombatCharacter entities, which includes players and NPCs.</note>\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'act'
type = 'number'
description = 'Activity number. See <page>Enums/ACT</page>.'
``````````
name = 'duration'
type = 'number'
description = 'How long the animation should take in seconds.'

[Weapon_TranslateActivity]
description = 'Calls and returns <page>WEAPON:TranslateActivity</page> on the weapon the entity ( player or NPC ) carries.\r\n\r\nDespite existing on client, it doesn\'t actually do anything on client.\r\n\r\n**Returns:** The translated activity\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'act'
type = 'number'
description = 'The activity to translate'
[[.returns]]
type = 'number'

[WorldSpaceAABB]
description = 'Returns two vectors representing the minimum and maximum extent of the entity\'s bounding box.\r\n\r\n**Returns:** The minimum vector for the entity\'s bounding box.\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Vector'

[WorldSpaceCenter]
description = 'Returns the center of the entity according to its collision model.\r\n\r\n**Returns:** The center of the entity\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
[[.returns]]
type = 'Vector'

[WorldToLocal]
description = 'Converts a worldspace vector into a vector local to an entity\r\n\r\n**Returns:** The local vector\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'wpos'
type = 'Vector'
description = 'The world vector'
[[.returns]]
type = 'Vector'

[WorldToLocalAngles]
description = 'Converts world angles to local angles ( local to the entity )\r\n\r\n**Returns:** The local angles\r\n\r\n**Scope:** Shared'
[[.args]]
type = 'Entity'
``````````
name = 'ang'
type = 'Angle'
description = 'The world angles'
[[.returns]]
type = 'Angle'

